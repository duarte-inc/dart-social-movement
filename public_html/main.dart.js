// Generated by dart2js (mirrors), the Dart to JavaScript compiler version: 1.19.1.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback):
//    if this function is defined, it will be called when a deferered library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error.
(function() {
  // /* ::norenaming:: */
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(object.__proto__ && object.__proto__.p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function map(x) {
    x = Object.create(null);
    x.x = 0;
    delete x.x;
    return x;
  }
  // The global objects start as so-called "slow objects". For V8, this
  // means that it won't try to make map transitions as we add properties
  // to these objects. Later on, we attempt to turn these objects into
  // fast objects by calling "convertToFastObject" (see
  // [emitConvertToFastObjectFunction]).
  var A = map();
  var B = map();
  var C = map();
  var D = map();
  var E = map();
  var F = map();
  var G = map();
  var H = map();
  var J = map();
  var K = map();
  var L = map();
  var M = map();
  var N = map();
  var O = map();
  var P = map();
  var Q = map();
  var R = map();
  var S = map();
  var T = map();
  var U = map();
  var V = map();
  var W = map();
  var X = map();
  var Y = map();
  var Z = map();
  function Isolate() {
  }
  init();
  init.mangledNames = {get$$delete: "delete", get$aboutId: "aboutId", get$active: "active", get$ago: "ago", get$allReasons: "allReasons", get$allTimeZones: "allTimeZones", get$allowSave: "allowSave", get$anySkipped: "anySkipped", get$authorId: "authorId", get$authorNick: "authorNick", get$avatarUrl: "avatarUrl", get$base: "base", get$body: "body", get$bookmarked: "bookmarked", get$canCensor: "canCensor", get$catId: "catId", get$categories: "categories", get$categoryId: "categoryId", get$censored: "censored", get$code: "code", get$collapseMode: "collapseMode", get$collapsePosition: "collapsePosition", get$completeLoad: "completeLoad", get$convId: "convId", get$convs: "convs", get$createdAt: "createdAt", get$createdAtR: "createdAtR", get$createdAtReadable: "createdAtReadable", get$createdAtWDT: "createdAtWDT", get$createdBy: "createdBy", get$createdByAvatarUrl: "createdByAvatarUrl", get$createdByNick: "createdByNick", get$creatorAvatarUrl: "creatorAvatarUrl", get$creatorId: "creatorId", get$creatorNick: "creatorNick", get$dateFrom: "dateFrom", get$dateTo: "dateTo", get$days: "days", get$deleteMessage: "deleteMessage", get$deleteTime: "deleteTime", get$depth: "depth", get$description: "description", get$docId: "docId", get$docs: "docs", get$dtext: "dtext", get$duration: "duration", get$editable: "editable", get$eligible: "eligible", get$email: "email", get$errorCode: "errorCode", get$errorMessage: "errorMessage", get$eventId: "eventId", get$events: "events", get$fromConvId: "fromConvId", get$fullModeStatus: "fullModeStatus", get$getVerList: "getVerList", get$hitText: "hitText", get$htmlDiff: "htmlDiff", get$id: "id", get$iid: "iid", get$imageBytes: "imageBytes", get$imageUrl: "imageUrl", get$importantCount: "importantCount", get$includeDetail: "includeDetail", get$includeEditing: "includeEditing", get$isCreator: "isCreator", get$isDelete: "isDelete", get$isJoined: "isJoined", get$isManager: "isManager", get$isNew: "isNew", get$isProjectManager: "isProjectManager", get$isSiteAdmin: "isSiteAdmin", get$items: "items", get$kind: "kind", get$lastActivity: "lastActivity", get$lastKnownWDT: "lastKnownWDT", get$lat: "lat", get$leadership: "leadership", get$like: "like", get$linkPaneKey: "linkPaneKey", get$linkText: "linkText", get$location: "location", get$lon: "lon", get$miles: "miles", get$mode: "mode", get$myEligible: "myEligible", get$myVote: "myVote", get$name: "name", get$newId: "newId", get$nick: "nick", get$notifyId: "notifyId", get$ok: "ok", get$open: "open", get$openingPostId: "openingPostId", get$optionDesc: "optionDesc", get$optionNo: "optionNo", get$options: "options", get$parentId: "parentId", get$parentPaneKey: "parentPaneKey", get$parentTitle: "parentTitle", get$password: "password", get$positionWDT: "positionWDT", get$postId: "postId", get$postMaxSize: "postMaxSize", get$posts: "posts", get$prefEmailNotify: "prefEmailNotify", get$privacy: "privacy", get$projectId: "projectId", get$projectTitle: "projectTitle", get$projects: "projects", get$proposalId: "proposalId", get$proposals: "proposals", get$ptext: "ptext", get$publicLinks: "publicLinks", get$publicName: "publicName", get$rangeFromWDT: "rangeFromWDT", get$rangeToWDT: "rangeToWDT", get$reaction: "reaction", get$readPositionWDT: "readPositionWDT", get$reason: "reason", get$reasonNotEditable: "reasonNotEditable", get$recoveryNick: "recoveryNick", get$recoveryPassword: "recoveryPassword", get$referenceId: "referenceId", get$referenceMode: "referenceMode", get$relatedIds: "relatedIds", get$replyAllowed: "replyAllowed", get$replyAllowedDesc: "replyAllowedDesc", get$replyMaxLength: "replyMaxLength", get$resources: "resources", get$resultPage: "resultPage", get$retitleMode: "retitleMode", get$revisionNo: "revisionNo", get$saveNick: "saveNick", get$savePW: "savePW", get$sid: "sid", get$specialCode: "specialCode", get$startTime: "startTime", get$startTimeR: "startTimeR", get$startTimeU: "startTimeU", get$status: "status", get$statusDesc: "statusDesc", get$statusDescription: "statusDescription", get$summary: "summary", get$summaryHtml: "summaryHtml", get$term: "term", get$text: "text", get$throttle: "throttle", get$throttleDescription: "throttleDescription", get$timeZone: "timeZone", get$timeout: "timeout", get$title: "title", get$triggerWarning: "triggerWarning", get$url: "url", get$userDailyMax: "userDailyMax", get$userId: "userId", get$userKind: "userKind", get$userUserKind: "userUserKind", get$users: "users", get$verList: "verList", get$visible: "visible", get$vote: "vote", get$voteCount: "voteCount", get$voteKind: "voteKind", get$why: "why", get$winningOption: "winningOption", get$year: "year"};
  // Constructors are generated at runtime.
  function setupProgram(programData, typesOffset) {
    "use strict";
    function generateAccessor(fieldDescriptor, accessors, cls) {
      var fieldInformation = fieldDescriptor.split("-");
      var field = fieldInformation[0];
      var len = field.length;
      var code = field.charCodeAt(len - 1);
      var reflectable;
      if (fieldInformation.length > 1)
        reflectable = true;
      else
        reflectable = false;
      code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
      if (code) {
        var getterCode = code & 3;
        var setterCode = code >> 2;
        var accessorName = field = field.substring(0, len - 1);
        var divider = field.indexOf(":");
        if (divider > 0) {
          accessorName = field.substring(0, divider);
          field = field.substring(divider + 1);
        }
        if (getterCode) {
          var args = getterCode & 2 ? "receiver" : "";
          var receiver = getterCode & 1 ? "this" : "receiver";
          var body = "return " + receiver + "." + field;
          var property = cls + ".prototype.get$" + accessorName + "=";
          var fn = "function(" + args + "){" + body + "}";
          if (reflectable)
            accessors.push(property + "$reflectable(" + fn + ");\n");
          else
            accessors.push(property + fn + ";\n");
        }
        if (setterCode) {
          var args = setterCode & 2 ? "receiver, value" : "value";
          var receiver = setterCode & 1 ? "this" : "receiver";
          var body = receiver + "." + field + " = value";
          var property = cls + ".prototype.set$" + accessorName + "=";
          var fn = "function(" + args + "){" + body + "}";
          if (reflectable)
            accessors.push(property + "$reflectable(" + fn + ");\n");
          else
            accessors.push(property + fn + ";\n");
        }
      }
      return field;
    }
    function defineClass(name, fields) {
      var accessors = [];
      var str = "function " + name + "(";
      var body = "";
      var fieldNames = "";
      for (var i = 0; i < fields.length; i++) {
        if (i != 0)
          str += ", ";
        var field = generateAccessor(fields[i], accessors, name);
        fieldNames += "'" + field + "',";
        var parameter = "p_" + field;
        str += parameter;
        body += "this." + field + " = " + parameter + ";\n";
      }
      if (supportsDirectProtoAccess)
        body += "this." + "$deferredAction" + "();";
      str += ") {\n" + body + "}\n";
      str += name + ".builtin$cls=\"" + name + "\";\n";
      str += "$desc=$collectedClasses." + name + "[1];\n";
      str += name + ".prototype = $desc;\n";
      if (typeof defineClass.name != "string")
        str += name + ".name=\"" + name + "\";\n";
      str += name + "." + "$__fields__" + "=[" + fieldNames + "];\n";
      str += accessors.join("");
      return str;
    }
    init.createNewIsolate = function() {
      return new Isolate();
    };
    init.classIdExtractor = function(o) {
      return o.constructor.name;
    };
    init.classFieldsExtractor = function(o) {
      var fieldNames = o.constructor.$__fields__;
      if (!fieldNames)
        return [];
      var result = [];
      result.length = fieldNames.length;
      for (var i = 0; i < fieldNames.length; i++)
        result[i] = o[fieldNames[i]];
      return result;
    };
    init.instanceFromClassId = function(name) {
      return new init.allClasses[name]();
    };
    init.initializeEmptyInstance = function(name, o, fields) {
      init.allClasses[name].apply(o, fields);
      return o;
    };
    var inheritFrom = supportsDirectProtoAccess ? function(constructor, superConstructor) {
      var prototype = constructor.prototype;
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
      prototype["$is" + constructor.name] = constructor;
      return convertToFastObject(prototype);
    } : function() {
      function tmp() {
      }
      return function(constructor, superConstructor) {
        tmp.prototype = superConstructor.prototype;
        var object = new tmp();
        convertToSlowObject(object);
        var properties = constructor.prototype;
        var members = Object.keys(properties);
        for (var i = 0; i < members.length; i++) {
          var member = members[i];
          object[member] = properties[member];
        }
        object["$is" + constructor.name] = constructor;
        object.constructor = constructor;
        constructor.prototype = object;
        return object;
      };
    }();
    function finishClasses(processedClasses) {
      var allClasses = init.allClasses;
      processedClasses.combinedConstructorFunction += "return [\n" + processedClasses.constructorsList.join(",\n  ") + "\n]";
      var constructors = new Function("$collectedClasses", processedClasses.combinedConstructorFunction)(processedClasses.collected);
      processedClasses.combinedConstructorFunction = null;
      for (var i = 0; i < constructors.length; i++) {
        var constructor = constructors[i];
        var cls = constructor.name;
        var desc = processedClasses.collected[cls];
        var globalObject = desc[0];
        desc = desc[1];
        constructor["@"] = desc;
        allClasses[cls] = constructor;
        globalObject[cls] = constructor;
      }
      constructors = null;
      var finishedClasses = init.finishedClasses;
      function finishClass(cls) {
        if (finishedClasses[cls])
          return;
        finishedClasses[cls] = true;
        var superclass = processedClasses.pending[cls];
        if (superclass && superclass.indexOf("+") > 0) {
          var s = superclass.split("+");
          superclass = s[0];
          var mixinClass = s[1];
          finishClass(mixinClass);
          var mixin = allClasses[mixinClass];
          var mixinPrototype = mixin.prototype;
          var clsPrototype = allClasses[cls].prototype;
          var properties = Object.keys(mixinPrototype);
          for (var i = 0; i < properties.length; i++) {
            var d = properties[i];
            if (!hasOwnProperty.call(clsPrototype, d))
              clsPrototype[d] = mixinPrototype[d];
          }
        }
        if (!superclass || typeof superclass != "string") {
          var constructor = allClasses[cls];
          var prototype = constructor.prototype;
          prototype.constructor = constructor;
          prototype.$isObject = constructor;
          prototype.$deferredAction = function() {
          };
          return;
        }
        finishClass(superclass);
        var superConstructor = allClasses[superclass];
        if (!superConstructor)
          superConstructor = existingIsolateProperties[superclass];
        var constructor = allClasses[cls];
        var prototype = inheritFrom(constructor, superConstructor);
        if (mixinPrototype)
          prototype.$deferredAction = mixinDeferredActionHelper(mixinPrototype, prototype);
        if (Object.prototype.hasOwnProperty.call(prototype, "%")) {
          var nativeSpec = prototype["%"].split(";");
          if (nativeSpec[0]) {
            var tags = nativeSpec[0].split("|");
            for (var i = 0; i < tags.length; i++) {
              init.interceptorsByTag[tags[i]] = constructor;
              init.leafTags[tags[i]] = true;
            }
          }
          if (nativeSpec[1]) {
            tags = nativeSpec[1].split("|");
            if (nativeSpec[2]) {
              var subclasses = nativeSpec[2].split("|");
              for (var i = 0; i < subclasses.length; i++) {
                var subclass = allClasses[subclasses[i]];
                subclass.$nativeSuperclassTag = tags[0];
              }
            }
            for (i = 0; i < tags.length; i++) {
              init.interceptorsByTag[tags[i]] = constructor;
              init.leafTags[tags[i]] = false;
            }
          }
          prototype.$deferredAction();
        }
        if (prototype.$isInterceptor)
          prototype.$deferredAction();
      }
      var properties = Object.keys(processedClasses.pending);
      for (var i = 0; i < properties.length; i++)
        finishClass(properties[i]);
    }
    function finishAddStubsHelper() {
      var prototype = this;
      while (!prototype.hasOwnProperty("$deferredAction"))
        prototype = prototype.__proto__;
      delete prototype.$deferredAction;
      var properties = Object.keys(prototype);
      for (var index = 0; index < properties.length; index++) {
        var property = properties[index];
        var firstChar = property.charCodeAt(0);
        var elem;
        if (property !== "^" && property !== "$reflectable" && firstChar !== 43 && firstChar !== 42 && (elem = prototype[property]) != null && elem.constructor === Array && property !== "<>")
          addStubs(prototype, elem, property, false, []);
      }
      convertToFastObject(prototype);
      prototype = prototype.__proto__;
      prototype.$deferredAction();
    }
    function mixinDeferredActionHelper(mixinPrototype, targetPrototype) {
      var chain;
      if (targetPrototype.hasOwnProperty("$deferredAction"))
        chain = targetPrototype.$deferredAction;
      return function foo() {
        var prototype = this;
        while (!prototype.hasOwnProperty("$deferredAction"))
          prototype = prototype.__proto__;
        if (chain)
          prototype.$deferredAction = chain;
        else {
          delete prototype.$deferredAction;
          convertToFastObject(prototype);
        }
        mixinPrototype.$deferredAction();
        prototype.$deferredAction();
      };
    }
    function processClassData(cls, descriptor, processedClasses) {
      descriptor = convertToSlowObject(descriptor);
      var previousProperty;
      var properties = Object.keys(descriptor);
      var hasDeferredWork = false;
      var shouldDeferWork = supportsDirectProtoAccess && cls != "Object";
      for (var i = 0; i < properties.length; i++) {
        var property = properties[i];
        var firstChar = property.charCodeAt(0);
        if (property === "static") {
          processStatics(init.statics[cls] = descriptor.static, processedClasses);
          delete descriptor.static;
        } else if (firstChar === 43) {
          mangledNames[previousProperty] = property.substring(1);
          var flag = descriptor[property];
          if (flag > 0)
            descriptor[previousProperty].$reflectable = flag;
        } else if (firstChar === 42) {
          descriptor[previousProperty].$defaultValues = descriptor[property];
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods)
            descriptor.$methodsWithOptionalArguments = optionalMethods = {};
          optionalMethods[property] = previousProperty;
        } else {
          var elem = descriptor[property];
          if (property !== "^" && elem != null && elem.constructor === Array && property !== "<>")
            if (shouldDeferWork)
              hasDeferredWork = true;
            else
              addStubs(descriptor, elem, property, false, []);
          else
            previousProperty = property;
        }
      }
      if (hasDeferredWork)
        descriptor.$deferredAction = finishAddStubsHelper;
      var classData = descriptor["^"], split, supr, fields = classData;
      if (typeof classData == "object" && classData instanceof Array)
        classData = fields = classData[0];
      var s = fields.split(";");
      fields = s[1] ? s[1].split(",") : [];
      supr = s[0];
      split = supr.split(":");
      if (split.length == 2) {
        supr = split[0];
        var functionSignature = split[1];
        if (functionSignature)
          descriptor.$signature = function(s) {
            return function() {
              return init.types[s];
            };
          }(functionSignature);
      }
      if (supr)
        processedClasses.pending[cls] = supr;
      processedClasses.combinedConstructorFunction += defineClass(cls, fields);
      processedClasses.constructorsList.push(cls);
      processedClasses.collected[cls] = [globalObject, descriptor];
      classes.push(cls);
    }
    function processStatics(descriptor, processedClasses) {
      var properties = Object.keys(descriptor);
      for (var i = 0; i < properties.length; i++) {
        var property = properties[i];
        if (property === "^")
          continue;
        var element = descriptor[property];
        var firstChar = property.charCodeAt(0);
        var previousProperty;
        if (firstChar === 43) {
          mangledGlobalNames[previousProperty] = property.substring(1);
          var flag = descriptor[property];
          if (flag > 0)
            descriptor[previousProperty].$reflectable = flag;
          if (element && element.length)
            init.typeInformation[previousProperty] = element;
        } else if (firstChar === 42) {
          globalObject[previousProperty].$defaultValues = element;
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods)
            descriptor.$methodsWithOptionalArguments = optionalMethods = {};
          optionalMethods[property] = previousProperty;
        } else if (typeof element === "function") {
          globalObject[previousProperty = property] = element;
          functions.push(property);
          init.globalFunctions[property] = element;
        } else if (element.constructor === Array)
          addStubs(globalObject, element, property, true, functions);
        else {
          previousProperty = property;
          processClassData(property, element, processedClasses);
        }
      }
    }
    function addStubs(prototype, array, name, isStatic, functions) {
      var index = 0, alias = array[index], f;
      if (typeof alias == "string")
        f = array[++index];
      else {
        f = alias;
        alias = name;
      }
      var funcs = [prototype[name] = prototype[alias] = f];
      f.$stubName = name;
      functions.push(name);
      for (index++; index < array.length; index++) {
        f = array[index];
        if (typeof f != "function")
          break;
        if (!isStatic)
          f.$stubName = array[++index];
        funcs.push(f);
        if (f.$stubName) {
          prototype[f.$stubName] = f;
          functions.push(f.$stubName);
        }
      }
      for (var i = 0; i < funcs.length; index++, i++)
        funcs[i].$callName = array[index];
      var getterStubName = array[index];
      array = array.slice(++index);
      var requiredParameterInfo = array[0];
      var requiredParameterCount = requiredParameterInfo >> 1;
      var isAccessor = (requiredParameterInfo & 1) === 1;
      var isSetter = requiredParameterInfo === 3;
      var isGetter = requiredParameterInfo === 1;
      var optionalParameterInfo = array[1];
      var optionalParameterCount = optionalParameterInfo >> 1;
      var optionalParametersAreNamed = (optionalParameterInfo & 1) === 1;
      var isIntercepted = requiredParameterCount + optionalParameterCount != funcs[0].length;
      var functionTypeIndex = array[2];
      if (typeof functionTypeIndex == "number")
        array[2] = functionTypeIndex + typesOffset;
      var unmangledNameIndex = 3 * optionalParameterCount + 2 * requiredParameterCount + 3;
      if (getterStubName) {
        f = tearOff(funcs, array, isStatic, name, isIntercepted);
        prototype[name].$getter = f;
        f.$getterStub = true;
        if (isStatic) {
          init.globalFunctions[name] = f;
          functions.push(getterStubName);
        }
        prototype[getterStubName] = f;
        funcs.push(f);
        f.$stubName = getterStubName;
        f.$callName = null;
        if (isIntercepted)
          init.interceptedNames[getterStubName] = 1;
      }
      var isReflectable = array.length > unmangledNameIndex;
      if (isReflectable) {
        funcs[0].$reflectable = 1;
        funcs[0].$reflectionInfo = array;
        for (var i = 1; i < funcs.length; i++) {
          funcs[i].$reflectable = 2;
          funcs[i].$reflectionInfo = array;
        }
        var mangledNames = isStatic ? init.mangledGlobalNames : init.mangledNames;
        var unmangledName = array[unmangledNameIndex];
        var reflectionName = unmangledName;
        if (getterStubName)
          mangledNames[getterStubName] = reflectionName;
        if (isSetter)
          reflectionName += "=";
        else if (!isGetter)
          reflectionName += ":" + (requiredParameterCount + optionalParameterCount);
        mangledNames[name] = reflectionName;
        funcs[0].$reflectionName = reflectionName;
        funcs[0].$metadataIndex = unmangledNameIndex + 1;
        if (optionalParameterCount)
          prototype[unmangledName + "*"] = funcs[0];
      }
    }
    Function.prototype.call$1 = function(a) {
      return this(a);
    };
    Function.prototype.call$0 = function() {
      return this();
    };
    Function.prototype.call$2 = function(a, b) {
      return this(a, b);
    };
    Function.prototype.call$4 = function(a, b, c, d) {
      return this(a, b, c, d);
    };
    Function.prototype.call$3 = function(a, b, c) {
      return this(a, b, c);
    };
    function tearOffGetter(funcs, reflectionInfo, name, isIntercepted) {
      return isIntercepted ? new Function("funcs", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "(x) {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, reflectionInfo, false, [x], name);" + "return new c(this, funcs[0], x, name);" + "}")(funcs, reflectionInfo, name, H, null) : new Function("funcs", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "() {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, reflectionInfo, false, [], name);" + "return new c(this, funcs[0], null, name);" + "}")(funcs, reflectionInfo, name, H, null);
    }
    function tearOff(funcs, reflectionInfo, isStatic, name, isIntercepted) {
      var cache;
      return isStatic ? function() {
        if (cache === void 0)
          cache = H.closureFromTearOff(this, funcs, reflectionInfo, true, [], name).prototype;
        return cache;
      } : tearOffGetter(funcs, reflectionInfo, name, isIntercepted);
    }
    var functionCounter = 0;
    if (!init.libraries)
      init.libraries = [];
    if (!init.mangledNames)
      init.mangledNames = map();
    if (!init.mangledGlobalNames)
      init.mangledGlobalNames = map();
    if (!init.statics)
      init.statics = map();
    if (!init.typeInformation)
      init.typeInformation = map();
    if (!init.globalFunctions)
      init.globalFunctions = map();
    if (!init.interceptedNames)
      init.interceptedNames = {set$$delete: 1, set$_html$_selector: 1, set$accept: 1, set$action: 1, set$active: 1, set$body: 1, set$borderTopWidth: 1, set$bottom: 1, set$checked: 1, set$children: 1, set$className: 1, set$code: 1, set$colSpan: 1, set$ctrlKey: 1, set$description: 1, set$disabled: 1, set$display: 1, set$duration: 1, set$error: 1, set$errorCode: 1, set$files: 1, set$height: 1, set$hostname: 1, set$href: 1, set$id: 1, set$innerHtml: 1, set$isCollapsed: 1, set$items: 1, set$kind: 1, set$lastChild: 1, set$left: 1, set$length: 1, set$location: 1, set$max: 1, set$maxHeight: 1, set$maxLength: 1, set$min: 1, set$mode: 1, set$multiple: 1, set$name: 1, set$newValue: 1, set$next: 1, set$nodeType: 1, set$open: 1, set$options: 1, set$overflowY: 1, set$ownerDocument: 1, set$parent: 1, set$parentNode: 1, set$password: 1, set$placeholder: 1, set$port: 1, set$previousElementSibling: 1, set$previousNode: 1, set$protocol: 1, set$readOnly: 1, set$reason: 1, set$responseText: 1, set$result: 1, set$rows: 1, set$selected: 1, set$selectedIndex: 1, set$src: 1, set$start: 1, set$startTime: 1, set$status: 1, set$style: 1, set$tagName: 1, set$target: 1, set$text: 1, set$timeout: 1, set$title: 1, set$top: 1, set$type: 1, set$url: 1, set$value: 1, set$valueAsNumber: 1, set$visible: 1, set$width: 1, get$$delete: 1, get$action: 1, get$active: 1, get$attributes: 1, get$body: 1, get$checked: 1, get$children: 1, get$classes: 1, get$clear: 1, get$code: 1, get$ctrlKey: 1, get$currentTarget: 1, get$dataset: 1, get$description: 1, get$display: 1, get$duration: 1, get$end: 1, get$error: 1, get$errorCode: 1, get$files: 1, get$first: 1, get$hashCode: 1, get$height: 1, get$host: 1, get$hostname: 1, get$id: 1, get$isCollapsed: 1, get$isEmpty: 1, get$isNegative: 1, get$isNotEmpty: 1, get$items: 1, get$iterator: 1, get$keyCode: 1, get$keys: 1, get$kind: 1, get$last: 1, get$lastChild: 1, get$left: 1, get$length: 1, get$location: 1, get$mode: 1, get$name: 1, get$newValue: 1, get$next: 1, get$nodeType: 1, get$nodes: 1, get$offsetHeight: 1, get$onBlocked: 1, get$onChange: 1, get$onClick: 1, get$onKeyDown: 1, get$onUpgradeNeeded: 1, get$open: 1, get$options: 1, get$ownerDocument: 1, get$parent: 1, get$parentNode: 1, get$password: 1, get$path: 1, get$port: 1, get$previousElementSibling: 1, get$previousNode: 1, get$protocol: 1, get$query: 1, get$reason: 1, get$responseText: 1, get$result: 1, get$runtimeType: 1, get$selected: 1, get$selectedIndex: 1, get$single: 1, get$start: 1, get$startTime: 1, get$status: 1, get$stream: 1, get$style: 1, get$tagName: 1, get$target: 1, get$text: 1, get$timeout: 1, get$title: 1, get$top: 1, get$type: 1, get$url: 1, get$value: 1, get$valueAsNumber: 1, get$values: 1, get$visible: 1, get$width: 1, $add: 1, $and: 1, $div: 1, $eq: 1, $ge: 1, $gt: 1, $index: 1, $indexSet: 1, $le: 1, $lt: 1, $mod: 1, $mul: 1, $negate: 1, $shl: 1, $shr: 1, $sub: 1, $tdiv: 1, $xor: 1, __isolate_helper$_add$1: 1, _add$1: 1, _addEventListener$3: 1, _async$_add$1: 1, _browserPropertyName$1: 1, _checkPosition$3: 1, _clear$0: 1, _clearChildren$0: 1, _collection$_remove$1: 1, _defaultSplit$1: 1, _ensureRequestAnimationFrame$0: 1, _get$1: 1, _getPropertyValueHelper$1: 1, _indexed_db$_add$1: 1, _indexed_db$_add$2: 1, _insertAdjacentNode$2: 1, _invalidPosition$3: 1, _remove$2: 1, _removeChild$1: 1, _removeEventListener$3: 1, _removeWhere$2: 1, _replaceChild$2: 1, _requestAnimationFrame$1: 1, _setRangeFast$4: 1, _shlPositive$1: 1, _shrOtherPositive$1: 1, _shrReceiverPositive$1: 1, _tdivFast$1: 1, _tdivSlow$1: 1, add$1: 1, add$2: 1, add$4$childrenCollapsed: 1, addAll$1: 1, addCell$0: 1, addEventListener$3: 1, addRow$0: 1, allMatches$1: 1, allMatches$2: 1, any$1: 1, append$1: 1, appendHtml$1: 1, appendHtml$3$treeSanitizer$validator: 1, appendHtml$4$NodeTreeSanitizer$treeSanitizer$validator: 1, appendText$1: 1, cancel$0: 1, cancel$1: 1, checkGrowable$1: 1, checkMutable$1: 1, children$0: 1, children$1: 1, clear$0: 1, clone$0: 1, clone$1: 1, clone$2: 1, close$0: 1, codeUnitAt$1: 1, collapse$0: 1, collapse$1: 1, complete$0: 1, complete$1: 1, contains$1: 1, contains$2: 1, containsKey$1: 1, createFragment$2$treeSanitizer: 1, createFragment$3$treeSanitizer$validator: 1, defaultValue$1: 1, delete$0: 1, delete$1: 1, elementAt$1: 1, endsWith$1: 1, fillRange$3: 1, find$1: 1, firstWhere$2$orElse: 1, floor$0: 1, focus$0: 1, fold$2: 1, forEach$1: 1, forEach$2: 1, getBoundingClientRect$0: 1, getComputedStyle$0: 1, getComputedStyle$1: 1, getPropertyValue$1: 1, getRange$2: 1, indexOf$1: 1, indexOf$2: 1, insertAdjacentElement$2: 1, insertAdjacentHtml$4$treeSanitizer$validator: 1, join$1: 1, lastChild$0: 1, load$0: 1, map$1: 1, matchAsPrefix$2: 1, matches$1: 1, matchesWithAncestors$1: 1, modify$1: 1, next$0: 1, next$1: 1, noSuchMethod$1: 1, open$0: 1, open$1: 1, open$2: 1, open$3: 1, open$3$async: 1, open$4$onBlocked$onUpgradeNeeded$version: 1, open$5$async$password$user: 1, padLeft$2: 1, parent$0: 1, parent$1: 1, parentNode$0: 1, pause$0: 1, pause$1: 1, preventDefault$0: 1, previousNode$0: 1, putIfAbsent$2: 1, querySelector$1: 1, querySelectorAll$1: 1, remainder$1: 1, remove$0: 1, remove$1: 1, removeEventListener$3: 1, removeRange$2: 1, removeWhere$1: 1, replaceAll$2: 1, replaceRange$3: 1, replaceWith$1: 1, result$0: 1, resume$0: 1, round$0: 1, run$0: 1, run$1: 1, scrollIntoView$0: 1, scrollIntoView$1: 1, send$1: 1, send$2: 1, setInnerHtml$1: 1, setInnerHtml$2$treeSanitizer: 1, setInnerHtml$3$treeSanitizer$validator: 1, setProperty$3: 1, setRange$3: 1, setRange$4: 1, show$0: 1, singleWhere$1: 1, skip$1: 1, split$1: 1, startsWith$1: 1, startsWith$2: 1, stopPropagation$0: 1, sublist$1: 1, sublist$2: 1, substring$1: 1, substring$2: 1, take$1: 1, text$0: 1, timeout$1: 1, timeout$2$onTimeout: 1, toInt$0: 1, toList$0: 1, toList$1$growable: 1, toLowerCase$0: 1, toString$0: 1, toUpperCase$0: 1, trim$0: 1, where$1: 1};
    var libraries = init.libraries;
    var mangledNames = init.mangledNames;
    var mangledGlobalNames = init.mangledGlobalNames;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var length = programData.length;
    var processedClasses = map();
    processedClasses.collected = map();
    processedClasses.pending = map();
    processedClasses.constructorsList = [];
    processedClasses.combinedConstructorFunction = "function $reflectable(fn){fn.$reflectable=1;return fn};\n" + "var $desc;\n";
    for (var i = 0; i < length; i++) {
      var data = programData[i];
      var name = data[0];
      var uri = data[1];
      var metadata = data[2];
      var globalObject = data[3];
      var descriptor = data[4];
      var isRoot = !!data[5];
      var fields = descriptor && descriptor["^"];
      if (fields instanceof Array)
        fields = fields[0];
      var classes = [];
      var functions = [];
      processStatics(descriptor, processedClasses);
      libraries.push([name, uri, classes, functions, metadata, fields, isRoot, globalObject]);
    }
    finishClasses(processedClasses);
  }
  Isolate.functionThatReturnsNull = function() {
  };
  var dart = [["_foreign_helper", "dart:_foreign_helper",, H, {
    "^": "",
    JS_CONST: {
      "^": "Object;code>"
    }
  }], ["_interceptors", "dart:_interceptors",, J, {
    "^": "",
    getInterceptor: function(object) {
      return void 0;
    },
    makeDispatchRecord: function(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor: function(object) {
      var record, proto, objectProto, interceptor;
      record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          H.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw H.wrapException(new P.UnimplementedError("Return interceptor for " + H.S(proto(object, record))));
      }
      interceptor = H.lookupAndCacheInterceptor(object);
      if (interceptor == null) {
        if (typeof object == "function")
          return C.JavaScriptFunction_methods;
        proto = Object.getPrototypeOf(object);
        if (proto == null || proto === Object.prototype)
          return C.PlainJavaScriptObject_methods;
        else
          return C.UnknownJavaScriptObject_methods;
      }
      return interceptor;
    },
    Interceptor: {
      "^": "Object;",
      $eq: function(receiver, other) {
        return receiver === other;
      },
      get$hashCode: function(receiver) {
        return H.Primitives_objectHashCode(receiver);
      },
      toString$0: ["super$Interceptor$toString", function(receiver) {
        return H.Primitives_objectToHumanReadableString(receiver);
      }],
      noSuchMethod$1: ["super$Interceptor$noSuchMethod", function(receiver, invocation) {
        throw H.wrapException(P.NoSuchMethodError$(receiver, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
      }, null, "get$noSuchMethod", 2, 0, null, 12, []],
      get$runtimeType: function(receiver) {
        return new H.TypeImpl(H.getRuntimeTypeString(receiver), null);
      },
      "%": "ANGLEInstancedArrays|ANGLE_instanced_arrays|AnimationEffectReadOnly|AnimationTimeline|AppBannerPromptResult|AudioListener|Bluetooth|BluetoothGATTCharacteristic|BluetoothGATTRemoteServer|BluetoothGATTService|BluetoothUUID|CHROMIUMSubscribeUniform|CHROMIUMValuebuffer|CSS|Cache|CanvasGradient|CanvasPattern|CanvasRenderingContext2D|Clients|CompositorProxy|ConsoleBase|Coordinates|CredentialsContainer|Crypto|CryptoKey|DOMFileSystemSync|DOMImplementation|DOMMatrix|DOMMatrixReadOnly|DOMParser|DOMPoint|DOMPointReadOnly|DOMStringMap|Database|DeprecatedStorageInfo|DeprecatedStorageQuota|DeviceAcceleration|DeviceRotationRate|DirectoryEntrySync|DirectoryReader|DirectoryReaderSync|EXTBlendMinMax|EXTFragDepth|EXTShaderTextureLOD|EXTTextureFilterAnisotropic|EXT_blend_minmax|EXT_frag_depth|EXT_sRGB|EXT_shader_texture_lod|EXT_texture_filter_anisotropic|EXTsRGB|EffectModel|EntrySync|FileEntrySync|FileReaderSync|FileWriterSync|Geofencing|Geolocation|Geoposition|HMDVRDevice|HTMLAllCollection|Headers|ImageBitmap|InjectedScriptHost|InputDevice|KeyframeEffect|MIDIInputMap|MIDIOutputMap|MediaDevices|MediaKeyStatusMap|MediaKeySystemAccess|MediaKeys|MediaSession|MemoryInfo|MessageChannel|Metadata|MutationObserver|NavigatorStorageUtils|NodeFilter|NonElementParentNode|OESElementIndexUint|OESStandardDerivatives|OESTextureFloat|OESTextureFloatLinear|OESTextureHalfFloat|OESTextureHalfFloatLinear|OESVertexArrayObject|OES_element_index_uint|OES_standard_derivatives|OES_texture_float|OES_texture_float_linear|OES_texture_half_float|OES_texture_half_float_linear|OES_vertex_array_object|PagePopupController|PerformanceNavigation|PerformanceTiming|PeriodicSyncManager|PeriodicSyncRegistration|PeriodicWave|Permissions|PositionSensorVRDevice|PushManager|PushSubscription|RTCIceCandidate|SQLResultSet|SQLTransaction|SVGAnimatedAngle|SVGAnimatedBoolean|SVGAnimatedEnumeration|SVGAnimatedInteger|SVGAnimatedLength|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedPreserveAspectRatio|SVGAnimatedRect|SVGAnimatedString|SVGAnimatedTransformList|SVGMatrix|SVGPoint|SVGPreserveAspectRatio|SVGUnitTypes|Screen|ScrollState|SharedArrayBuffer|SpeechRecognitionAlternative|StorageInfo|StorageQuota|Stream|StyleMedia|SubtleCrypto|SyncManager|SyncRegistration|TextMetrics|TrackDefault|VRDevice|VREyeParameters|VRFieldOfView|VRPositionState|ValidityState|VideoPlaybackQuality|WEBGL_compressed_texture_atc|WEBGL_compressed_texture_etc1|WEBGL_compressed_texture_pvrtc|WEBGL_compressed_texture_s3tc|WEBGL_debug_renderer_info|WEBGL_debug_shaders|WEBGL_depth_texture|WEBGL_draw_buffers|WEBGL_lose_context|WebGLBuffer|WebGLCompressedTextureATC|WebGLCompressedTextureETC1|WebGLCompressedTexturePVRTC|WebGLCompressedTextureS3TC|WebGLDebugRendererInfo|WebGLDebugShaders|WebGLDepthTexture|WebGLDrawBuffers|WebGLExtensionLoseContext|WebGLFramebuffer|WebGLLoseContext|WebGLProgram|WebGLQuery|WebGLRenderbuffer|WebGLRenderingContext|WebGLSampler|WebGLShader|WebGLShaderPrecisionFormat|WebGLSync|WebGLTexture|WebGLTransformFeedback|WebGLUniformLocation|WebGLVertexArrayObject|WebGLVertexArrayObjectOES|WebKitCSSMatrix|WebKitMutationObserver|WorkerConsole|XMLSerializer|XPathEvaluator|XPathExpression|XPathNSResolver|XPathResult|XSLTProcessor|mozRTCIceCandidate"
    },
    JSBool: {
      "^": "Interceptor;",
      toString$0: function(receiver) {
        return String(receiver);
      },
      get$hashCode: function(receiver) {
        return receiver ? 519018 : 218159;
      },
      get$runtimeType: function(receiver) {
        return C.Type_bool_lhE;
      },
      $isbool: 1
    },
    JSNull: {
      "^": "Interceptor;",
      $eq: function(receiver, other) {
        return null == other;
      },
      toString$0: function(receiver) {
        return "null";
      },
      get$hashCode: function(receiver) {
        return 0;
      },
      get$runtimeType: function(receiver) {
        return C.Type_Null_Yyn;
      },
      noSuchMethod$1: [function(receiver, invocation) {
        return this.super$Interceptor$noSuchMethod(receiver, invocation);
      }, null, "get$noSuchMethod", 2, 0, null, 12, []]
    },
    JavaScriptObject: {
      "^": "Interceptor;",
      get$hashCode: function(receiver) {
        return 0;
      },
      get$runtimeType: function(receiver) {
        return C.Type_JSObject_8k0;
      },
      toString$0: ["super$JavaScriptObject$toString", function(receiver) {
        return String(receiver);
      }],
      makeHtml$1: function(receiver, p0) {
        return receiver.makeHtml(p0);
      },
      run$0: function(receiver) {
        return receiver.run();
      },
      $isJSObject: 1
    },
    PlainJavaScriptObject: {
      "^": "JavaScriptObject;"
    },
    UnknownJavaScriptObject: {
      "^": "JavaScriptObject;"
    },
    JavaScriptFunction: {
      "^": "JavaScriptObject;",
      toString$0: function(receiver) {
        var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
        return dartClosure == null ? this.super$JavaScriptObject$toString(receiver) : J.toString$0$(dartClosure);
      },
      $isFunction: 1,
      $signature: function() {
        return {func: 1, opt: [,,,,,,,,,,,,,,,,]};
      }
    },
    JSArray: {
      "^": "Interceptor;",
      checkMutable$1: function(receiver, reason) {
        if (!!receiver.immutable$list)
          throw H.wrapException(new P.UnsupportedError(reason));
      },
      checkGrowable$1: function(receiver, reason) {
        if (!!receiver.fixed$length)
          throw H.wrapException(new P.UnsupportedError(reason));
      },
      add$1: function(receiver, value) {
        this.checkGrowable$1(receiver, "add");
        receiver.push(value);
      },
      remove$1: function(receiver, element) {
        var i;
        this.checkGrowable$1(receiver, "remove");
        for (i = 0; i < receiver.length; ++i)
          if (J.$eq$(receiver[i], element)) {
            receiver.splice(i, 1);
            return true;
          }
        return false;
      },
      removeWhere$1: function(receiver, test) {
        this.checkGrowable$1(receiver, "removeWhere");
        this._removeWhere$2(receiver, test, true);
      },
      _removeWhere$2: function(receiver, test, removeMatching) {
        var retained, end, i, element, t1;
        retained = [];
        end = receiver.length;
        for (i = 0; i < end; ++i) {
          element = receiver[i];
          if (test.call$1(element) !== true)
            retained.push(element);
          if (receiver.length !== end)
            throw H.wrapException(new P.ConcurrentModificationError(receiver));
        }
        t1 = retained.length;
        if (t1 === end)
          return;
        this.set$length(receiver, t1);
        for (i = 0; i < retained.length; ++i)
          this.$indexSet(receiver, i, retained[i]);
      },
      where$1: function(receiver, f) {
        return H.setRuntimeTypeInfo(new H.WhereIterable(receiver, f), [H.getTypeArgumentByIndex(receiver, 0)]);
      },
      addAll$1: function(receiver, collection) {
        var t1;
        this.checkGrowable$1(receiver, "addAll");
        for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
          receiver.push(t1.get$current());
      },
      clear$0: function(receiver) {
        this.set$length(receiver, 0);
      },
      forEach$1: function(receiver, f) {
        var end, i;
        end = receiver.length;
        for (i = 0; i < end; ++i) {
          f.call$1(receiver[i]);
          if (receiver.length !== end)
            throw H.wrapException(new P.ConcurrentModificationError(receiver));
        }
      },
      map$1: function(receiver, f) {
        return H.setRuntimeTypeInfo(new H.MappedListIterable(receiver, f), [null, null]);
      },
      join$1: function(receiver, separator) {
        var t1, list, i, t2;
        t1 = receiver.length;
        list = new Array(t1);
        list.fixed$length = Array;
        for (i = 0; i < receiver.length; ++i) {
          t2 = H.S(receiver[i]);
          if (i >= t1)
            return H.ioore(list, i);
          list[i] = t2;
        }
        return list.join(separator);
      },
      skip$1: function(receiver, n) {
        return H.SubListIterable$(receiver, n, null, H.getTypeArgumentByIndex(receiver, 0));
      },
      fold$2: function(receiver, initialValue, combine) {
        var $length, value, i;
        $length = receiver.length;
        for (value = false, i = 0; i < $length; ++i) {
          value = combine.call$2(value, receiver[i]);
          if (receiver.length !== $length)
            throw H.wrapException(new P.ConcurrentModificationError(receiver));
        }
        return value;
      },
      firstWhere$2$orElse: function(receiver, test, orElse) {
        var end, i, element;
        end = receiver.length;
        for (i = 0; i < end; ++i) {
          element = receiver[i];
          if (test.call$1(element) === true)
            return element;
          if (receiver.length !== end)
            throw H.wrapException(new P.ConcurrentModificationError(receiver));
        }
        return orElse.call$0();
      },
      singleWhere$1: function(receiver, test) {
        var $length, match, matchFound, i, element;
        $length = receiver.length;
        for (match = null, matchFound = false, i = 0; i < $length; ++i) {
          element = receiver[i];
          if (test.call$1(element) === true) {
            if (matchFound)
              throw H.wrapException(H.IterableElementError_tooMany());
            match = element;
            matchFound = true;
          }
          if ($length !== receiver.length)
            throw H.wrapException(new P.ConcurrentModificationError(receiver));
        }
        if (matchFound)
          return match;
        throw H.wrapException(H.IterableElementError_noElement());
      },
      elementAt$1: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      sublist$2: function(receiver, start, end) {
        if (start < 0 || start > receiver.length)
          throw H.wrapException(P.RangeError$range(start, 0, receiver.length, "start", null));
        if (end == null)
          end = receiver.length;
        else {
          if (typeof end !== "number" || Math.floor(end) !== end)
            throw H.wrapException(H.argumentErrorValue(end));
          if (end < start || end > receiver.length)
            throw H.wrapException(P.RangeError$range(end, start, receiver.length, "end", null));
        }
        if (start === end)
          return H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(receiver, 0)]);
        return H.setRuntimeTypeInfo(receiver.slice(start, end), [H.getTypeArgumentByIndex(receiver, 0)]);
      },
      sublist$1: function($receiver, start) {
        return this.sublist$2($receiver, start, null);
      },
      getRange$2: function(receiver, start, end) {
        P.RangeError_checkValidRange(start, end, receiver.length, null, null, null);
        return H.SubListIterable$(receiver, start, end, H.getTypeArgumentByIndex(receiver, 0));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(H.IterableElementError_noElement());
      },
      get$last: function(receiver) {
        var t1 = receiver.length;
        if (t1 > 0)
          return receiver[t1 - 1];
        throw H.wrapException(H.IterableElementError_noElement());
      },
      setRange$4: function(receiver, start, end, iterable, skipCount) {
        var $length, t1, t2, i, t3, t4, element;
        this.checkMutable$1(receiver, "set range");
        P.RangeError_checkValidRange(start, end, receiver.length, null, null, null);
        $length = J.$sub$n(end, start);
        t1 = J.getInterceptor($length);
        if (t1.$eq($length, 0))
          return;
        t2 = J.getInterceptor$n(skipCount);
        if (t2.$lt(skipCount, 0))
          H.throwExpression(P.RangeError$range(skipCount, 0, null, "skipCount", null));
        if (J.$gt$n(t2.$add(skipCount, $length), iterable.length))
          throw H.wrapException(H.IterableElementError_tooFew());
        if (t2.$lt(skipCount, start))
          for (i = t1.$sub($length, 1), t1 = J.getInterceptor$ns(start); t3 = J.getInterceptor$n(i), t3.$ge(i, 0); i = t3.$sub(i, 1)) {
            t4 = t2.$add(skipCount, i);
            if (t4 >>> 0 !== t4 || t4 >= iterable.length)
              return H.ioore(iterable, t4);
            element = iterable[t4];
            receiver[t1.$add(start, i)] = element;
          }
        else {
          if (typeof $length !== "number")
            return H.iae($length);
          t1 = J.getInterceptor$ns(start);
          i = 0;
          for (; i < $length; ++i) {
            t3 = t2.$add(skipCount, i);
            if (t3 >>> 0 !== t3 || t3 >= iterable.length)
              return H.ioore(iterable, t3);
            element = iterable[t3];
            receiver[t1.$add(start, i)] = element;
          }
        }
      },
      setRange$3: function($receiver, start, end, iterable) {
        return this.setRange$4($receiver, start, end, iterable, 0);
      },
      fillRange$3: function(receiver, start, end, fillValue) {
        var i;
        this.checkMutable$1(receiver, "fill range");
        P.RangeError_checkValidRange(start, end, receiver.length, null, null, null);
        for (i = start; i < end; ++i)
          receiver[i] = fillValue;
      },
      replaceRange$3: function(receiver, start, end, replacement) {
        var removeLength, insertLength, t1, t2, delta, insertEnd, newLength;
        this.checkGrowable$1(receiver, "replace range");
        P.RangeError_checkValidRange(start, end, receiver.length, null, null, null);
        replacement = C.JSString_methods.toList$0(replacement);
        removeLength = J.$sub$n(end, start);
        insertLength = replacement.length;
        t1 = J.getInterceptor$n(removeLength);
        t2 = J.getInterceptor$ns(start);
        if (t1.$ge(removeLength, insertLength)) {
          delta = t1.$sub(removeLength, insertLength);
          insertEnd = t2.$add(start, insertLength);
          t1 = receiver.length;
          if (typeof delta !== "number")
            return H.iae(delta);
          newLength = t1 - delta;
          this.setRange$3(receiver, start, insertEnd, replacement);
          if (delta !== 0) {
            this.setRange$4(receiver, insertEnd, newLength, receiver, end);
            this.set$length(receiver, newLength);
          }
        } else {
          if (typeof removeLength !== "number")
            return H.iae(removeLength);
          newLength = receiver.length + (insertLength - removeLength);
          insertEnd = t2.$add(start, insertLength);
          this.set$length(receiver, newLength);
          this.setRange$4(receiver, insertEnd, newLength, receiver, end);
          this.setRange$3(receiver, start, insertEnd, replacement);
        }
      },
      any$1: function(receiver, test) {
        var end, i;
        end = receiver.length;
        for (i = 0; i < end; ++i) {
          if (test.call$1(receiver[i]) === true)
            return true;
          if (receiver.length !== end)
            throw H.wrapException(new P.ConcurrentModificationError(receiver));
        }
        return false;
      },
      indexOf$2: function(receiver, element, start) {
        var i, t1;
        if (start >= receiver.length)
          return -1;
        if (start < 0)
          start = 0;
        for (i = start; t1 = receiver.length, i < t1; ++i) {
          if (i < 0)
            return H.ioore(receiver, i);
          if (J.$eq$(receiver[i], element))
            return i;
        }
        return -1;
      },
      indexOf$1: function($receiver, element) {
        return this.indexOf$2($receiver, element, 0);
      },
      contains$1: function(receiver, other) {
        var i;
        for (i = 0; i < receiver.length; ++i)
          if (J.$eq$(receiver[i], other))
            return true;
        return false;
      },
      get$isEmpty: function(receiver) {
        return receiver.length === 0;
      },
      get$isNotEmpty: function(receiver) {
        return receiver.length !== 0;
      },
      toString$0: function(receiver) {
        return P.IterableBase_iterableToFullString(receiver, "[", "]");
      },
      toList$1$growable: function(receiver, growable) {
        return H.setRuntimeTypeInfo(receiver.slice(), [H.getTypeArgumentByIndex(receiver, 0)]);
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      get$iterator: function(receiver) {
        return H.setRuntimeTypeInfo(new J.ArrayIterator(receiver, receiver.length, 0, null), [H.getTypeArgumentByIndex(receiver, 0)]);
      },
      get$hashCode: function(receiver) {
        return H.Primitives_objectHashCode(receiver);
      },
      get$length: function(receiver) {
        return receiver.length;
      },
      set$length: function(receiver, newLength) {
        this.checkGrowable$1(receiver, "set length");
        if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
          throw H.wrapException(P.ArgumentError$value(newLength, "newLength", null));
        if (newLength < 0)
          throw H.wrapException(P.RangeError$range(newLength, 0, null, "newLength", null));
        receiver.length = newLength;
      },
      $index: function(receiver, index) {
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        if (index >= receiver.length || index < 0)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        if (!!receiver.immutable$list)
          H.throwExpression(new P.UnsupportedError("indexed set"));
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        if (index >= receiver.length || index < 0)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        receiver[index] = value;
      },
      $isJSIndexable: 1,
      $asJSIndexable: Isolate.functionThatReturnsNull,
      $isList: 1,
      $asList: null,
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    JSMutableArray: {
      "^": "JSArray;",
      $isJSIndexable: 1,
      $asJSIndexable: Isolate.functionThatReturnsNull
    },
    JSFixedArray: {
      "^": "JSMutableArray;"
    },
    JSExtendableArray: {
      "^": "JSMutableArray;"
    },
    JSUnmodifiableArray: {
      "^": "JSArray;"
    },
    ArrayIterator: {
      "^": "Object;__interceptors$_iterable,__interceptors$_length,__interceptors$_index,__interceptors$_current",
      get$current: function() {
        return this.__interceptors$_current;
      },
      moveNext$0: function() {
        var t1, $length, t2;
        t1 = this.__interceptors$_iterable;
        $length = t1.length;
        if (this.__interceptors$_length !== $length)
          throw H.wrapException(H.throwConcurrentModificationError(t1));
        t2 = this.__interceptors$_index;
        if (t2 >= $length) {
          this.__interceptors$_current = null;
          return false;
        }
        this.__interceptors$_current = t1[t2];
        this.__interceptors$_index = t2 + 1;
        return true;
      }
    },
    JSNumber: {
      "^": "Interceptor;",
      get$isNegative: function(receiver) {
        return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
      },
      remainder$1: function(receiver, b) {
        return receiver % b;
      },
      toInt$0: function(receiver) {
        var t1;
        if (receiver >= -2147483648 && receiver <= 2147483647)
          return receiver | 0;
        if (isFinite(receiver)) {
          t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
          return t1 + 0;
        }
        throw H.wrapException(new P.UnsupportedError("" + receiver + ".toInt()"));
      },
      floor$0: function(receiver) {
        var truncated, d;
        if (receiver >= 0) {
          if (receiver <= 2147483647)
            return receiver | 0;
        } else if (receiver >= -2147483648) {
          truncated = receiver | 0;
          return receiver === truncated ? truncated : truncated - 1;
        }
        d = Math.floor(receiver);
        if (isFinite(d))
          return d;
        throw H.wrapException(new P.UnsupportedError("" + receiver + ".floor()"));
      },
      round$0: function(receiver) {
        if (receiver > 0) {
          if (receiver !== 1 / 0)
            return Math.round(receiver);
        } else if (receiver > -1 / 0)
          return 0 - Math.round(0 - receiver);
        throw H.wrapException(new P.UnsupportedError("" + receiver + ".round()"));
      },
      toString$0: function(receiver) {
        if (receiver === 0 && 1 / receiver < 0)
          return "-0.0";
        else
          return "" + receiver;
      },
      get$hashCode: function(receiver) {
        return receiver & 0x1FFFFFFF;
      },
      $negate: function(receiver) {
        return -receiver;
      },
      $add: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver + other;
      },
      $sub: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver - other;
      },
      $div: function(receiver, other) {
        return receiver / other;
      },
      $mul: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver * other;
      },
      $mod: function(receiver, other) {
        var result = receiver % other;
        if (result === 0)
          return 0;
        if (result > 0)
          return result;
        if (other < 0)
          return result - other;
        else
          return result + other;
      },
      $tdiv: function(receiver, other) {
        if ((receiver | 0) === receiver)
          if (other >= 1 || false)
            return receiver / other | 0;
        return this._tdivSlow$1(receiver, other);
      },
      _tdivFast$1: function(receiver, other) {
        return (receiver | 0) === receiver ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
      },
      _tdivSlow$1: function(receiver, other) {
        var quotient = receiver / other;
        if (quotient >= -2147483648 && quotient <= 2147483647)
          return quotient | 0;
        if (quotient > 0) {
          if (quotient !== 1 / 0)
            return Math.floor(quotient);
        } else if (quotient > -1 / 0)
          return Math.ceil(quotient);
        throw H.wrapException(new P.UnsupportedError("Result of truncating division is " + H.S(quotient) + ": " + H.S(receiver) + " ~/ " + other));
      },
      $shl: function(receiver, other) {
        if (other < 0)
          throw H.wrapException(H.argumentErrorValue(other));
        return other > 31 ? 0 : receiver << other >>> 0;
      },
      _shlPositive$1: function(receiver, other) {
        return other > 31 ? 0 : receiver << other >>> 0;
      },
      $shr: function(receiver, other) {
        var t1;
        if (other < 0)
          throw H.wrapException(H.argumentErrorValue(other));
        if (receiver > 0)
          t1 = other > 31 ? 0 : receiver >>> other;
        else {
          t1 = other > 31 ? 31 : other;
          t1 = receiver >> t1 >>> 0;
        }
        return t1;
      },
      _shrOtherPositive$1: function(receiver, other) {
        var t1;
        if (receiver > 0)
          t1 = other > 31 ? 0 : receiver >>> other;
        else {
          t1 = other > 31 ? 31 : other;
          t1 = receiver >> t1 >>> 0;
        }
        return t1;
      },
      _shrReceiverPositive$1: function(receiver, other) {
        if (other < 0)
          throw H.wrapException(H.argumentErrorValue(other));
        return other > 31 ? 0 : receiver >>> other;
      },
      $and: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return (receiver & other) >>> 0;
      },
      $xor: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return (receiver ^ other) >>> 0;
      },
      $lt: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver < other;
      },
      $gt: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver > other;
      },
      $le: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver <= other;
      },
      $ge: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver >= other;
      },
      get$runtimeType: function(receiver) {
        return C.Type_num_cv7;
      },
      $isnum: 1
    },
    JSInt: {
      "^": "JSNumber;",
      get$runtimeType: function(receiver) {
        return C.Type_int_tHn;
      },
      $is$double: 1,
      $isnum: 1,
      $is$int: 1
    },
    JSDouble: {
      "^": "JSNumber;",
      get$runtimeType: function(receiver) {
        return C.Type_double_K1J;
      },
      $is$double: 1,
      $isnum: 1
    },
    JSPositiveInt: {
      "^": "JSInt;"
    },
    JSUInt32: {
      "^": "JSPositiveInt;"
    },
    JSUInt31: {
      "^": "JSUInt32;"
    },
    JSString: {
      "^": "Interceptor;",
      codeUnitAt$1: function(receiver, index) {
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        if (index < 0)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        if (index >= receiver.length)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        return receiver.charCodeAt(index);
      },
      allMatches$2: function(receiver, string, start) {
        H.checkString(string);
        H.checkInt(start);
        if (start > string.length)
          throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
        return new H._StringAllMatchesIterable(string, receiver, start);
      },
      allMatches$1: function($receiver, string) {
        return this.allMatches$2($receiver, string, 0);
      },
      matchAsPrefix$2: function(receiver, string, start) {
        var t1, t2, i;
        t1 = J.getInterceptor$n(start);
        if (t1.$lt(start, 0) || t1.$gt(start, string.length))
          throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
        t2 = receiver.length;
        if (J.$gt$n(t1.$add(start, t2), string.length))
          return;
        for (i = 0; i < t2; ++i)
          if (this.codeUnitAt$1(string, t1.$add(start, i)) !== this.codeUnitAt$1(receiver, i))
            return;
        return new H.StringMatch(start, string, receiver);
      },
      $add: function(receiver, other) {
        if (typeof other !== "string")
          throw H.wrapException(P.ArgumentError$value(other, null, null));
        return receiver + other;
      },
      endsWith$1: function(receiver, other) {
        var otherLength, t1;
        H.checkString(other);
        otherLength = other.length;
        t1 = receiver.length;
        if (otherLength > t1)
          return false;
        return other === this.substring$1(receiver, t1 - otherLength);
      },
      replaceAll$2: function(receiver, from, to) {
        H.checkString(to);
        return H.stringReplaceAllUnchecked(receiver, from, to);
      },
      split$1: function(receiver, pattern) {
        if (pattern == null)
          H.throwExpression(H.argumentErrorValue(pattern));
        if (typeof pattern === "string")
          return receiver.split(pattern);
        else if (pattern instanceof H.JSSyntaxRegExp && pattern.get$_nativeAnchoredVersion().exec('').length - 2 === 0)
          return receiver.split(pattern.get$_nativeRegExp());
        else
          return this._defaultSplit$1(receiver, pattern);
      },
      replaceRange$3: function(receiver, start, end, replacement) {
        var prefix, suffix;
        H.checkString(replacement);
        H.checkInt(start);
        end = P.RangeError_checkValidRange(start, end, receiver.length, null, null, null);
        H.checkInt(end);
        prefix = receiver.substring(0, start);
        suffix = receiver.substring(end);
        return prefix + replacement + suffix;
      },
      _defaultSplit$1: function(receiver, pattern) {
        var result, t1, start, $length, match, matchStart, matchEnd;
        result = H.setRuntimeTypeInfo([], [P.String]);
        for (t1 = J.allMatches$1$s(pattern, receiver), t1 = t1.get$iterator(t1), start = 0, $length = 1; t1.moveNext$0();) {
          match = t1.get$current();
          matchStart = match.get$start(match);
          matchEnd = match.get$end(match);
          $length = J.$sub$n(matchEnd, matchStart);
          if (J.$eq$($length, 0) && J.$eq$(start, matchStart))
            continue;
          result.push(this.substring$2(receiver, start, matchStart));
          start = matchEnd;
        }
        if (J.$lt$n(start, receiver.length) || J.$gt$n($length, 0))
          result.push(this.substring$1(receiver, start));
        return result;
      },
      startsWith$2: function(receiver, pattern, index) {
        var t1, endIndex;
        if (typeof index !== "number" || Math.floor(index) !== index)
          H.throwExpression(H.argumentErrorValue(index));
        t1 = J.getInterceptor$n(index);
        if (t1.$lt(index, 0) || t1.$gt(index, receiver.length))
          throw H.wrapException(P.RangeError$range(index, 0, receiver.length, null, null));
        if (typeof pattern === "string") {
          endIndex = t1.$add(index, pattern.length);
          if (J.$gt$n(endIndex, receiver.length))
            return false;
          return pattern === receiver.substring(index, endIndex);
        }
        return J.matchAsPrefix$2$s(pattern, receiver, index) != null;
      },
      startsWith$1: function($receiver, pattern) {
        return this.startsWith$2($receiver, pattern, 0);
      },
      substring$2: function(receiver, startIndex, endIndex) {
        var t1;
        if (typeof startIndex !== "number" || Math.floor(startIndex) !== startIndex)
          H.throwExpression(H.argumentErrorValue(startIndex));
        if (endIndex == null)
          endIndex = receiver.length;
        if (typeof endIndex !== "number" || Math.floor(endIndex) !== endIndex)
          H.throwExpression(H.argumentErrorValue(endIndex));
        t1 = J.getInterceptor$n(startIndex);
        if (t1.$lt(startIndex, 0))
          throw H.wrapException(P.RangeError$value(startIndex, null, null));
        if (t1.$gt(startIndex, endIndex))
          throw H.wrapException(P.RangeError$value(startIndex, null, null));
        if (J.$gt$n(endIndex, receiver.length))
          throw H.wrapException(P.RangeError$value(endIndex, null, null));
        return receiver.substring(startIndex, endIndex);
      },
      substring$1: function($receiver, startIndex) {
        return this.substring$2($receiver, startIndex, null);
      },
      toLowerCase$0: function(receiver) {
        return receiver.toLowerCase();
      },
      toUpperCase$0: function(receiver) {
        return receiver.toUpperCase();
      },
      trim$0: function(receiver) {
        var result, endIndex, startIndex, t1, endIndex0;
        result = receiver.trim();
        endIndex = result.length;
        if (endIndex === 0)
          return result;
        if (this.codeUnitAt$1(result, 0) === 133) {
          startIndex = J.JSString__skipLeadingWhitespace(result, 1);
          if (startIndex === endIndex)
            return "";
        } else
          startIndex = 0;
        t1 = endIndex - 1;
        endIndex0 = this.codeUnitAt$1(result, t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
        if (startIndex === 0 && endIndex0 === endIndex)
          return result;
        return result.substring(startIndex, endIndex0);
      },
      $mul: function(receiver, times) {
        var s, result;
        if (typeof times !== "number")
          return H.iae(times);
        if (0 >= times)
          return "";
        if (times === 1 || receiver.length === 0)
          return receiver;
        if (times !== times >>> 0)
          throw H.wrapException(C.C_OutOfMemoryError);
        for (s = receiver, result = ""; true;) {
          if ((times & 1) === 1)
            result = s + result;
          times = times >>> 1;
          if (times === 0)
            break;
          s += s;
        }
        return result;
      },
      padLeft$2: function(receiver, width, padding) {
        var delta = width - receiver.length;
        if (delta <= 0)
          return receiver;
        return this.$mul(padding, delta) + receiver;
      },
      indexOf$2: function(receiver, pattern, start) {
        if (start < 0 || start > receiver.length)
          throw H.wrapException(P.RangeError$range(start, 0, receiver.length, null, null));
        return receiver.indexOf(pattern, start);
      },
      indexOf$1: function($receiver, pattern) {
        return this.indexOf$2($receiver, pattern, 0);
      },
      contains$2: function(receiver, other, startIndex) {
        if (startIndex > receiver.length)
          throw H.wrapException(P.RangeError$range(startIndex, 0, receiver.length, null, null));
        return H.stringContainsUnchecked(receiver, other, startIndex);
      },
      contains$1: function($receiver, other) {
        return this.contains$2($receiver, other, 0);
      },
      get$isEmpty: function(receiver) {
        return receiver.length === 0;
      },
      get$isNotEmpty: function(receiver) {
        return receiver.length !== 0;
      },
      toString$0: function(receiver) {
        return receiver;
      },
      get$hashCode: function(receiver) {
        var t1, hash, i;
        for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
          hash = 536870911 & hash + receiver.charCodeAt(i);
          hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
          hash ^= hash >> 6;
        }
        hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
        hash ^= hash >> 11;
        return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
      },
      get$runtimeType: function(receiver) {
        return C.Type_String_k8F;
      },
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        if (index >= receiver.length || index < 0)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $isJSIndexable: 1,
      $asJSIndexable: Isolate.functionThatReturnsNull,
      $isString: 1,
      static: {
        JSString__isWhitespace: function(codeUnit) {
          if (codeUnit < 256)
            switch (codeUnit) {
              case 9:
              case 10:
              case 11:
              case 12:
              case 13:
              case 32:
              case 133:
              case 160:
                return true;
              default:
                return false;
            }
          switch (codeUnit) {
            case 5760:
            case 6158:
            case 8192:
            case 8193:
            case 8194:
            case 8195:
            case 8196:
            case 8197:
            case 8198:
            case 8199:
            case 8200:
            case 8201:
            case 8202:
            case 8232:
            case 8233:
            case 8239:
            case 8287:
            case 12288:
            case 65279:
              return true;
            default:
              return false;
          }
        },
        JSString__skipLeadingWhitespace: function(string, index) {
          var t1, codeUnit;
          for (t1 = string.length; index < t1;) {
            codeUnit = C.JSString_methods.codeUnitAt$1(string, index);
            if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
              break;
            ++index;
          }
          return index;
        },
        JSString__skipTrailingWhitespace: function(string, index) {
          var index0, codeUnit;
          for (; index > 0; index = index0) {
            index0 = index - 1;
            codeUnit = C.JSString_methods.codeUnitAt$1(string, index0);
            if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
              break;
          }
          return index;
        }
      }
    }
  }], ["dart._internal", "dart:_internal",, H, {
    "^": "",
    IterableElementError_noElement: function() {
      return new P.StateError("No element");
    },
    IterableElementError_tooMany: function() {
      return new P.StateError("Too many elements");
    },
    IterableElementError_tooFew: function() {
      return new P.StateError("Too few elements");
    },
    ListIterable: {
      "^": "Iterable;",
      get$iterator: function(_) {
        return H.setRuntimeTypeInfo(new H.ListIterator(this, this.get$length(this), 0, null), [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
      },
      forEach$1: function(_, action) {
        var $length, i;
        $length = this.get$length(this);
        if (typeof $length !== "number")
          return H.iae($length);
        i = 0;
        for (; i < $length; ++i) {
          action.call$1(this.elementAt$1(0, i));
          if ($length !== this.get$length(this))
            throw H.wrapException(new P.ConcurrentModificationError(this));
        }
      },
      get$isEmpty: function(_) {
        return J.$eq$(this.get$length(this), 0);
      },
      get$first: function(_) {
        if (J.$eq$(this.get$length(this), 0))
          throw H.wrapException(H.IterableElementError_noElement());
        return this.elementAt$1(0, 0);
      },
      get$last: function(_) {
        if (J.$eq$(this.get$length(this), 0))
          throw H.wrapException(H.IterableElementError_noElement());
        return this.elementAt$1(0, J.$sub$n(this.get$length(this), 1));
      },
      contains$1: function(_, element) {
        var $length, i;
        $length = this.get$length(this);
        if (typeof $length !== "number")
          return H.iae($length);
        i = 0;
        for (; i < $length; ++i) {
          if (J.$eq$(this.elementAt$1(0, i), element))
            return true;
          if ($length !== this.get$length(this))
            throw H.wrapException(new P.ConcurrentModificationError(this));
        }
        return false;
      },
      firstWhere$2$orElse: function(_, test, orElse) {
        var $length, i, element;
        $length = this.get$length(this);
        if (typeof $length !== "number")
          return H.iae($length);
        i = 0;
        for (; i < $length; ++i) {
          element = this.elementAt$1(0, i);
          if (test.call$1(element) === true)
            return element;
          if ($length !== this.get$length(this))
            throw H.wrapException(new P.ConcurrentModificationError(this));
        }
        return orElse.call$0();
      },
      singleWhere$1: function(_, test) {
        var $length, match, matchFound, i, element;
        $length = this.get$length(this);
        if (typeof $length !== "number")
          return H.iae($length);
        match = null;
        matchFound = false;
        i = 0;
        for (; i < $length; ++i) {
          element = this.elementAt$1(0, i);
          if (test.call$1(element) === true) {
            if (matchFound)
              throw H.wrapException(H.IterableElementError_tooMany());
            match = element;
            matchFound = true;
          }
          if ($length !== this.get$length(this))
            throw H.wrapException(new P.ConcurrentModificationError(this));
        }
        if (matchFound)
          return match;
        throw H.wrapException(H.IterableElementError_noElement());
      },
      where$1: function(_, test) {
        return this.super$Iterable$where(this, test);
      },
      map$1: function(_, f) {
        return H.setRuntimeTypeInfo(new H.MappedListIterable(this, f), [H.getRuntimeTypeArgument(this, "ListIterable", 0), null]);
      },
      toList$1$growable: function(_, growable) {
        var result, i, t1;
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
        C.JSArray_methods.set$length(result, this.get$length(this));
        i = 0;
        while (true) {
          t1 = this.get$length(this);
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(i < t1))
            break;
          t1 = this.elementAt$1(0, i);
          if (i >= result.length)
            return H.ioore(result, i);
          result[i] = t1;
          ++i;
        }
        return result;
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      $isEfficientLength: 1
    },
    SubListIterable: {
      "^": "ListIterable;_iterable,__internal$_start,_endOrLength",
      get$_endIndex: function() {
        var $length, t1;
        $length = J.get$length$asx(this._iterable);
        t1 = this._endOrLength;
        if (t1 == null || J.$gt$n(t1, $length))
          return $length;
        return t1;
      },
      get$_startIndex: function() {
        var $length, t1;
        $length = J.get$length$asx(this._iterable);
        t1 = this.__internal$_start;
        if (J.$gt$n(t1, $length))
          return $length;
        return t1;
      },
      get$length: function(_) {
        var $length, t1, t2;
        $length = J.get$length$asx(this._iterable);
        t1 = this.__internal$_start;
        if (J.$ge$n(t1, $length))
          return 0;
        t2 = this._endOrLength;
        if (t2 == null || J.$ge$n(t2, $length))
          return J.$sub$n($length, t1);
        return J.$sub$n(t2, t1);
      },
      elementAt$1: function(_, index) {
        var realIndex = J.$add$ns(this.get$_startIndex(), index);
        if (J.$lt$n(index, 0) || J.$ge$n(realIndex, this.get$_endIndex()))
          throw H.wrapException(P.IndexError$(index, this, "index", null, null));
        return J.elementAt$1$ax(this._iterable, realIndex);
      },
      take$1: function(_, count) {
        var t1, t2, newEnd;
        if (J.$lt$n(count, 0))
          H.throwExpression(P.RangeError$range(count, 0, null, "count", null));
        t1 = this._endOrLength;
        t2 = this.__internal$_start;
        if (t1 == null)
          return H.SubListIterable$(this._iterable, t2, J.$add$ns(t2, count), H.getTypeArgumentByIndex(this, 0));
        else {
          newEnd = J.$add$ns(t2, count);
          if (J.$lt$n(t1, newEnd))
            return this;
          return H.SubListIterable$(this._iterable, t2, newEnd, H.getTypeArgumentByIndex(this, 0));
        }
      },
      toList$1$growable: function(_, growable) {
        var start, t1, t2, end, end0, $length, result, t3, i, t4;
        start = this.__internal$_start;
        t1 = this._iterable;
        t2 = J.getInterceptor$asx(t1);
        end = t2.get$length(t1);
        end0 = this._endOrLength;
        if (end0 != null && J.$lt$n(end0, end))
          end = end0;
        $length = J.$sub$n(end, start);
        if (J.$lt$n($length, 0))
          $length = 0;
        if (growable) {
          result = H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(this, 0)]);
          C.JSArray_methods.set$length(result, $length);
        } else {
          if (typeof $length !== "number")
            return H.iae($length);
          t3 = new Array($length);
          t3.fixed$length = Array;
          result = H.setRuntimeTypeInfo(t3, [H.getTypeArgumentByIndex(this, 0)]);
        }
        if (typeof $length !== "number")
          return H.iae($length);
        t3 = J.getInterceptor$ns(start);
        i = 0;
        for (; i < $length; ++i) {
          t4 = t2.elementAt$1(t1, t3.$add(start, i));
          if (i >= result.length)
            return H.ioore(result, i);
          result[i] = t4;
          if (J.$lt$n(t2.get$length(t1), end))
            throw H.wrapException(new P.ConcurrentModificationError(this));
        }
        return result;
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      SubListIterable$3: function(_iterable, _start, _endOrLength, $E) {
        var t1, t2, t3;
        t1 = this.__internal$_start;
        t2 = J.getInterceptor$n(t1);
        if (t2.$lt(t1, 0))
          H.throwExpression(P.RangeError$range(t1, 0, null, "start", null));
        t3 = this._endOrLength;
        if (t3 != null) {
          if (J.$lt$n(t3, 0))
            H.throwExpression(P.RangeError$range(t3, 0, null, "end", null));
          if (t2.$gt(t1, t3))
            throw H.wrapException(P.RangeError$range(t1, 0, t3, "start", null));
        }
      },
      static: {
        SubListIterable$: function(_iterable, _start, _endOrLength, $E) {
          var t1 = H.setRuntimeTypeInfo(new H.SubListIterable(_iterable, _start, _endOrLength), [$E]);
          t1.SubListIterable$3(_iterable, _start, _endOrLength, $E);
          return t1;
        }
      }
    },
    ListIterator: {
      "^": "Object;_iterable,__internal$_length,_index,__internal$_current",
      get$current: function() {
        return this.__internal$_current;
      },
      moveNext$0: function() {
        var t1, t2, $length, t3;
        t1 = this._iterable;
        t2 = J.getInterceptor$asx(t1);
        $length = t2.get$length(t1);
        if (!J.$eq$(this.__internal$_length, $length))
          throw H.wrapException(new P.ConcurrentModificationError(t1));
        t3 = this._index;
        if (typeof $length !== "number")
          return H.iae($length);
        if (t3 >= $length) {
          this.__internal$_current = null;
          return false;
        }
        this.__internal$_current = t2.elementAt$1(t1, t3);
        ++this._index;
        return true;
      }
    },
    MappedIterable: {
      "^": "Iterable;_iterable,_f",
      get$iterator: function(_) {
        var t1 = new H.MappedIterator(null, J.get$iterator$ax(this._iterable), this._f);
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        return t1;
      },
      get$length: function(_) {
        return J.get$length$asx(this._iterable);
      },
      get$isEmpty: function(_) {
        return J.get$isEmpty$asx(this._iterable);
      },
      get$last: function(_) {
        return this._f.call$1(J.get$last$ax(this._iterable));
      },
      elementAt$1: function(_, index) {
        return this._f.call$1(J.elementAt$1$ax(this._iterable, index));
      },
      $asIterable: function($S, $T) {
        return [$T];
      },
      static: {
        MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
          if (!!J.getInterceptor(iterable).$isEfficientLength)
            return H.setRuntimeTypeInfo(new H.EfficientLengthMappedIterable(iterable, $function), [$S, $T]);
          return H.setRuntimeTypeInfo(new H.MappedIterable(iterable, $function), [$S, $T]);
        }
      }
    },
    EfficientLengthMappedIterable: {
      "^": "MappedIterable;_iterable,_f",
      $isEfficientLength: 1
    },
    MappedIterator: {
      "^": "Iterator;__internal$_current,_iterator,_f",
      moveNext$0: function() {
        var t1 = this._iterator;
        if (t1.moveNext$0()) {
          this.__internal$_current = this._f.call$1(t1.get$current());
          return true;
        }
        this.__internal$_current = null;
        return false;
      },
      get$current: function() {
        return this.__internal$_current;
      },
      $asIterator: function($S, $T) {
        return [$T];
      }
    },
    MappedListIterable: {
      "^": "ListIterable;_source,_f",
      get$length: function(_) {
        return J.get$length$asx(this._source);
      },
      elementAt$1: function(_, index) {
        return this._f.call$1(J.elementAt$1$ax(this._source, index));
      },
      $asListIterable: function($S, $T) {
        return [$T];
      },
      $asIterable: function($S, $T) {
        return [$T];
      },
      $isEfficientLength: 1
    },
    WhereIterable: {
      "^": "Iterable;_iterable,_f",
      get$iterator: function(_) {
        var t1 = new H.WhereIterator(J.get$iterator$ax(this._iterable), this._f);
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        return t1;
      }
    },
    WhereIterator: {
      "^": "Iterator;_iterator,_f",
      moveNext$0: function() {
        var t1, t2;
        for (t1 = this._iterator, t2 = this._f; t1.moveNext$0();)
          if (t2.call$1(t1.get$current()) === true)
            return true;
        return false;
      },
      get$current: function() {
        return this._iterator.get$current();
      }
    },
    TakeIterable: {
      "^": "Iterable;_iterable,_takeCount",
      get$iterator: function(_) {
        var t1 = new H.TakeIterator(J.get$iterator$ax(this._iterable), this._takeCount);
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        return t1;
      },
      static: {
        TakeIterable_TakeIterable: function(iterable, takeCount, $E) {
          if (typeof takeCount !== "number" || Math.floor(takeCount) !== takeCount || takeCount < 0)
            throw H.wrapException(P.ArgumentError$(takeCount));
          if (!!J.getInterceptor(iterable).$isEfficientLength)
            return H.setRuntimeTypeInfo(new H.EfficientLengthTakeIterable(iterable, takeCount), [$E]);
          return H.setRuntimeTypeInfo(new H.TakeIterable(iterable, takeCount), [$E]);
        }
      }
    },
    EfficientLengthTakeIterable: {
      "^": "TakeIterable;_iterable,_takeCount",
      get$length: function(_) {
        var iterableLength, t1;
        iterableLength = J.get$length$asx(this._iterable);
        t1 = this._takeCount;
        if (J.$gt$n(iterableLength, t1))
          return t1;
        return iterableLength;
      },
      $isEfficientLength: 1
    },
    TakeIterator: {
      "^": "Iterator;_iterator,_remaining",
      moveNext$0: function() {
        var t1 = J.$sub$n(this._remaining, 1);
        this._remaining = t1;
        if (J.$ge$n(t1, 0))
          return this._iterator.moveNext$0();
        this._remaining = -1;
        return false;
      },
      get$current: function() {
        if (J.$lt$n(this._remaining, 0))
          return;
        return this._iterator.get$current();
      }
    },
    SkipIterable: {
      "^": "Iterable;_iterable,_skipCount",
      get$iterator: function(_) {
        var t1 = new H.SkipIterator(J.get$iterator$ax(this._iterable), this._skipCount);
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        return t1;
      },
      SkipIterable$_$2: function(_iterable, _skipCount, $E) {
        var t1 = this._skipCount;
        if (typeof t1 !== "number" || Math.floor(t1) !== t1)
          throw H.wrapException(P.ArgumentError$value(t1, "count is not an integer", null));
        if (J.$lt$n(t1, 0))
          H.throwExpression(P.RangeError$range(t1, 0, null, "count", null));
      },
      static: {
        SkipIterable_SkipIterable: function(iterable, count, $E) {
          var t1;
          if (!!J.getInterceptor(iterable).$isEfficientLength) {
            t1 = H.setRuntimeTypeInfo(new H.EfficientLengthSkipIterable(iterable, count), [$E]);
            t1.SkipIterable$_$2(iterable, count, $E);
            return t1;
          }
          return H.SkipIterable$_(iterable, count, $E);
        },
        SkipIterable$_: function(_iterable, _skipCount, $E) {
          var t1 = H.setRuntimeTypeInfo(new H.SkipIterable(_iterable, _skipCount), [$E]);
          t1.SkipIterable$_$2(_iterable, _skipCount, $E);
          return t1;
        }
      }
    },
    EfficientLengthSkipIterable: {
      "^": "SkipIterable;_iterable,_skipCount",
      get$length: function(_) {
        var $length = J.$sub$n(J.get$length$asx(this._iterable), this._skipCount);
        if (J.$ge$n($length, 0))
          return $length;
        return 0;
      },
      $isEfficientLength: 1
    },
    SkipIterator: {
      "^": "Iterator;_iterator,_skipCount",
      moveNext$0: function() {
        var t1, i, t2;
        t1 = this._iterator;
        i = 0;
        while (true) {
          t2 = this._skipCount;
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(i < t2))
            break;
          t1.moveNext$0();
          ++i;
        }
        this._skipCount = 0;
        return t1.moveNext$0();
      },
      get$current: function() {
        return this._iterator.get$current();
      }
    },
    FixedLengthListMixin: {
      "^": "Object;",
      set$length: function(receiver, newLength) {
        throw H.wrapException(new P.UnsupportedError("Cannot change the length of a fixed-length list"));
      },
      add$1: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot add to a fixed-length list"));
      },
      addAll$1: function(receiver, iterable) {
        throw H.wrapException(new P.UnsupportedError("Cannot add to a fixed-length list"));
      },
      remove$1: function(receiver, element) {
        throw H.wrapException(new P.UnsupportedError("Cannot remove from a fixed-length list"));
      },
      removeWhere$1: function(receiver, test) {
        throw H.wrapException(new P.UnsupportedError("Cannot remove from a fixed-length list"));
      },
      clear$0: function(receiver) {
        throw H.wrapException(new P.UnsupportedError("Cannot clear a fixed-length list"));
      },
      replaceRange$3: function(receiver, start, end, iterable) {
        throw H.wrapException(new P.UnsupportedError("Cannot remove from a fixed-length list"));
      }
    },
    UnmodifiableListMixin: {
      "^": "Object;",
      $indexSet: function(_, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot modify an unmodifiable list"));
      },
      set$length: function(_, newLength) {
        throw H.wrapException(new P.UnsupportedError("Cannot change the length of an unmodifiable list"));
      },
      add$1: function(_, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot add to an unmodifiable list"));
      },
      addAll$1: function(_, iterable) {
        throw H.wrapException(new P.UnsupportedError("Cannot add to an unmodifiable list"));
      },
      remove$1: function(_, element) {
        throw H.wrapException(new P.UnsupportedError("Cannot remove from an unmodifiable list"));
      },
      removeWhere$1: function(_, test) {
        throw H.wrapException(new P.UnsupportedError("Cannot remove from an unmodifiable list"));
      },
      clear$0: function(_) {
        throw H.wrapException(new P.UnsupportedError("Cannot clear an unmodifiable list"));
      },
      setRange$4: function(_, start, end, iterable, skipCount) {
        throw H.wrapException(new P.UnsupportedError("Cannot modify an unmodifiable list"));
      },
      setRange$3: function($receiver, start, end, iterable) {
        return this.setRange$4($receiver, start, end, iterable, 0);
      },
      replaceRange$3: function(_, start, end, iterable) {
        throw H.wrapException(new P.UnsupportedError("Cannot remove from an unmodifiable list"));
      },
      fillRange$3: function(_, start, end, fillValue) {
        throw H.wrapException(new P.UnsupportedError("Cannot modify an unmodifiable list"));
      },
      $isList: 1,
      $asList: null,
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    UnmodifiableListBase: {
      "^": "ListBase+UnmodifiableListMixin;",
      $isList: 1,
      $asList: null,
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    Symbol0: {
      "^": "Object;__internal$_name<",
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof H.Symbol0 && J.$eq$(this.__internal$_name, other.__internal$_name);
      },
      get$hashCode: function(_) {
        var hash, t1;
        hash = this._hashCode;
        if (hash != null)
          return hash;
        t1 = J.get$hashCode$(this.__internal$_name);
        if (typeof t1 !== "number")
          return H.iae(t1);
        hash = 536870911 & 664597 * t1;
        this._hashCode = hash;
        return hash;
      },
      toString$0: function(_) {
        return 'Symbol("' + H.S(this.__internal$_name) + '")';
      },
      $isSymbol: 1
    }
  }], ["_isolate_helper", "dart:_isolate_helper",, H, {
    "^": "",
    _callInIsolate: function(isolate, $function) {
      var result = isolate.eval$1($function);
      if (!init.globalState.currentContext._isExecutingEvent)
        init.globalState.topEventLoop.run$0(0);
      return result;
    },
    startRootIsolate: function(entry, args) {
      var t1, t2, t3, t4, t5, rootContext;
      t1 = {};
      t1.args = args;
      if (args == null) {
        args = [];
        t1.args = args;
        t2 = args;
      } else
        t2 = args;
      if (!J.getInterceptor(t2).$isList)
        throw H.wrapException(P.ArgumentError$("Arguments to main must be a List: " + H.S(t2)));
      init.globalState = new H._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
      t2 = init.globalState;
      t3 = self.window == null;
      t4 = self.Worker;
      t5 = t3 && !!self.postMessage;
      t2.isWorker = t5;
      t5 = !t5;
      if (t5)
        t4 = t4 != null && $.$get$IsolateNatives_thisScript() != null;
      else
        t4 = true;
      t2.supportsWorkers = t4;
      t2.fromCommandLine = t3 && t5;
      t2.topEventLoop = new H._EventLoop(P.ListQueue$(null, H._IsolateEvent), 0);
      t2.isolates = H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [P.$int, H._IsolateContext]);
      t2.managers = H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [P.$int, null]);
      if (t2.isWorker === true) {
        t3 = new H._MainManagerStub();
        t2.mainManager = t3;
        self.onmessage = function(f, a) {
          return function(e) {
            f(a, e);
          };
        }(H.IsolateNatives__processWorkerMessage, t3);
        self.dartPrint = self.dartPrint || function(serialize) {
          return function(object) {
            if (self.console && self.console.log)
              self.console.log(object);
            else
              self.postMessage(serialize(object));
          };
        }(H._Manager__serializePrintMessage);
      }
      if (init.globalState.isWorker === true)
        return;
      t2 = init.globalState.nextIsolateId++;
      t3 = H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [P.$int, H.RawReceivePortImpl]);
      t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, P.$int);
      t5 = new H.RawReceivePortImpl(0, null, false);
      rootContext = new H._IsolateContext(t2, t3, t4, init.createNewIsolate(), t5, new H.CapabilityImpl(H.random64()), new H.CapabilityImpl(H.random64()), false, false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, null, false, true, P.LinkedHashSet_LinkedHashSet(null, null, null, null));
      t4.add$1(0, 0);
      rootContext._addRegistration$2(0, t5);
      init.globalState.rootContext = rootContext;
      init.globalState.currentContext = rootContext;
      t2 = H.getDynamicRuntimeType();
      t3 = H.buildFunctionType(t2, [t2])._isTest$1(entry);
      if (t3)
        rootContext.eval$1(new H.startRootIsolate_closure(t1, entry));
      else {
        t2 = H.buildFunctionType(t2, [t2, t2])._isTest$1(entry);
        if (t2)
          rootContext.eval$1(new H.startRootIsolate_closure0(t1, entry));
        else
          rootContext.eval$1(entry);
      }
      init.globalState.topEventLoop.run$0(0);
    },
    _globalState: function() {
      return init.globalState;
    },
    IsolateNatives_computeThisScript: function() {
      var currentScript = init.currentScript;
      if (currentScript != null)
        return String(currentScript.src);
      if (init.globalState.isWorker === true)
        return H.IsolateNatives_computeThisScriptFromTrace();
      return;
    },
    IsolateNatives_computeThisScriptFromTrace: function() {
      var stack, matches;
      stack = new Error().stack;
      if (stack == null) {
        stack = function() {
          try {
            throw new Error();
          } catch (e) {
            return e.stack;
          }
        }();
        if (stack == null)
          throw H.wrapException(new P.UnsupportedError("No stack trace"));
      }
      matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
      if (matches != null)
        return matches[1];
      matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
      if (matches != null)
        return matches[1];
      throw H.wrapException(new P.UnsupportedError('Cannot extract URI from "' + H.S(stack) + '"'));
    },
    IsolateNatives__processWorkerMessage: [function(sender, e) {
      var msg, t1, functionName, entryPoint, args, message, isSpawnUri, startPaused, replyTo, t2, t3, t4, context;
      msg = new H._Deserializer(true, []).deserialize$1(e.data);
      t1 = J.getInterceptor$asx(msg);
      switch (t1.$index(msg, "command")) {
        case "start":
          init.globalState.currentManagerId = t1.$index(msg, "id");
          functionName = t1.$index(msg, "functionName");
          entryPoint = functionName == null ? init.globalState.entry : init.globalFunctions[functionName]();
          args = t1.$index(msg, "args");
          message = new H._Deserializer(true, []).deserialize$1(t1.$index(msg, "msg"));
          isSpawnUri = t1.$index(msg, "isSpawnUri");
          startPaused = t1.$index(msg, "startPaused");
          replyTo = new H._Deserializer(true, []).deserialize$1(t1.$index(msg, "replyTo"));
          t1 = init.globalState.nextIsolateId++;
          t2 = H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [P.$int, H.RawReceivePortImpl]);
          t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, P.$int);
          t4 = new H.RawReceivePortImpl(0, null, false);
          context = new H._IsolateContext(t1, t2, t3, init.createNewIsolate(), t4, new H.CapabilityImpl(H.random64()), new H.CapabilityImpl(H.random64()), false, false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, null, false, true, P.LinkedHashSet_LinkedHashSet(null, null, null, null));
          t3.add$1(0, 0);
          context._addRegistration$2(0, t4);
          init.globalState.topEventLoop.events._add$1(0, new H._IsolateEvent(context, new H.IsolateNatives__processWorkerMessage_closure(entryPoint, args, message, isSpawnUri, startPaused, replyTo), "worker-start"));
          init.globalState.currentContext = context;
          init.globalState.topEventLoop.run$0(0);
          break;
        case "spawn-worker":
          break;
        case "message":
          if (t1.$index(msg, "port") != null)
            J.send$1$x(t1.$index(msg, "port"), t1.$index(msg, "msg"));
          init.globalState.topEventLoop.run$0(0);
          break;
        case "close":
          init.globalState.managers.remove$1(0, $.$get$IsolateNatives_workerIds().$index(0, sender));
          sender.terminate();
          init.globalState.topEventLoop.run$0(0);
          break;
        case "log":
          H.IsolateNatives__log(t1.$index(msg, "msg"));
          break;
        case "print":
          if (init.globalState.isWorker === true) {
            t1 = init.globalState.mainManager;
            t2 = P.LinkedHashMap__makeLiteral(["command", "print", "msg", msg]);
            t2 = new H._Serializer(true, P._LinkedIdentityHashMap__LinkedIdentityHashMap$es6(null, P.$int)).serialize$1(t2);
            t1.toString;
            self.postMessage(t2);
          } else
            P.print(t1.$index(msg, "msg"));
          break;
        case "error":
          throw H.wrapException(t1.$index(msg, "msg"));
      }
    }, null, null, 4, 0, null, 38, [], 0, []],
    IsolateNatives__log: function(msg) {
      var trace, t1, t2, exception;
      if (init.globalState.isWorker === true) {
        t1 = init.globalState.mainManager;
        t2 = P.LinkedHashMap__makeLiteral(["command", "log", "msg", msg]);
        t2 = new H._Serializer(true, P._LinkedIdentityHashMap__LinkedIdentityHashMap$es6(null, P.$int)).serialize$1(t2);
        t1.toString;
        self.postMessage(t2);
      } else
        try {
          self.console.log(msg);
        } catch (exception) {
          H.unwrapException(exception);
          trace = H.getTraceFromException(exception);
          throw H.wrapException(P.Exception_Exception(trace));
        }
    },
    IsolateNatives__startIsolate: function(topLevel, args, message, isSpawnUri, startPaused, replyTo) {
      var context, t1, t2, t3;
      context = init.globalState.currentContext;
      t1 = context.id;
      $.Primitives_mirrorFunctionCacheName = $.Primitives_mirrorFunctionCacheName + ("_" + t1);
      $.Primitives_mirrorInvokeCacheName = $.Primitives_mirrorInvokeCacheName + ("_" + t1);
      t1 = context.controlPort;
      t2 = init.globalState.currentContext.id;
      t3 = context.pauseCapability;
      J.send$1$x(replyTo, ["spawned", new H._NativeJsSendPort(t1, t2), t3, context.terminateCapability]);
      t2 = new H.IsolateNatives__startIsolate_runStartFunction(topLevel, args, message, isSpawnUri, context);
      if (startPaused === true) {
        context.addPause$2(t3, t3);
        init.globalState.topEventLoop.events._add$1(0, new H._IsolateEvent(context, t2, "start isolate"));
      } else
        t2.call$0();
    },
    _clone: function(message) {
      return new H._Deserializer(true, []).deserialize$1(new H._Serializer(false, P._LinkedIdentityHashMap__LinkedIdentityHashMap$es6(null, P.$int)).serialize$1(message));
    },
    startRootIsolate_closure: {
      "^": "Closure:4;_box_0,entry",
      call$0: function() {
        this.entry.call$1(this._box_0.args);
      }
    },
    startRootIsolate_closure0: {
      "^": "Closure:4;_box_0,entry",
      call$0: function() {
        this.entry.call$2(this._box_0.args, null);
      }
    },
    _Manager: {
      "^": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
      static: {
        _Manager__serializePrintMessage: [function(object) {
          var t1 = P.LinkedHashMap__makeLiteral(["command", "print", "msg", object]);
          return new H._Serializer(true, P._LinkedIdentityHashMap__LinkedIdentityHashMap$es6(null, P.$int)).serialize$1(t1);
        }, null, null, 2, 0, null, 14, []]
      }
    },
    _IsolateContext: {
      "^": "Object;id>,ports,weakPorts,isolateStatics<,controlPort<,pauseCapability,terminateCapability,initialized?,isPaused<,delayedEvents<,pauseTokens,doneHandlers,_scheduledControlEvents,_isExecutingEvent,errorsAreFatal,errorPorts",
      addPause$2: function(authentification, resume) {
        if (!this.pauseCapability.$eq(0, authentification))
          return;
        if (this.pauseTokens.add$1(0, resume) && !this.isPaused)
          this.isPaused = true;
        this._updateGlobalState$0();
      },
      removePause$1: function(resume) {
        var t1, t2, $event, t3, t4, t5;
        if (!this.isPaused)
          return;
        t1 = this.pauseTokens;
        t1.remove$1(0, resume);
        if (t1._collection$_length === 0) {
          for (t1 = this.delayedEvents; t2 = t1.length, t2 !== 0;) {
            if (0 >= t2)
              return H.ioore(t1, -1);
            $event = t1.pop();
            t2 = init.globalState.topEventLoop.events;
            t3 = t2._head;
            t4 = t2._collection$_table;
            t5 = t4.length;
            t3 = (t3 - 1 & t5 - 1) >>> 0;
            t2._head = t3;
            if (t3 < 0 || t3 >= t5)
              return H.ioore(t4, t3);
            t4[t3] = $event;
            if (t3 === t2._tail)
              t2._grow$0();
            ++t2._modificationCount;
          }
          this.isPaused = false;
        }
        this._updateGlobalState$0();
      },
      addDoneListener$2: function(responsePort, response) {
        var t1, i, t2;
        if (this.doneHandlers == null)
          this.doneHandlers = [];
        for (t1 = J.getInterceptor(responsePort), i = 0; t2 = this.doneHandlers, i < t2.length; i += 2)
          if (t1.$eq(responsePort, t2[i])) {
            t1 = this.doneHandlers;
            t2 = i + 1;
            if (t2 >= t1.length)
              return H.ioore(t1, t2);
            t1[t2] = response;
            return;
          }
        t2.push(responsePort);
        this.doneHandlers.push(response);
      },
      removeDoneListener$1: function(responsePort) {
        var t1, i, t2;
        if (this.doneHandlers == null)
          return;
        for (t1 = J.getInterceptor(responsePort), i = 0; t2 = this.doneHandlers, i < t2.length; i += 2)
          if (t1.$eq(responsePort, t2[i])) {
            t1 = this.doneHandlers;
            t2 = i + 2;
            t1.toString;
            if (typeof t1 !== "object" || t1 === null || !!t1.fixed$length)
              H.throwExpression(new P.UnsupportedError("removeRange"));
            P.RangeError_checkValidRange(i, t2, t1.length, null, null, null);
            t1.splice(i, t2 - i);
            return;
          }
      },
      setErrorsFatal$2: function(authentification, errorsAreFatal) {
        if (!this.terminateCapability.$eq(0, authentification))
          return;
        this.errorsAreFatal = errorsAreFatal;
      },
      handlePing$3: function(responsePort, pingType, response) {
        var t1 = J.getInterceptor(pingType);
        if (!t1.$eq(pingType, 0))
          t1 = t1.$eq(pingType, 1) && !this._isExecutingEvent;
        else
          t1 = true;
        if (t1) {
          J.send$1$x(responsePort, response);
          return;
        }
        t1 = this._scheduledControlEvents;
        if (t1 == null) {
          t1 = P.ListQueue$(null, null);
          this._scheduledControlEvents = t1;
        }
        t1._add$1(0, new H._IsolateContext_handlePing_respond(responsePort, response));
      },
      handleKill$2: function(authentification, priority) {
        var t1;
        if (!this.terminateCapability.$eq(0, authentification))
          return;
        t1 = J.getInterceptor(priority);
        if (!t1.$eq(priority, 0))
          t1 = t1.$eq(priority, 1) && !this._isExecutingEvent;
        else
          t1 = true;
        if (t1) {
          this.kill$0();
          return;
        }
        t1 = this._scheduledControlEvents;
        if (t1 == null) {
          t1 = P.ListQueue$(null, null);
          this._scheduledControlEvents = t1;
        }
        t1._add$1(0, this.get$kill());
      },
      handleUncaughtError$2: function(error, stackTrace) {
        var t1, message;
        t1 = this.errorPorts;
        if (t1._collection$_length === 0) {
          if (this.errorsAreFatal === true && this === init.globalState.rootContext)
            return;
          if (self.console && self.console.error)
            self.console.error(error, stackTrace);
          else {
            P.print(error);
            if (stackTrace != null)
              P.print(stackTrace);
          }
          return;
        }
        message = new Array(2);
        message.fixed$length = Array;
        message[0] = J.toString$0$(error);
        message[1] = stackTrace == null ? null : J.toString$0$(stackTrace);
        for (t1 = H.setRuntimeTypeInfo(new P._LinkedHashSetIterator(t1, t1._collection$_modifications, null, null), [null]), t1._cell = t1._set._collection$_first; t1.moveNext$0();)
          J.send$1$x(t1._collection$_current, message);
      },
      eval$1: function(code) {
        var old, result, oldIsExecutingEvent, e, s, exception, t1;
        old = init.globalState.currentContext;
        init.globalState.currentContext = this;
        $ = this.isolateStatics;
        result = null;
        oldIsExecutingEvent = this._isExecutingEvent;
        this._isExecutingEvent = true;
        try {
          result = code.call$0();
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          this.handleUncaughtError$2(e, s);
          if (this.errorsAreFatal === true) {
            this.kill$0();
            if (this === init.globalState.rootContext)
              throw exception;
          }
        } finally {
          this._isExecutingEvent = oldIsExecutingEvent;
          init.globalState.currentContext = old;
          if (old != null)
            $ = old.get$isolateStatics();
          if (this._scheduledControlEvents != null)
            for (; t1 = this._scheduledControlEvents, !t1.get$isEmpty(t1);)
              this._scheduledControlEvents.removeFirst$0().call$0();
        }
        return result;
      },
      handleControlMessage$1: function(message) {
        var t1 = J.getInterceptor$asx(message);
        switch (t1.$index(message, 0)) {
          case "pause":
            this.addPause$2(t1.$index(message, 1), t1.$index(message, 2));
            break;
          case "resume":
            this.removePause$1(t1.$index(message, 1));
            break;
          case "add-ondone":
            this.addDoneListener$2(t1.$index(message, 1), t1.$index(message, 2));
            break;
          case "remove-ondone":
            this.removeDoneListener$1(t1.$index(message, 1));
            break;
          case "set-errors-fatal":
            this.setErrorsFatal$2(t1.$index(message, 1), t1.$index(message, 2));
            break;
          case "ping":
            this.handlePing$3(t1.$index(message, 1), t1.$index(message, 2), t1.$index(message, 3));
            break;
          case "kill":
            this.handleKill$2(t1.$index(message, 1), t1.$index(message, 2));
            break;
          case "getErrors":
            this.errorPorts.add$1(0, t1.$index(message, 1));
            break;
          case "stopErrors":
            this.errorPorts.remove$1(0, t1.$index(message, 1));
            break;
        }
      },
      lookup$1: function(portId) {
        return this.ports.$index(0, portId);
      },
      _addRegistration$2: function(portId, port) {
        var t1 = this.ports;
        if (t1.containsKey$1(0, portId))
          throw H.wrapException(P.Exception_Exception("Registry: ports must be registered only once."));
        t1.$indexSet(0, portId, port);
      },
      _updateGlobalState$0: function() {
        var t1 = this.ports;
        if (t1.get$length(t1) - this.weakPorts._collection$_length > 0 || this.isPaused || !this.initialized)
          init.globalState.isolates.$indexSet(0, this.id, this);
        else
          this.kill$0();
      },
      kill$0: [function() {
        var t1, t2, i, responsePort, t3;
        t1 = this._scheduledControlEvents;
        if (t1 != null)
          t1.clear$0(0);
        for (t1 = this.ports, t2 = t1.get$values(t1), t2 = t2.get$iterator(t2); t2.moveNext$0();)
          t2.get$current().__isolate_helper$_close$0();
        t1.clear$0(0);
        this.weakPorts.clear$0(0);
        init.globalState.isolates.remove$1(0, this.id);
        this.errorPorts.clear$0(0);
        if (this.doneHandlers != null) {
          for (i = 0; t1 = this.doneHandlers, t2 = t1.length, i < t2; i += 2) {
            responsePort = t1[i];
            t3 = i + 1;
            if (t3 >= t2)
              return H.ioore(t1, t3);
            J.send$1$x(responsePort, t1[t3]);
          }
          this.doneHandlers = null;
        }
      }, "call$0", "get$kill", 0, 0, 7]
    },
    _IsolateContext_handlePing_respond: {
      "^": "Closure:7;responsePort,response",
      call$0: [function() {
        J.send$1$x(this.responsePort, this.response);
      }, null, null, 0, 0, null, "call"]
    },
    _EventLoop: {
      "^": "Object;events<,_activeJsAsyncCount",
      dequeue$0: function() {
        var t1 = this.events;
        if (t1._head === t1._tail)
          return;
        return t1.removeFirst$0();
      },
      runIteration$0: function() {
        var $event, t1, t2;
        $event = this.dequeue$0();
        if ($event == null) {
          if (init.globalState.rootContext != null)
            if (init.globalState.isolates.containsKey$1(0, init.globalState.rootContext.id))
              if (init.globalState.fromCommandLine === true) {
                t1 = init.globalState.rootContext.ports;
                t1 = t1.get$isEmpty(t1);
              } else
                t1 = false;
            else
              t1 = false;
          else
            t1 = false;
          if (t1)
            H.throwExpression(P.Exception_Exception("Program exited with open ReceivePorts."));
          t1 = init.globalState;
          if (t1.isWorker === true) {
            t2 = t1.isolates;
            t2 = t2.get$isEmpty(t2) && t1.topEventLoop._activeJsAsyncCount === 0;
          } else
            t2 = false;
          if (t2) {
            t1 = t1.mainManager;
            t2 = P.LinkedHashMap__makeLiteral(["command", "close"]);
            t2 = new H._Serializer(true, H.setRuntimeTypeInfo(new P._LinkedIdentityHashMap(0, null, null, null, null, null, 0), [null, P.$int])).serialize$1(t2);
            t1.toString;
            self.postMessage(t2);
          }
          return false;
        }
        $event.process$0();
        return true;
      },
      _runHelper$0: function() {
        if (self.window != null)
          new H._EventLoop__runHelper_next(this).call$0();
        else
          for (; this.runIteration$0();)
            ;
      },
      run$0: function(_) {
        var e, trace, exception, t1, t2;
        if (init.globalState.isWorker !== true)
          this._runHelper$0();
        else
          try {
            this._runHelper$0();
          } catch (exception) {
            t1 = H.unwrapException(exception);
            e = t1;
            trace = H.getTraceFromException(exception);
            t1 = init.globalState.mainManager;
            t2 = P.LinkedHashMap__makeLiteral(["command", "error", "msg", H.S(e) + "\n" + H.S(trace)]);
            t2 = new H._Serializer(true, P._LinkedIdentityHashMap__LinkedIdentityHashMap$es6(null, P.$int)).serialize$1(t2);
            t1.toString;
            self.postMessage(t2);
          }
      }
    },
    _EventLoop__runHelper_next: {
      "^": "Closure:7;$this",
      call$0: function() {
        if (!this.$this.runIteration$0())
          return;
        P.Timer_Timer(C.Duration_0, this);
      }
    },
    _IsolateEvent: {
      "^": "Object;isolate,fn,message",
      process$0: function() {
        var t1 = this.isolate;
        if (t1.get$isPaused()) {
          t1.get$delayedEvents().push(this);
          return;
        }
        t1.eval$1(this.fn);
      }
    },
    _MainManagerStub: {
      "^": "Object;"
    },
    IsolateNatives__processWorkerMessage_closure: {
      "^": "Closure:4;entryPoint,args,message,isSpawnUri,startPaused,replyTo",
      call$0: function() {
        H.IsolateNatives__startIsolate(this.entryPoint, this.args, this.message, this.isSpawnUri, this.startPaused, this.replyTo);
      }
    },
    IsolateNatives__startIsolate_runStartFunction: {
      "^": "Closure:7;topLevel,args,message,isSpawnUri,context",
      call$0: function() {
        var t1, t2, t3, t4;
        t1 = this.context;
        t1.set$initialized(true);
        if (this.isSpawnUri !== true)
          this.topLevel.call$1(this.message);
        else {
          t2 = this.topLevel;
          t3 = H.getDynamicRuntimeType();
          t4 = H.buildFunctionType(t3, [t3, t3])._isTest$1(t2);
          if (t4)
            t2.call$2(this.args, this.message);
          else {
            t3 = H.buildFunctionType(t3, [t3])._isTest$1(t2);
            if (t3)
              t2.call$1(this.args);
            else
              t2.call$0();
          }
        }
        t1._updateGlobalState$0();
      }
    },
    _BaseSendPort: {
      "^": "Object;"
    },
    _NativeJsSendPort: {
      "^": "_BaseSendPort;_receivePort,_isolateId",
      send$1: function(_, message) {
        var isolate, t1, msg;
        isolate = init.globalState.isolates.$index(0, this._isolateId);
        if (isolate == null)
          return;
        t1 = this._receivePort;
        if (t1.get$_isClosed())
          return;
        msg = H._clone(message);
        if (isolate.get$controlPort() === t1) {
          isolate.handleControlMessage$1(msg);
          return;
        }
        init.globalState.topEventLoop.events._add$1(0, new H._IsolateEvent(isolate, new H._NativeJsSendPort_send_closure(this, msg), "receive"));
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof H._NativeJsSendPort && J.$eq$(this._receivePort, other._receivePort);
      },
      get$hashCode: function(_) {
        return this._receivePort.get$_id();
      }
    },
    _NativeJsSendPort_send_closure: {
      "^": "Closure:4;$this,msg",
      call$0: function() {
        var t1 = this.$this._receivePort;
        if (!t1.get$_isClosed())
          J.__isolate_helper$_add$1$x(t1, this.msg);
      }
    },
    _WorkerSendPort: {
      "^": "_BaseSendPort;_workerId,_receivePortId,_isolateId",
      send$1: function(_, message) {
        var t1, workerMessage, manager;
        t1 = P.LinkedHashMap__makeLiteral(["command", "message", "port", this, "msg", message]);
        workerMessage = new H._Serializer(true, P._LinkedIdentityHashMap__LinkedIdentityHashMap$es6(null, P.$int)).serialize$1(t1);
        if (init.globalState.isWorker === true) {
          init.globalState.mainManager.toString;
          self.postMessage(workerMessage);
        } else {
          manager = init.globalState.managers.$index(0, this._workerId);
          if (manager != null)
            manager.postMessage(workerMessage);
        }
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof H._WorkerSendPort && J.$eq$(this._workerId, other._workerId) && J.$eq$(this._isolateId, other._isolateId) && J.$eq$(this._receivePortId, other._receivePortId);
      },
      get$hashCode: function(_) {
        var t1, t2, t3;
        t1 = J.$shl$n(this._workerId, 16);
        t2 = J.$shl$n(this._isolateId, 8);
        t3 = this._receivePortId;
        if (typeof t3 !== "number")
          return H.iae(t3);
        return (t1 ^ t2 ^ t3) >>> 0;
      }
    },
    RawReceivePortImpl: {
      "^": "Object;_id<,_handler,_isClosed<",
      __isolate_helper$_close$0: function() {
        this._isClosed = true;
        this._handler = null;
      },
      __isolate_helper$_add$1: function(_, dataEvent) {
        if (this._isClosed)
          return;
        this._handler.call$1(dataEvent);
      },
      $isRawReceivePort: 1
    },
    TimerImpl: {
      "^": "Object;_once,_inEventLoop,_handle",
      cancel$0: function(_) {
        var t1;
        if (self.setTimeout != null) {
          if (this._inEventLoop)
            throw H.wrapException(new P.UnsupportedError("Timer in event loop cannot be canceled."));
          t1 = this._handle;
          if (t1 == null)
            return;
          --init.globalState.topEventLoop._activeJsAsyncCount;
          self.clearTimeout(t1);
          this._handle = null;
        } else
          throw H.wrapException(new P.UnsupportedError("Canceling a timer."));
      },
      TimerImpl$2: function(milliseconds, callback) {
        var t1, t2;
        if (milliseconds === 0)
          t1 = self.setTimeout == null || init.globalState.isWorker === true;
        else
          t1 = false;
        if (t1) {
          this._handle = 1;
          t1 = init.globalState.topEventLoop;
          t2 = init.globalState.currentContext;
          t1.events._add$1(0, new H._IsolateEvent(t2, new H.TimerImpl_internalCallback(this, callback), "timer"));
          this._inEventLoop = true;
        } else if (self.setTimeout != null) {
          ++init.globalState.topEventLoop._activeJsAsyncCount;
          this._handle = self.setTimeout(H.convertDartClosureToJS(new H.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
        } else
          throw H.wrapException(new P.UnsupportedError("Timer greater than 0."));
      },
      static: {
        TimerImpl$: function(milliseconds, callback) {
          var t1 = new H.TimerImpl(true, false, null);
          t1.TimerImpl$2(milliseconds, callback);
          return t1;
        }
      }
    },
    TimerImpl_internalCallback: {
      "^": "Closure:7;$this,callback",
      call$0: function() {
        this.$this._handle = null;
        this.callback.call$0();
      }
    },
    TimerImpl_internalCallback0: {
      "^": "Closure:7;$this,callback",
      call$0: [function() {
        this.$this._handle = null;
        --init.globalState.topEventLoop._activeJsAsyncCount;
        this.callback.call$0();
      }, null, null, 0, 0, null, "call"]
    },
    CapabilityImpl: {
      "^": "Object;_id<",
      get$hashCode: function(_) {
        var hash, t1, t2;
        hash = this._id;
        t1 = J.getInterceptor$n(hash);
        t2 = t1.$shr(hash, 0);
        t1 = t1.$tdiv(hash, 4294967296);
        if (typeof t1 !== "number")
          return H.iae(t1);
        hash = t2 ^ t1;
        hash = (~hash >>> 0) + (hash << 15 >>> 0) & 4294967295;
        hash = ((hash ^ hash >>> 12) >>> 0) * 5 & 4294967295;
        hash = ((hash ^ hash >>> 4) >>> 0) * 2057 & 4294967295;
        return (hash ^ hash >>> 16) >>> 0;
      },
      $eq: function(_, other) {
        var t1, t2;
        if (other == null)
          return false;
        if (other === this)
          return true;
        if (other instanceof H.CapabilityImpl) {
          t1 = this._id;
          t2 = other._id;
          return t1 == null ? t2 == null : t1 === t2;
        }
        return false;
      }
    },
    _Serializer: {
      "^": "Object;_serializeSendPorts,serializedObjectIds",
      serialize$1: [function(x) {
        var t1, serializationId, serializeTearOff, t2, $name;
        if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
          return x;
        t1 = this.serializedObjectIds;
        serializationId = t1.$index(0, x);
        if (serializationId != null)
          return ["ref", serializationId];
        t1.$indexSet(0, x, t1.get$length(t1));
        t1 = J.getInterceptor(x);
        if (!!t1.$isNativeByteBuffer)
          return ["buffer", x];
        if (!!t1.$isNativeTypedData)
          return ["typed", x];
        if (!!t1.$isJSIndexable)
          return this.serializeJSIndexable$1(x);
        if (!!t1.$isInternalMap) {
          serializeTearOff = this.get$serialize();
          t2 = t1.get$keys(x);
          t2 = H.MappedIterable_MappedIterable(t2, serializeTearOff, H.getRuntimeTypeArgument(t2, "Iterable", 0), null);
          t2 = P.List_List$from(t2, true, H.getRuntimeTypeArgument(t2, "Iterable", 0));
          t1 = t1.get$values(x);
          t1 = H.MappedIterable_MappedIterable(t1, serializeTearOff, H.getRuntimeTypeArgument(t1, "Iterable", 0), null);
          return ["map", t2, P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "Iterable", 0))];
        }
        if (!!t1.$isJSObject)
          return this.serializeJSObject$1(x);
        if (!!t1.$isInterceptor)
          this.unsupported$1(x);
        if (!!t1.$isRawReceivePort)
          this.unsupported$2(x, "RawReceivePorts can't be transmitted:");
        if (!!t1.$is_NativeJsSendPort)
          return this.serializeJsSendPort$1(x);
        if (!!t1.$is_WorkerSendPort)
          return this.serializeWorkerSendPort$1(x);
        if (!!t1.$isClosure) {
          $name = x.$static_name;
          if ($name == null)
            this.unsupported$2(x, "Closures can't be transmitted:");
          return ["function", $name];
        }
        if (!!t1.$isCapabilityImpl)
          return ["capability", x._id];
        if (!(x instanceof P.Object))
          this.unsupported$1(x);
        return ["dart", init.classIdExtractor(x), this.serializeArrayInPlace$1(init.classFieldsExtractor(x))];
      }, "call$1", "get$serialize", 2, 0, 1, 15, []],
      unsupported$2: function(x, message) {
        throw H.wrapException(new P.UnsupportedError(H.S(message == null ? "Can't transmit:" : message) + " " + H.S(x)));
      },
      unsupported$1: function(x) {
        return this.unsupported$2(x, null);
      },
      serializeJSIndexable$1: function(indexable) {
        var serialized = this.serializeArray$1(indexable);
        if (!!indexable.fixed$length)
          return ["fixed", serialized];
        if (!indexable.fixed$length)
          return ["extendable", serialized];
        if (!indexable.immutable$list)
          return ["mutable", serialized];
        if (indexable.constructor === Array)
          return ["const", serialized];
        this.unsupported$2(indexable, "Can't serialize indexable: ");
      },
      serializeArray$1: function(x) {
        var serialized, i, t1;
        serialized = [];
        C.JSArray_methods.set$length(serialized, x.length);
        for (i = 0; i < x.length; ++i) {
          t1 = this.serialize$1(x[i]);
          if (i >= serialized.length)
            return H.ioore(serialized, i);
          serialized[i] = t1;
        }
        return serialized;
      },
      serializeArrayInPlace$1: function(x) {
        var i;
        for (i = 0; i < x.length; ++i)
          C.JSArray_methods.$indexSet(x, i, this.serialize$1(x[i]));
        return x;
      },
      serializeJSObject$1: function(x) {
        var keys, values, i, t1;
        if (!!x.constructor && x.constructor !== Object)
          this.unsupported$2(x, "Only plain JS Objects are supported:");
        keys = Object.keys(x);
        values = [];
        C.JSArray_methods.set$length(values, keys.length);
        for (i = 0; i < keys.length; ++i) {
          t1 = this.serialize$1(x[keys[i]]);
          if (i >= values.length)
            return H.ioore(values, i);
          values[i] = t1;
        }
        return ["js-object", keys, values];
      },
      serializeWorkerSendPort$1: function(x) {
        if (this._serializeSendPorts)
          return ["sendport", x._workerId, x._isolateId, x._receivePortId];
        return ["raw sendport", x];
      },
      serializeJsSendPort$1: function(x) {
        if (this._serializeSendPorts)
          return ["sendport", init.globalState.currentManagerId, x._isolateId, x._receivePort.get$_id()];
        return ["raw sendport", x];
      }
    },
    _Deserializer: {
      "^": "Object;_adjustSendPorts,deserializedObjects",
      deserialize$1: [function(x) {
        var serializationId, t1, result, classId, fields, emptyInstance;
        if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
          return x;
        if (typeof x !== "object" || x === null || x.constructor !== Array)
          throw H.wrapException(P.ArgumentError$("Bad serialized message: " + H.S(x)));
        switch (C.JSArray_methods.get$first(x)) {
          case "ref":
            if (1 >= x.length)
              return H.ioore(x, 1);
            serializationId = x[1];
            t1 = this.deserializedObjects;
            if (serializationId >>> 0 !== serializationId || serializationId >= t1.length)
              return H.ioore(t1, serializationId);
            return t1[serializationId];
          case "buffer":
            if (1 >= x.length)
              return H.ioore(x, 1);
            result = x[1];
            this.deserializedObjects.push(result);
            return result;
          case "typed":
            if (1 >= x.length)
              return H.ioore(x, 1);
            result = x[1];
            this.deserializedObjects.push(result);
            return result;
          case "fixed":
            if (1 >= x.length)
              return H.ioore(x, 1);
            result = x[1];
            this.deserializedObjects.push(result);
            t1 = H.setRuntimeTypeInfo(this.deserializeArrayInPlace$1(result), [null]);
            t1.fixed$length = Array;
            return t1;
          case "extendable":
            if (1 >= x.length)
              return H.ioore(x, 1);
            result = x[1];
            this.deserializedObjects.push(result);
            return H.setRuntimeTypeInfo(this.deserializeArrayInPlace$1(result), [null]);
          case "mutable":
            if (1 >= x.length)
              return H.ioore(x, 1);
            result = x[1];
            this.deserializedObjects.push(result);
            return this.deserializeArrayInPlace$1(result);
          case "const":
            if (1 >= x.length)
              return H.ioore(x, 1);
            result = x[1];
            this.deserializedObjects.push(result);
            t1 = H.setRuntimeTypeInfo(this.deserializeArrayInPlace$1(result), [null]);
            t1.fixed$length = Array;
            return t1;
          case "map":
            return this.deserializeMap$1(x);
          case "sendport":
            return this.deserializeSendPort$1(x);
          case "raw sendport":
            if (1 >= x.length)
              return H.ioore(x, 1);
            result = x[1];
            this.deserializedObjects.push(result);
            return result;
          case "js-object":
            return this.deserializeJSObject$1(x);
          case "function":
            if (1 >= x.length)
              return H.ioore(x, 1);
            result = init.globalFunctions[x[1]]();
            this.deserializedObjects.push(result);
            return result;
          case "capability":
            if (1 >= x.length)
              return H.ioore(x, 1);
            return new H.CapabilityImpl(x[1]);
          case "dart":
            t1 = x.length;
            if (1 >= t1)
              return H.ioore(x, 1);
            classId = x[1];
            if (2 >= t1)
              return H.ioore(x, 2);
            fields = x[2];
            emptyInstance = init.instanceFromClassId(classId);
            this.deserializedObjects.push(emptyInstance);
            this.deserializeArrayInPlace$1(fields);
            return init.initializeEmptyInstance(classId, emptyInstance, fields);
          default:
            throw H.wrapException("couldn't deserialize: " + H.S(x));
        }
      }, "call$1", "get$deserialize", 2, 0, 1, 15, []],
      deserializeArrayInPlace$1: function(x) {
        var t1, i, t2;
        t1 = J.getInterceptor$asx(x);
        i = 0;
        while (true) {
          t2 = t1.get$length(x);
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(i < t2))
            break;
          t1.$indexSet(x, i, this.deserialize$1(t1.$index(x, i)));
          ++i;
        }
        return x;
      },
      deserializeMap$1: function(x) {
        var t1, keys, values, result, t2, i;
        t1 = x.length;
        if (1 >= t1)
          return H.ioore(x, 1);
        keys = x[1];
        if (2 >= t1)
          return H.ioore(x, 2);
        values = x[2];
        result = P.LinkedHashMap__makeEmpty();
        this.deserializedObjects.push(result);
        keys = J.map$1$ax(keys, this.get$deserialize()).toList$0(0);
        for (t1 = J.getInterceptor$asx(keys), t2 = J.getInterceptor$asx(values), i = 0; i < t1.get$length(keys); ++i)
          result.$indexSet(0, t1.$index(keys, i), this.deserialize$1(t2.$index(values, i)));
        return result;
      },
      deserializeSendPort$1: function(x) {
        var t1, managerId, isolateId, receivePortId, isolate, receivePort, result;
        t1 = x.length;
        if (1 >= t1)
          return H.ioore(x, 1);
        managerId = x[1];
        if (2 >= t1)
          return H.ioore(x, 2);
        isolateId = x[2];
        if (3 >= t1)
          return H.ioore(x, 3);
        receivePortId = x[3];
        if (J.$eq$(managerId, init.globalState.currentManagerId)) {
          isolate = init.globalState.isolates.$index(0, isolateId);
          if (isolate == null)
            return;
          receivePort = isolate.lookup$1(receivePortId);
          if (receivePort == null)
            return;
          result = new H._NativeJsSendPort(receivePort, isolateId);
        } else
          result = new H._WorkerSendPort(managerId, receivePortId, isolateId);
        this.deserializedObjects.push(result);
        return result;
      },
      deserializeJSObject$1: function(x) {
        var t1, keys, values, o, t2, i, t3;
        t1 = x.length;
        if (1 >= t1)
          return H.ioore(x, 1);
        keys = x[1];
        if (2 >= t1)
          return H.ioore(x, 2);
        values = x[2];
        o = {};
        this.deserializedObjects.push(o);
        t1 = J.getInterceptor$asx(keys);
        t2 = J.getInterceptor$asx(values);
        i = 0;
        while (true) {
          t3 = t1.get$length(keys);
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (!(i < t3))
            break;
          o[t1.$index(keys, i)] = this.deserialize$1(t2.$index(values, i));
          ++i;
        }
        return o;
      }
    }
  }], ["_js_helper", "dart:_js_helper",, H, {
    "^": "",
    ConstantMap__throwUnmodifiable: function() {
      throw H.wrapException(new P.UnsupportedError("Cannot modify unmodifiable Map"));
    },
    jsConstructorNameToRti: function(constructorName) {
      return init.getTypeFromName(constructorName);
    },
    getType: [function(index) {
      return init.types[index];
    }, null, null, 2, 0, null, 30, []],
    isJsIndexable: function(object, record) {
      var result;
      if (record != null) {
        result = record.x;
        if (result != null)
          return result;
      }
      return !!J.getInterceptor(object).$isJavaScriptIndexingBehavior;
    },
    S: function(value) {
      var res;
      if (typeof value === "string")
        return value;
      if (typeof value === "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      res = J.toString$0$(value);
      if (typeof res !== "string")
        throw H.wrapException(H.argumentErrorValue(value));
      return res;
    },
    throwInvalidReflectionError: function(memberName) {
      throw H.wrapException(new P.UnsupportedError("Can't use '" + H.S(memberName) + "' in reflection because it is not included in a @MirrorsUsed annotation."));
    },
    Primitives_objectHashCode: function(object) {
      var hash = object.$identityHash;
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object.$identityHash = hash;
      }
      return hash;
    },
    Primitives__parseIntError: function(source, handleError) {
      if (handleError == null)
        throw H.wrapException(new P.FormatException(source, null, null));
      return handleError.call$1(source);
    },
    Primitives_parseInt: function(source, radix, handleError) {
      var match, decimalMatch, maxCharCode, digitsPart, t1, i;
      H.checkString(source);
      match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
      if (match == null)
        return H.Primitives__parseIntError(source, handleError);
      if (3 >= match.length)
        return H.ioore(match, 3);
      decimalMatch = match[3];
      if (radix == null) {
        if (decimalMatch != null)
          return parseInt(source, 10);
        if (match[2] != null)
          return parseInt(source, 16);
        return H.Primitives__parseIntError(source, handleError);
      }
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$range(radix, 2, 36, "radix", null));
      if (radix === 10 && decimalMatch != null)
        return parseInt(source, 10);
      if (radix < 10 || decimalMatch == null) {
        maxCharCode = radix <= 10 ? 47 + radix : 86 + radix;
        digitsPart = match[1];
        for (t1 = digitsPart.length, i = 0; i < t1; ++i)
          if ((C.JSString_methods.codeUnitAt$1(digitsPart, i) | 32) > maxCharCode)
            return H.Primitives__parseIntError(source, handleError);
      }
      return parseInt(source, radix);
    },
    Primitives__parseDoubleError: function(source, handleError) {
      if (handleError == null)
        throw H.wrapException(new P.FormatException("Invalid double", source, null));
      return handleError.call$1(source);
    },
    Primitives_parseDouble: function(source, handleError) {
      var result, trimmed;
      H.checkString(source);
      if (!/^\s*[+-]?(?:Infinity|NaN|(?:\.\d+|\d+(?:\.\d*)?)(?:[eE][+-]?\d+)?)\s*$/.test(source))
        return H.Primitives__parseDoubleError(source, handleError);
      result = parseFloat(source);
      if (isNaN(result)) {
        trimmed = J.trim$0$s(source);
        if (trimmed === "NaN" || trimmed === "+NaN" || trimmed === "-NaN")
          return result;
        return H.Primitives__parseDoubleError(source, handleError);
      }
      return result;
    },
    Primitives_objectTypeName: function(object) {
      var interceptor, interceptorConstructor, interceptorConstructorName, $name, dispatchName, objectConstructor, match, decompiledName;
      interceptor = J.getInterceptor(object);
      interceptorConstructor = interceptor.constructor;
      if (typeof interceptorConstructor == "function") {
        interceptorConstructorName = interceptorConstructor.name;
        $name = typeof interceptorConstructorName === "string" ? interceptorConstructorName : null;
      } else
        $name = null;
      if ($name == null || interceptor === C.Interceptor_methods || !!J.getInterceptor(object).$isUnknownJavaScriptObject) {
        dispatchName = C.JS_CONST_8ZY(object);
        if (dispatchName === "Object") {
          objectConstructor = object.constructor;
          if (typeof objectConstructor == "function") {
            match = String(objectConstructor).match(/^\s*function\s*([\w$]*)\s*\(/);
            decompiledName = match == null ? null : match[1];
            if (typeof decompiledName === "string" && /^\w+$/.test(decompiledName))
              $name = decompiledName;
          }
          if ($name == null)
            $name = dispatchName;
        } else
          $name = dispatchName;
      }
      $name = $name;
      if ($name.length > 1 && C.JSString_methods.codeUnitAt$1($name, 0) === 36)
        $name = C.JSString_methods.substring$1($name, 1);
      return function(str, names) {
        return str.replace(/[^<,> ]+/g, function(m) {
          return names[m] || m;
        });
      }($name + H.joinArguments(H.getRuntimeTypeInfo(object), 0, null), init.mangledGlobalNames);
    },
    Primitives_objectToHumanReadableString: function(object) {
      return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
    },
    Primitives_currentUri: function() {
      if (!!self.location)
        return self.location.href;
      return;
    },
    Primitives__fromCharCodeApply: function(array) {
      var end, result, i, i0, chunkEnd;
      end = array.length;
      if (end <= 500)
        return String.fromCharCode.apply(null, array);
      for (result = "", i = 0; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, array.slice(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCodePoints: function(codePoints) {
      var a, t1, _i, i;
      a = H.setRuntimeTypeInfo([], [P.$int]);
      for (t1 = codePoints.length, _i = 0; _i < codePoints.length; codePoints.length === t1 || (0, H.throwConcurrentModificationError)(codePoints), ++_i) {
        i = codePoints[_i];
        if (typeof i !== "number" || Math.floor(i) !== i)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i <= 65535)
          a.push(i);
        else if (i <= 1114111) {
          a.push(55296 + (C.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
          a.push(56320 + (i & 1023));
        } else
          throw H.wrapException(H.argumentErrorValue(i));
      }
      return H.Primitives__fromCharCodeApply(a);
    },
    Primitives_stringFromCharCodes: function(charCodes) {
      var t1, _i, t2, i;
      for (t1 = charCodes.length, _i = 0; t2 = charCodes.length, _i < t2; t2 === t1 || (0, H.throwConcurrentModificationError)(charCodes), ++_i) {
        i = charCodes[_i];
        if (typeof i !== "number" || Math.floor(i) !== i)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i < 0)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i > 65535)
          return H.Primitives_stringFromCodePoints(charCodes);
      }
      return H.Primitives__fromCharCodeApply(charCodes);
    },
    Primitives_stringFromCharCode: function(charCode) {
      var bits;
      if (typeof charCode !== "number")
        return H.iae(charCode);
      if (0 <= charCode) {
        if (charCode <= 65535)
          return String.fromCharCode(charCode);
        if (charCode <= 1114111) {
          bits = charCode - 65536;
          return String.fromCharCode((55296 | C.JSInt_methods._shrOtherPositive$1(bits, 10)) >>> 0, 56320 | bits & 1023);
        }
      }
      throw H.wrapException(P.RangeError$range(charCode, 0, 1114111, null, null));
    },
    Primitives_valueFromDecomposedDate: function(years, month, day, hours, minutes, seconds, milliseconds, isUtc) {
      var jsMonth, value, t1, date;
      H.checkInt(years);
      H.checkInt(month);
      H.checkInt(day);
      H.checkInt(hours);
      H.checkInt(minutes);
      H.checkInt(seconds);
      H.checkInt(milliseconds);
      jsMonth = J.$sub$n(month, 1);
      value = isUtc ? Date.UTC(years, jsMonth, day, hours, minutes, seconds, milliseconds) : new Date(years, jsMonth, day, hours, minutes, seconds, milliseconds).valueOf();
      if (isNaN(value) || value < -864e13 || value > 864e13)
        return;
      t1 = J.getInterceptor$n(years);
      if (t1.$le(years, 0) || t1.$lt(years, 100)) {
        date = new Date(value);
        if (isUtc)
          date.setUTCFullYear(years);
        else
          date.setFullYear(years);
        return date.valueOf();
      }
      return value;
    },
    Primitives_lazyAsJsDate: function(receiver) {
      if (receiver.date === void 0)
        receiver.date = new Date(receiver._value);
      return receiver.date;
    },
    Primitives_getYear: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0 : H.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
    },
    Primitives_getMonth: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : H.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
    },
    Primitives_getDay: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0 : H.Primitives_lazyAsJsDate(receiver).getDate() + 0;
    },
    Primitives_getHours: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0 : H.Primitives_lazyAsJsDate(receiver).getHours() + 0;
    },
    Primitives_getMinutes: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0 : H.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
    },
    Primitives_getSeconds: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
    },
    Primitives_getMilliseconds: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
    },
    Primitives_getProperty: function(object, key) {
      if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
        throw H.wrapException(H.argumentErrorValue(object));
      return object[key];
    },
    Primitives_setProperty: function(object, key, value) {
      if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
        throw H.wrapException(H.argumentErrorValue(object));
      object[key] = value;
    },
    Primitives_functionNoSuchMethod: function($function, positionalArguments, namedArguments) {
      var t1, $arguments, namedArgumentList;
      t1 = {};
      t1.argumentCount = 0;
      $arguments = [];
      namedArgumentList = [];
      t1.argumentCount = positionalArguments.length;
      C.JSArray_methods.addAll$1($arguments, positionalArguments);
      t1.names = "";
      if (namedArguments != null && !namedArguments.get$isEmpty(namedArguments))
        namedArguments.forEach$1(0, new H.Primitives_functionNoSuchMethod_closure(t1, $arguments, namedArgumentList));
      return J.noSuchMethod$1$($function, new H.JSInvocationMirror(C.Symbol_call, "call" + "$" + t1.argumentCount + t1.names, 0, $arguments, namedArgumentList, null));
    },
    Primitives_applyFunctionWithPositionalArguments: function($function, positionalArguments) {
      var $arguments, t1;
      $arguments = positionalArguments instanceof Array ? positionalArguments : P.List_List$from(positionalArguments, true, null);
      t1 = $arguments.length;
      if (t1 === 0) {
        if (!!$function.call$0)
          return $function.call$0();
      } else if (t1 === 1) {
        if (!!$function.call$1)
          return $function.call$1($arguments[0]);
      } else if (t1 === 2) {
        if (!!$function.call$2)
          return $function.call$2($arguments[0], $arguments[1]);
      } else if (t1 === 3) {
        if (!!$function.call$3)
          return $function.call$3($arguments[0], $arguments[1], $arguments[2]);
      } else if (t1 === 4) {
        if (!!$function.call$4)
          return $function.call$4($arguments[0], $arguments[1], $arguments[2], $arguments[3]);
      } else if (t1 === 5)
        if (!!$function.call$5)
          return $function.call$5($arguments[0], $arguments[1], $arguments[2], $arguments[3], $arguments[4]);
      return H.Primitives__genericApplyFunctionWithPositionalArguments($function, $arguments);
    },
    Primitives__genericApplyFunctionWithPositionalArguments: function($function, $arguments) {
      var argumentCount, jsFunction, info, requiredArgumentCount, maxArgumentCount, pos;
      argumentCount = $arguments.length;
      jsFunction = $function["call" + "$" + argumentCount];
      if (jsFunction == null) {
        jsFunction = J.getInterceptor($function)["call*"];
        if (jsFunction == null)
          return H.Primitives_functionNoSuchMethod($function, $arguments, null);
        info = H.ReflectionInfo_ReflectionInfo(jsFunction);
        requiredArgumentCount = info.requiredParameterCount;
        maxArgumentCount = requiredArgumentCount + info.optionalParameterCount;
        if (info.areOptionalParametersNamed || requiredArgumentCount > argumentCount || maxArgumentCount < argumentCount)
          return H.Primitives_functionNoSuchMethod($function, $arguments, null);
        $arguments = P.List_List$from($arguments, true, null);
        for (pos = argumentCount; pos < maxArgumentCount; ++pos)
          C.JSArray_methods.add$1($arguments, init.metadata[info.defaultValue$1(0, pos)]);
      }
      return jsFunction.apply($function, $arguments);
    },
    JsCache_allocate: function() {
      var result = Object.create(null);
      result.x = 0;
      delete result.x;
      return result;
    },
    iae: function(argument) {
      throw H.wrapException(H.argumentErrorValue(argument));
    },
    ioore: function(receiver, index) {
      if (receiver == null)
        J.get$length$asx(receiver);
      throw H.wrapException(H.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError: function(indexable, index) {
      var $length, t1;
      if (typeof index !== "number" || Math.floor(index) !== index)
        return new P.ArgumentError(true, index, "index", null);
      $length = J.get$length$asx(indexable);
      if (!(index < 0)) {
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = index >= $length;
      } else
        t1 = true;
      if (t1)
        return P.IndexError$(index, indexable, "index", null, $length);
      return P.RangeError$value(index, "index", null);
    },
    diagnoseRangeError: function(start, end, $length) {
      if (start > $length)
        return new P.RangeError(0, $length, true, start, "start", "Invalid value");
      if (end != null)
        if (end < start || end > $length)
          return new P.RangeError(start, $length, true, end, "end", "Invalid value");
      return new P.ArgumentError(true, end, "end", null);
    },
    argumentErrorValue: function(object) {
      return new P.ArgumentError(true, object, null, null);
    },
    checkNum: function(value) {
      return value;
    },
    checkInt: function(value) {
      if (typeof value !== "number" || Math.floor(value) !== value)
        throw H.wrapException(H.argumentErrorValue(value));
      return value;
    },
    checkString: function(value) {
      if (typeof value !== "string")
        throw H.wrapException(H.argumentErrorValue(value));
      return value;
    },
    wrapException: function(ex) {
      var wrapper;
      if (ex == null)
        ex = new P.NullThrownError();
      wrapper = new Error();
      wrapper.dartException = ex;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: H.toStringWrapper});
        wrapper.name = "";
      } else
        wrapper.toString = H.toStringWrapper;
      return wrapper;
    },
    toStringWrapper: [function() {
      return J.toString$0$(this.dartException);
    }, null, null, 0, 0, null],
    throwExpression: function(ex) {
      throw H.wrapException(ex);
    },
    throwConcurrentModificationError: function(collection) {
      throw H.wrapException(new P.ConcurrentModificationError(collection));
    },
    unwrapException: function(ex) {
      var t1, message, number, ieErrorCode, t2, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match;
      t1 = new H.unwrapException_saveStackTrace(ex);
      if (ex == null)
        return;
      if (ex instanceof H.ExceptionAndStackTrace)
        return t1.call$1(ex.dartException);
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return t1.call$1(ex.dartException);
      else if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
            case 445:
            case 5007:
              t2 = H.S(message) + " (Error " + ieErrorCode + ")";
              return t1.call$1(new H.NullError(t2, null));
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return t1.call$1(H.JsNoSuchMethodError$(message, match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return t1.call$1(H.JsNoSuchMethodError$(message, match));
          } else {
            match = nullCall.matchTypeError$1(message);
            if (match == null) {
              match = nullLiteralCall.matchTypeError$1(message);
              if (match == null) {
                match = undefCall.matchTypeError$1(message);
                if (match == null) {
                  match = undefLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = nullProperty.matchTypeError$1(message);
                    if (match == null) {
                      match = nullLiteralCall.matchTypeError$1(message);
                      if (match == null) {
                        match = undefProperty.matchTypeError$1(message);
                        if (match == null) {
                          match = undefLiteralProperty.matchTypeError$1(message);
                          t2 = match != null;
                        } else
                          t2 = true;
                      } else
                        t2 = true;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
            if (t2)
              return t1.call$1(new H.NullError(message, match == null ? null : match.method));
          }
        }
        return t1.call$1(new H.UnknownJsTypeError(typeof message === "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message === "string" && message.indexOf("call stack") !== -1)
          return new P.StackOverflowError();
        message = function(ex) {
          try {
            return String(ex);
          } catch (e) {
          }
          return null;
        }(ex);
        return t1.call$1(new P.ArgumentError(false, null, null, typeof message === "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message === "string" && message === "too much recursion")
          return new P.StackOverflowError();
      return ex;
    },
    getTraceFromException: function(exception) {
      var trace;
      if (exception instanceof H.ExceptionAndStackTrace)
        return exception.stackTrace;
      if (exception == null)
        return new H._StackTrace(exception, null);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      return exception.$cachedTrace = new H._StackTrace(exception, null);
    },
    objectHashCode: function(object) {
      if (object == null || typeof object != 'object')
        return J.get$hashCode$(object);
      else
        return H.Primitives_objectHashCode(object);
    },
    fillLiteralMap: function(keyValuePairs, result) {
      var $length, index, index0, index1;
      $length = keyValuePairs.length;
      for (index = 0; index < $length; index = index1) {
        index0 = index + 1;
        index1 = index0 + 1;
        result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
      }
      return result;
    },
    invokeClosure: [function(closure, isolate, numberOfArguments, arg1, arg2, arg3, arg4) {
      switch (numberOfArguments) {
        case 0:
          return H._callInIsolate(isolate, new H.invokeClosure_closure(closure));
        case 1:
          return H._callInIsolate(isolate, new H.invokeClosure_closure0(closure, arg1));
        case 2:
          return H._callInIsolate(isolate, new H.invokeClosure_closure1(closure, arg1, arg2));
        case 3:
          return H._callInIsolate(isolate, new H.invokeClosure_closure2(closure, arg1, arg2, arg3));
        case 4:
          return H._callInIsolate(isolate, new H.invokeClosure_closure3(closure, arg1, arg2, arg3, arg4));
      }
      throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
    }, null, null, 14, 0, null, 31, [], 33, [], 21, [], 48, [], 49, [], 22, [], 23, []],
    convertDartClosureToJS: function(closure, arity) {
      var $function;
      if (closure == null)
        return;
      $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = function(closure, arity, context, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, context, arity, a1, a2, a3, a4);
        };
      }(closure, arity, init.globalState.currentContext, H.invokeClosure);
      closure.$identity = $function;
      return $function;
    },
    Closure_fromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, propertyName) {
      var $function, callName, functionType, $prototype, $constructor, t1, isIntercepted, trampoline, signatureFunction, getReceiver, i, stub, stubCallName, t2;
      $function = functions[0];
      callName = $function.$callName;
      if (!!J.getInterceptor(reflectionInfo).$isList) {
        $function.$reflectionInfo = reflectionInfo;
        functionType = H.ReflectionInfo_ReflectionInfo($function).functionType;
      } else
        functionType = reflectionInfo;
      $prototype = isStatic ? Object.create(new H.StaticClosure().constructor.prototype) : Object.create(new H.BoundClosure(null, null, null, null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      if (isStatic)
        $constructor = function() {
          this.$initialize();
        };
      else {
        t1 = $.Closure_functionCounter;
        $.Closure_functionCounter = J.$add$ns(t1, 1);
        t1 = new Function("a,b,c,d" + t1, "this.$initialize(a,b,c,d" + t1 + ")");
        $constructor = t1;
      }
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      t1 = !isStatic;
      if (t1) {
        isIntercepted = jsArguments.length == 1 && true;
        trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
        trampoline.$reflectionInfo = reflectionInfo;
      } else {
        $prototype.$static_name = propertyName;
        trampoline = $function;
        isIntercepted = false;
      }
      if (typeof functionType == "number")
        signatureFunction = function(getType, t) {
          return function() {
            return getType(t);
          };
        }(H.getType, functionType);
      else if (t1 && typeof functionType == "function") {
        getReceiver = isIntercepted ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
        signatureFunction = function(f, r) {
          return function() {
            return f.apply({$receiver: r(this)}, arguments);
          };
        }(functionType, getReceiver);
      } else
        throw H.wrapException("Error in reflectionInfo.");
      $prototype.$signature = signatureFunction;
      $prototype[callName] = trampoline;
      for (t1 = functions.length, i = 1; i < t1; ++i) {
        stub = functions[i];
        stubCallName = stub.$callName;
        if (stubCallName != null) {
          t2 = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
          $prototype[stubCallName] = t2;
        }
      }
      $prototype["call*"] = trampoline;
      $prototype.$requiredArgCount = $function.$requiredArgCount;
      $prototype.$defaultValues = $function.$defaultValues;
      return $constructor;
    },
    Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
      var getSelf = H.BoundClosure_selfOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          return function(n, S) {
            return function() {
              return S(this)[n]();
            };
          }(stubName, getSelf);
        case 1:
          return function(n, S) {
            return function(a) {
              return S(this)[n](a);
            };
          }(stubName, getSelf);
        case 2:
          return function(n, S) {
            return function(a, b) {
              return S(this)[n](a, b);
            };
          }(stubName, getSelf);
        case 3:
          return function(n, S) {
            return function(a, b, c) {
              return S(this)[n](a, b, c);
            };
          }(stubName, getSelf);
        case 4:
          return function(n, S) {
            return function(a, b, c, d) {
              return S(this)[n](a, b, c, d);
            };
          }(stubName, getSelf);
        case 5:
          return function(n, S) {
            return function(a, b, c, d, e) {
              return S(this)[n](a, b, c, d, e);
            };
          }(stubName, getSelf);
        default:
          return function(f, s) {
            return function() {
              return f.apply(s(this), arguments);
            };
          }($function, getSelf);
      }
    },
    Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
      var stubName, arity, lookedUpFunction, t1, t2, selfName, $arguments;
      if (isIntercepted)
        return H.Closure_forwardInterceptedCallTo(receiver, $function);
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t2 = !t1 || arity >= 27;
      if (t2)
        return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
      if (arity === 0) {
        t1 = $.Closure_functionCounter;
        $.Closure_functionCounter = J.$add$ns(t1, 1);
        selfName = "self" + H.S(t1);
        t1 = "return function(){var " + selfName + " = this.";
        t2 = $.BoundClosure_selfFieldNameCache;
        if (t2 == null) {
          t2 = H.BoundClosure_computeFieldNamed("self");
          $.BoundClosure_selfFieldNameCache = t2;
        }
        return new Function(t1 + H.S(t2) + ";return " + selfName + "." + H.S(stubName) + "();}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
      t1 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t1, 1);
      $arguments += H.S(t1);
      t1 = "return function(" + $arguments + "){return this.";
      t2 = $.BoundClosure_selfFieldNameCache;
      if (t2 == null) {
        t2 = H.BoundClosure_computeFieldNamed("self");
        $.BoundClosure_selfFieldNameCache = t2;
      }
      return new Function(t1 + H.S(t2) + "." + H.S(stubName) + "(" + $arguments + ");}")();
    },
    Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
      var getSelf, getReceiver;
      getSelf = H.BoundClosure_selfOf;
      getReceiver = H.BoundClosure_receiverOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          throw H.wrapException(new H.RuntimeError("Intercepted function with no arguments."));
        case 1:
          return function(n, s, r) {
            return function() {
              return s(this)[n](r(this));
            };
          }($name, getSelf, getReceiver);
        case 2:
          return function(n, s, r) {
            return function(a) {
              return s(this)[n](r(this), a);
            };
          }($name, getSelf, getReceiver);
        case 3:
          return function(n, s, r) {
            return function(a, b) {
              return s(this)[n](r(this), a, b);
            };
          }($name, getSelf, getReceiver);
        case 4:
          return function(n, s, r) {
            return function(a, b, c) {
              return s(this)[n](r(this), a, b, c);
            };
          }($name, getSelf, getReceiver);
        case 5:
          return function(n, s, r) {
            return function(a, b, c, d) {
              return s(this)[n](r(this), a, b, c, d);
            };
          }($name, getSelf, getReceiver);
        case 6:
          return function(n, s, r) {
            return function(a, b, c, d, e) {
              return s(this)[n](r(this), a, b, c, d, e);
            };
          }($name, getSelf, getReceiver);
        default:
          return function(f, s, r, a) {
            return function() {
              a = [r(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(s(this), a);
            };
          }($function, getSelf, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo: function(receiver, $function) {
      var selfField, t1, stubName, arity, lookedUpFunction, t2, t3, $arguments;
      selfField = H.BoundClosure_selfFieldName();
      t1 = $.BoundClosure_receiverFieldNameCache;
      if (t1 == null) {
        t1 = H.BoundClosure_computeFieldNamed("receiver");
        $.BoundClosure_receiverFieldNameCache = t1;
      }
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t2 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t3 = !t2 || arity >= 28;
      if (t3)
        return H.Closure_cspForwardInterceptedCall(arity, !t2, stubName, $function);
      if (arity === 1) {
        t1 = "return function(){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(t1) + ");";
        t2 = $.Closure_functionCounter;
        $.Closure_functionCounter = J.$add$ns(t2, 1);
        return new Function(t1 + H.S(t2) + "}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
      t1 = "return function(" + $arguments + "){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(t1) + ", " + $arguments + ");";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function(t1 + H.S(t2) + "}")();
    },
    closureFromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, $name) {
      var t1;
      functions.fixed$length = Array;
      if (!!J.getInterceptor(reflectionInfo).$isList) {
        reflectionInfo.fixed$length = Array;
        t1 = reflectionInfo;
      } else
        t1 = reflectionInfo;
      return H.Closure_fromTearOff(receiver, functions, t1, !!isStatic, jsArguments, $name);
    },
    propertyTypeCastError: function(value, property) {
      var t1 = J.getInterceptor$asx(property);
      throw H.wrapException(H.CastErrorImplementation$(H.Primitives_objectTypeName(value), t1.substring$2(property, 3, t1.get$length(property))));
    },
    interceptedTypeCast: function(value, property) {
      var t1;
      if (value != null)
        t1 = (typeof value === "object" || typeof value === "function") && J.getInterceptor(value)[property];
      else
        t1 = true;
      if (t1)
        return value;
      H.propertyTypeCastError(value, property);
    },
    throwCyclicInit: function(staticName) {
      throw H.wrapException(new P.CyclicInitializationError("Cyclic initialization for static " + H.S(staticName)));
    },
    buildFunctionType: function(returnType, parameterTypes, optionalParameterTypes) {
      return new H.RuntimeFunctionType(returnType, parameterTypes, optionalParameterTypes, null);
    },
    buildInterfaceType: function(rti, typeArguments) {
      var jsConstructorName = rti.builtin$cls;
      if (typeArguments == null || typeArguments.length === 0)
        return new H.RuntimeTypePlain(jsConstructorName);
      return new H.RuntimeTypeGeneric(jsConstructorName, typeArguments, null);
    },
    getDynamicRuntimeType: function() {
      return C.C_DynamicRuntimeType;
    },
    random64: function() {
      return (Math.random() * 0x100000000 >>> 0) + (Math.random() * 0x100000000 >>> 0) * 4294967296;
    },
    getIsolateAffinityTag: function($name) {
      return init.getIsolateTag($name);
    },
    createRuntimeType: function($name) {
      return new H.TypeImpl($name, null);
    },
    setRuntimeTypeInfo: function(target, rti) {
      target.$builtinTypeInfo = rti;
      return target;
    },
    getRuntimeTypeInfo: function(target) {
      if (target == null)
        return;
      return target.$builtinTypeInfo;
    },
    getRuntimeTypeArguments: function(target, substitutionName) {
      return H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
    },
    getRuntimeTypeArgument: function(target, substitutionName, index) {
      var $arguments = H.getRuntimeTypeArguments(target, substitutionName);
      return $arguments == null ? null : $arguments[index];
    },
    getTypeArgumentByIndex: function(target, index) {
      var rti = H.getRuntimeTypeInfo(target);
      return rti == null ? null : rti[index];
    },
    runtimeTypeToString: function(rti, onTypeVariable) {
      if (rti == null)
        return "dynamic";
      else if (typeof rti === "object" && rti !== null && rti.constructor === Array)
        return rti[0].builtin$cls + H.joinArguments(rti, 1, onTypeVariable);
      else if (typeof rti == "function")
        return rti.builtin$cls;
      else if (typeof rti === "number" && Math.floor(rti) === rti)
        if (onTypeVariable == null)
          return C.JSInt_methods.toString$0(rti);
        else
          return onTypeVariable.call$1(rti);
      else
        return;
    },
    joinArguments: function(types, startIndex, onTypeVariable) {
      var buffer, index, firstArgument, allDynamic, t1, argument;
      if (types == null)
        return "";
      buffer = new P.StringBuffer("");
      for (index = startIndex, firstArgument = true, allDynamic = true, t1 = ""; index < types.length; ++index) {
        if (firstArgument)
          firstArgument = false;
        else
          buffer._contents = t1 + ", ";
        argument = types[index];
        if (argument != null)
          allDynamic = false;
        t1 = buffer._contents += H.S(H.runtimeTypeToString(argument, onTypeVariable));
      }
      return allDynamic ? "" : "<" + H.S(buffer) + ">";
    },
    getRuntimeTypeString: function(object) {
      var className = J.getInterceptor(object).constructor.builtin$cls;
      if (object == null)
        return className;
      return className + H.joinArguments(object.$builtinTypeInfo, 0, null);
    },
    substitute: function(substitution, $arguments) {
      if (typeof substitution == "function") {
        substitution = substitution.apply(null, $arguments);
        if (substitution == null)
          return substitution;
        if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
          return substitution;
        if (typeof substitution == "function")
          return substitution.apply(null, $arguments);
      }
      return $arguments;
    },
    checkSubtype: function(object, isField, checks, asField) {
      var $arguments, interceptor;
      if (object == null)
        return false;
      $arguments = H.getRuntimeTypeInfo(object);
      interceptor = J.getInterceptor(object);
      if (interceptor[isField] == null)
        return false;
      return H.areSubtypes(H.substitute(interceptor[asField], $arguments), checks);
    },
    areSubtypes: function(s, t) {
      var len, i;
      if (s == null || t == null)
        return true;
      len = s.length;
      for (i = 0; i < len; ++i)
        if (!H.isSubtype(s[i], t[i]))
          return false;
      return true;
    },
    computeSignature: function(signature, context, contextName) {
      return signature.apply(context, H.getRuntimeTypeArguments(context, contextName));
    },
    isSubtype: function(s, t) {
      var t1, typeOfS, t2, typeOfT, substitution;
      if (s === t)
        return true;
      if (s == null || t == null)
        return true;
      if ('func' in t)
        return H.isFunctionSubtype(s, t);
      if ('func' in s)
        return t.builtin$cls === "Function";
      t1 = typeof s === "object" && s !== null && s.constructor === Array;
      typeOfS = t1 ? s[0] : s;
      t2 = typeof t === "object" && t !== null && t.constructor === Array;
      typeOfT = t2 ? t[0] : t;
      if (typeOfT !== typeOfS) {
        if (!('$is' + H.runtimeTypeToString(typeOfT, null) in typeOfS.prototype))
          return false;
        substitution = typeOfS.prototype["$as" + H.S(H.runtimeTypeToString(typeOfT, null))];
      } else
        substitution = null;
      if (!t1 && substitution == null || !t2)
        return true;
      t1 = t1 ? s.slice(1) : null;
      t2 = t2 ? t.slice(1) : null;
      return H.areSubtypes(H.substitute(substitution, t1), t2);
    },
    areAssignable: function(s, t, allowShorter) {
      var t1, sLength, tLength, i, t2;
      t1 = t == null;
      if (t1 && s == null)
        return true;
      if (t1)
        return allowShorter;
      if (s == null)
        return false;
      sLength = s.length;
      tLength = t.length;
      if (allowShorter) {
        if (sLength < tLength)
          return false;
      } else if (sLength !== tLength)
        return false;
      for (i = 0; i < tLength; ++i) {
        t1 = s[i];
        t2 = t[i];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      return true;
    },
    areAssignableMaps: function(s, t) {
      var t1, names, i, $name, tType, sType;
      if (t == null)
        return true;
      if (s == null)
        return false;
      t1 = Object.getOwnPropertyNames(t);
      t1.fixed$length = Array;
      names = t1;
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (!Object.hasOwnProperty.call(s, $name))
          return false;
        tType = t[$name];
        sType = s[$name];
        if (!(H.isSubtype(tType, sType) || H.isSubtype(sType, tType)))
          return false;
      }
      return true;
    },
    isFunctionSubtype: function(s, t) {
      var sReturnType, tReturnType, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, t1, t2, tPos, sPos;
      if (!('func' in s))
        return false;
      if ("v" in s) {
        if (!("v" in t) && "ret" in t)
          return false;
      } else if (!("v" in t)) {
        sReturnType = s.ret;
        tReturnType = t.ret;
        if (!(H.isSubtype(sReturnType, tReturnType) || H.isSubtype(tReturnType, sReturnType)))
          return false;
      }
      sParameterTypes = s.args;
      tParameterTypes = t.args;
      sOptionalParameterTypes = s.opt;
      tOptionalParameterTypes = t.opt;
      sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
      tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
      sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
      tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
      if (sParametersLen > tParametersLen)
        return false;
      if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
        return false;
      if (sParametersLen === tParametersLen) {
        if (!H.areAssignable(sParameterTypes, tParameterTypes, false))
          return false;
        if (!H.areAssignable(sOptionalParameterTypes, tOptionalParameterTypes, true))
          return false;
      } else {
        for (pos = 0; pos < sParametersLen; ++pos) {
          t1 = sParameterTypes[pos];
          t2 = tParameterTypes[pos];
          if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
            return false;
        }
        for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos) {
          t1 = sOptionalParameterTypes[sPos];
          t2 = tParameterTypes[tPos];
          if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
            return false;
        }
        for (tPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos) {
          t1 = sOptionalParameterTypes[sPos];
          t2 = tOptionalParameterTypes[tPos];
          if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
            return false;
        }
      }
      return H.areAssignableMaps(s.named, t.named);
    },
    toStringForNativeObject: function(obj) {
      var t1 = $.getTagFunction;
      return "Instance of " + (t1 == null ? "<Unknown>" : t1.call$1(obj));
    },
    hashCodeForNativeObject: function(object) {
      return H.Primitives_objectHashCode(object);
    },
    defineProperty: function(obj, property, value) {
      Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
    },
    lookupAndCacheInterceptor: function(obj) {
      var tag, record, interceptor, interceptorClass, mark, t1;
      tag = $.getTagFunction.call$1(obj);
      record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        tag = $.alternateTagFunction.call$2(obj, tag);
        if (tag != null) {
          record = $.dispatchRecordsForInstanceTags[tag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[tag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[tag];
        }
      }
      if (interceptorClass == null)
        return;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = H.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return H.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw H.wrapException(new P.UnimplementedError(tag));
      if (init.leafTags[tag] === true) {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return H.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto: function(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord: function(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch: function() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      H.initNativeDispatchContinue();
    },
    initNativeDispatchContinue: function() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      H.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks: function() {
      var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
      hooks = C.JS_CONST_gkc();
      hooks = H.applyHooksTransformer(C.JS_CONST_0, H.applyHooksTransformer(C.JS_CONST_rr7, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_gkc0, H.applyHooksTransformer(C.JS_CONST_4hp, H.applyHooksTransformer(C.JS_CONST_QJm(C.JS_CONST_8ZY), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (transformers.constructor == Array)
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new H.initHooks_closure(getTag);
      $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer: function(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    stringContainsUnchecked: function(receiver, other, startIndex) {
      return receiver.indexOf(other, startIndex) >= 0;
    },
    stringReplaceAllUnchecked: function(receiver, pattern, replacement) {
      var $length, t1, i;
      H.checkString(replacement);
      if (pattern === "")
        if (receiver === "")
          return replacement;
        else {
          $length = receiver.length;
          for (t1 = replacement, i = 0; i < $length; ++i)
            t1 = t1 + receiver[i] + replacement;
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        }
      else
        return receiver.replace(new RegExp(pattern.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&"), 'g'), replacement.replace(/\$/g, "$$$$"));
    },
    NoSideEffects: {
      "^": "Object;"
    },
    NoThrows: {
      "^": "Object;"
    },
    NoInline: {
      "^": "Object;"
    },
    ForceInline: {
      "^": "Object;"
    },
    Native: {
      "^": "Object;name>"
    },
    _Patch: {
      "^": "Object;version"
    },
    ConstantMapView: {
      "^": "UnmodifiableMapView;_map",
      $asUnmodifiableMapView: Isolate.functionThatReturnsNull,
      $asMapView: Isolate.functionThatReturnsNull,
      $asMap: Isolate.functionThatReturnsNull,
      $isMap: 1
    },
    ConstantMap: {
      "^": "Object;",
      get$isEmpty: function(_) {
        return this.get$length(this) === 0;
      },
      get$isNotEmpty: function(_) {
        return this.get$length(this) !== 0;
      },
      toString$0: function(_) {
        return P.Maps_mapToString(this);
      },
      $indexSet: function(_, key, val) {
        return H.ConstantMap__throwUnmodifiable();
      },
      remove$1: function(_, key) {
        return H.ConstantMap__throwUnmodifiable();
      },
      clear$0: function(_) {
        return H.ConstantMap__throwUnmodifiable();
      },
      $isMap: 1,
      $asMap: null
    },
    ConstantStringMap: {
      "^": "ConstantMap;__js_helper$_length,_jsObject,_keys",
      get$length: function(_) {
        return this.__js_helper$_length;
      },
      containsKey$1: function(_, key) {
        if (typeof key !== "string")
          return false;
        if ("__proto__" === key)
          return false;
        return this._jsObject.hasOwnProperty(key);
      },
      $index: function(_, key) {
        if (!this.containsKey$1(0, key))
          return;
        return this._fetch$1(key);
      },
      _fetch$1: function(key) {
        return this._jsObject[key];
      },
      forEach$1: function(_, f) {
        var keys, t1, i, key;
        keys = this._keys;
        for (t1 = keys.length, i = 0; i < t1; ++i) {
          key = keys[i];
          f.call$2(key, this._fetch$1(key));
        }
      },
      get$keys: function(_) {
        return H.setRuntimeTypeInfo(new H._ConstantMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
      }
    },
    _ConstantMapKeyIterable: {
      "^": "Iterable;__js_helper$_map",
      get$iterator: function(_) {
        var t1 = this.__js_helper$_map._keys;
        return H.setRuntimeTypeInfo(new J.ArrayIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]);
      },
      get$length: function(_) {
        return this.__js_helper$_map._keys.length;
      }
    },
    JSInvocationMirror: {
      "^": "Object;__js_helper$_memberName,_internalName,_kind,_arguments,_namedArgumentNames,_namedIndices",
      get$memberName: function() {
        var $name, t1, t2, unmangledName;
        $name = this.__js_helper$_memberName;
        t1 = J.getInterceptor($name);
        if (!!t1.$isSymbol)
          return $name;
        t2 = $.$get$mangledNames();
        unmangledName = t2.$index(0, $name);
        if (unmangledName != null) {
          t1 = unmangledName.split(":");
          if (0 >= t1.length)
            return H.ioore(t1, 0);
          $name = t1[0];
        } else if (t2.$index(0, this._internalName) == null)
          P.print("Warning: '" + t1.toString$0($name) + "' is used reflectively but not in MirrorsUsed. This will break minified code.");
        t1 = new H.Symbol0($name);
        this.__js_helper$_memberName = t1;
        return t1;
      },
      get$isSetter: function() {
        return this._kind === 2;
      },
      get$positionalArguments: function() {
        var t1, argumentCount, list, index;
        if (this._kind === 1)
          return C.List_empty;
        t1 = this._arguments;
        argumentCount = t1.length - this._namedArgumentNames.length;
        if (argumentCount === 0)
          return C.List_empty;
        list = [];
        for (index = 0; index < argumentCount; ++index) {
          if (index >= t1.length)
            return H.ioore(t1, index);
          list.push(t1[index]);
        }
        list.fixed$length = Array;
        list.immutable$list = Array;
        return list;
      },
      get$namedArguments: function() {
        var t1, namedArgumentCount, t2, namedArgumentsStartIndex, map, i, t3, t4;
        if (this._kind !== 0)
          return C.Map_empty0;
        t1 = this._namedArgumentNames;
        namedArgumentCount = t1.length;
        t2 = this._arguments;
        namedArgumentsStartIndex = t2.length - namedArgumentCount;
        if (namedArgumentCount === 0)
          return C.Map_empty0;
        map = H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [P.Symbol, null]);
        for (i = 0; i < namedArgumentCount; ++i) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t3 = t1[i];
          t4 = namedArgumentsStartIndex + i;
          if (t4 < 0 || t4 >= t2.length)
            return H.ioore(t2, t4);
          map.$indexSet(0, new H.Symbol0(t3), t2[t4]);
        }
        return H.setRuntimeTypeInfo(new H.ConstantMapView(map), [P.Symbol, null]);
      },
      __js_helper$_getCachedInvocation$1: function(object) {
        var interceptor, $name, isIntercepted, interceptor0, receiver, method, baseName, isCatchAll;
        interceptor = J.getInterceptor(object);
        $name = this._internalName;
        isIntercepted = Object.prototype.hasOwnProperty.call(init.interceptedNames, $name);
        if (isIntercepted) {
          interceptor0 = object === interceptor ? null : interceptor;
          receiver = interceptor;
          interceptor = interceptor0;
        } else {
          receiver = object;
          interceptor = null;
        }
        method = receiver[$name];
        if (typeof method != "function") {
          baseName = this.get$memberName().__internal$_name;
          method = receiver[baseName + "*"];
          if (method == null) {
            interceptor = J.getInterceptor(object);
            method = interceptor[baseName + "*"];
            if (method != null)
              isIntercepted = true;
            else
              interceptor = null;
          }
          isCatchAll = true;
        } else
          isCatchAll = false;
        if (typeof method == "function")
          if (isCatchAll)
            return new H.CachedCatchAllInvocation(H.ReflectionInfo_ReflectionInfo(method), $name, method, isIntercepted, interceptor);
          else
            return new H.CachedInvocation($name, method, isIntercepted, interceptor);
        else
          return new H.CachedNoSuchMethodInvocation(interceptor);
      }
    },
    CachedInvocation: {
      "^": "Object;mangledName<,jsFunction<,isIntercepted<,cachedInterceptor",
      get$isNoSuchMethod: function() {
        return false;
      },
      get$isGetterStub: function() {
        return !!this.jsFunction.$getterStub;
      },
      invokeOn$2: function(victim, $arguments) {
        var receiver, arguments0;
        if (!this.isIntercepted) {
          if ($arguments.constructor !== Array)
            $arguments = P.List_List$from($arguments, true, null);
          receiver = victim;
        } else {
          arguments0 = [victim];
          C.JSArray_methods.addAll$1(arguments0, $arguments);
          receiver = this.cachedInterceptor;
          receiver = receiver != null ? receiver : victim;
          $arguments = arguments0;
        }
        return this.jsFunction.apply(receiver, $arguments);
      }
    },
    CachedCatchAllInvocation: {
      "^": "CachedInvocation;info,mangledName,jsFunction,isIntercepted,cachedInterceptor",
      get$isGetterStub: function() {
        return false;
      },
      invokeOn$2: function(victim, $arguments) {
        var t1, t2, fullParameterCount, providedArgumentCount, receiver, arguments0, i;
        t1 = this.info;
        t2 = t1.requiredParameterCount;
        fullParameterCount = t2 + t1.optionalParameterCount;
        if (!this.isIntercepted) {
          if ($arguments.constructor === Array) {
            providedArgumentCount = $arguments.length;
            if (providedArgumentCount < fullParameterCount)
              $arguments = P.List_List$from($arguments, true, null);
          } else {
            $arguments = P.List_List$from($arguments, true, null);
            providedArgumentCount = $arguments.length;
          }
          receiver = victim;
        } else {
          arguments0 = [victim];
          C.JSArray_methods.addAll$1(arguments0, $arguments);
          receiver = this.cachedInterceptor;
          receiver = receiver != null ? receiver : victim;
          providedArgumentCount = arguments0.length - 1;
          $arguments = arguments0;
        }
        if (t1.areOptionalParametersNamed && providedArgumentCount > t2)
          throw H.wrapException(new H.UnimplementedNoSuchMethodError("Invocation of unstubbed method '" + t1.get$reflectionName() + "' with " + $arguments.length + " arguments."));
        else if (providedArgumentCount < t2)
          throw H.wrapException(new H.UnimplementedNoSuchMethodError("Invocation of unstubbed method '" + t1.get$reflectionName() + "' with " + providedArgumentCount + " arguments (too few)."));
        else if (providedArgumentCount > fullParameterCount)
          throw H.wrapException(new H.UnimplementedNoSuchMethodError("Invocation of unstubbed method '" + t1.get$reflectionName() + "' with " + providedArgumentCount + " arguments (too many)."));
        for (i = providedArgumentCount; i < fullParameterCount; ++i)
          C.JSArray_methods.add$1($arguments, init.metadata[t1.defaultValue$1(0, i)]);
        return this.jsFunction.apply(receiver, $arguments);
      }
    },
    CachedNoSuchMethodInvocation: {
      "^": "Object;interceptor",
      get$isNoSuchMethod: function() {
        return true;
      },
      get$isGetterStub: function() {
        return false;
      },
      invokeOn$2: function(victim, invocation) {
        var receiver = this.interceptor;
        return J.noSuchMethod$1$(receiver == null ? victim : receiver, invocation);
      }
    },
    ReflectionInfo: {
      "^": "Object;jsFunction<,data,isAccessor,requiredParameterCount,optionalParameterCount,areOptionalParametersNamed,functionType,cachedSortedIndices",
      parameterName$1: function(parameter) {
        var metadataIndex = this.data[2 * parameter + this.optionalParameterCount + 3];
        return init.metadata[metadataIndex];
      },
      defaultValue$1: function(_, parameter) {
        var t1 = this.requiredParameterCount;
        if (typeof parameter !== "number")
          return parameter.$lt();
        if (parameter < t1)
          return;
        return this.data[3 + parameter - t1];
      },
      get$reflectionName: function() {
        return this.jsFunction.$reflectionName;
      },
      static: {
        ReflectionInfo_ReflectionInfo: function(jsFunction) {
          var data, requiredParametersInfo, optionalParametersInfo;
          data = jsFunction.$reflectionInfo;
          if (data == null)
            return;
          data.fixed$length = Array;
          data = data;
          requiredParametersInfo = data[0];
          optionalParametersInfo = data[1];
          return new H.ReflectionInfo(jsFunction, data, (requiredParametersInfo & 1) === 1, requiredParametersInfo >> 1, optionalParametersInfo >> 1, (optionalParametersInfo & 1) === 1, data[2], null);
        }
      }
    },
    Primitives_functionNoSuchMethod_closure: {
      "^": "Closure:30;_box_0,$arguments,namedArgumentList",
      call$2: function($name, argument) {
        var t1 = this._box_0;
        t1.names = t1.names + "$" + H.S($name);
        this.namedArgumentList.push($name);
        this.$arguments.push(argument);
        ++t1.argumentCount;
      }
    },
    TypeErrorDecoder: {
      "^": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver",
      matchTypeError$1: function(message) {
        var match, result, t1;
        match = new RegExp(this._pattern).exec(message);
        if (match == null)
          return;
        result = Object.create(null);
        t1 = this._arguments;
        if (t1 !== -1)
          result.arguments = match[t1 + 1];
        t1 = this._argumentsExpr;
        if (t1 !== -1)
          result.argumentsExpr = match[t1 + 1];
        t1 = this._expr;
        if (t1 !== -1)
          result.expr = match[t1 + 1];
        t1 = this._method;
        if (t1 !== -1)
          result.method = match[t1 + 1];
        t1 = this._receiver;
        if (t1 !== -1)
          result.receiver = match[t1 + 1];
        return result;
      },
      static: {
        TypeErrorDecoder_extractPattern: function(message) {
          var match, $arguments, argumentsExpr, expr, method, receiver;
          message = message.replace(String({}), '$receiver$').replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
          match = message.match(/\\\$[a-zA-Z]+\\\$/g);
          if (match == null)
            match = [];
          $arguments = match.indexOf("\\$arguments\\$");
          argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
          expr = match.indexOf("\\$expr\\$");
          method = match.indexOf("\\$method\\$");
          receiver = match.indexOf("\\$receiver\\$");
          return new H.TypeErrorDecoder(message.replace(new RegExp('\\\\\\$arguments\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$argumentsExpr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$expr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$method\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$receiver\\\\\\$', 'g'), '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
        },
        TypeErrorDecoder_provokeCallErrorOn: function(expression) {
          return function($expr$) {
            var $argumentsExpr$ = '$arguments$';
            try {
              $expr$.$method$($argumentsExpr$);
            } catch (e) {
              return e.message;
            }
          }(expression);
        },
        TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
          return function($expr$) {
            try {
              $expr$.$method$;
            } catch (e) {
              return e.message;
            }
          }(expression);
        }
      }
    },
    NullError: {
      "^": "Error;_message,_method",
      toString$0: function(_) {
        var t1 = this._method;
        if (t1 == null)
          return "NullError: " + H.S(this._message);
        return "NullError: method not found: '" + H.S(t1) + "' on null";
      }
    },
    JsNoSuchMethodError: {
      "^": "Error;_message,_method,_receiver",
      toString$0: function(_) {
        var t1, t2;
        t1 = this._method;
        if (t1 == null)
          return "NoSuchMethodError: " + H.S(this._message);
        t2 = this._receiver;
        if (t2 == null)
          return "NoSuchMethodError: method not found: '" + H.S(t1) + "' (" + H.S(this._message) + ")";
        return "NoSuchMethodError: method not found: '" + H.S(t1) + "' on '" + H.S(t2) + "' (" + H.S(this._message) + ")";
      },
      static: {
        JsNoSuchMethodError$: function(_message, match) {
          var t1, t2;
          t1 = match == null;
          t2 = t1 ? null : match.method;
          return new H.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
        }
      }
    },
    UnknownJsTypeError: {
      "^": "Error;_message",
      toString$0: function(_) {
        var t1 = this._message;
        return t1.length === 0 ? "Error" : "Error: " + t1;
      }
    },
    ExceptionAndStackTrace: {
      "^": "Object;dartException,stackTrace<"
    },
    unwrapException_saveStackTrace: {
      "^": "Closure:1;ex",
      call$1: function(error) {
        if (!!J.getInterceptor(error).$isError)
          if (error.$thrownJsError == null)
            error.$thrownJsError = this.ex;
        return error;
      }
    },
    _StackTrace: {
      "^": "Object;_exception,_trace",
      toString$0: function(_) {
        var t1, trace;
        t1 = this._trace;
        if (t1 != null)
          return t1;
        t1 = this._exception;
        trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
        t1 = trace == null ? "" : trace;
        this._trace = t1;
        return t1;
      }
    },
    invokeClosure_closure: {
      "^": "Closure:4;closure",
      call$0: function() {
        return this.closure.call$0();
      }
    },
    invokeClosure_closure0: {
      "^": "Closure:4;closure,arg1",
      call$0: function() {
        return this.closure.call$1(this.arg1);
      }
    },
    invokeClosure_closure1: {
      "^": "Closure:4;closure,arg1,arg2",
      call$0: function() {
        return this.closure.call$2(this.arg1, this.arg2);
      }
    },
    invokeClosure_closure2: {
      "^": "Closure:4;closure,arg1,arg2,arg3",
      call$0: function() {
        return this.closure.call$3(this.arg1, this.arg2, this.arg3);
      }
    },
    invokeClosure_closure3: {
      "^": "Closure:4;closure,arg1,arg2,arg3,arg4",
      call$0: function() {
        return this.closure.call$4(this.arg1, this.arg2, this.arg3, this.arg4);
      }
    },
    Closure: {
      "^": "Object;",
      toString$0: function(_) {
        return "Closure '" + H.Primitives_objectTypeName(this) + "'";
      },
      get$$call: function() {
        return this;
      },
      $isFunction: 1,
      get$$call: function() {
        return this;
      }
    },
    TearOffClosure: {
      "^": "Closure;"
    },
    StaticClosure: {
      "^": "TearOffClosure;",
      toString$0: function(_) {
        var $name = this.$static_name;
        if ($name == null)
          return "Closure of unknown static method";
        return "Closure '" + $name + "'";
      }
    },
    BoundClosure: {
      "^": "TearOffClosure;_self,_target,_receiver,_name",
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (this === other)
          return true;
        if (!(other instanceof H.BoundClosure))
          return false;
        return this._self === other._self && this._target === other._target && this._receiver === other._receiver;
      },
      get$hashCode: function(_) {
        var t1, receiverHashCode;
        t1 = this._receiver;
        if (t1 == null)
          receiverHashCode = H.Primitives_objectHashCode(this._self);
        else
          receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
        return J.$xor$n(receiverHashCode, H.Primitives_objectHashCode(this._target));
      },
      toString$0: function(_) {
        var receiver = this._receiver;
        if (receiver == null)
          receiver = this._self;
        return "Closure '" + H.S(this._name) + "' of " + H.Primitives_objectToHumanReadableString(receiver);
      },
      static: {
        BoundClosure_selfOf: function(closure) {
          return closure._self;
        },
        BoundClosure_receiverOf: function(closure) {
          return closure._receiver;
        },
        BoundClosure_selfFieldName: function() {
          var t1 = $.BoundClosure_selfFieldNameCache;
          if (t1 == null) {
            t1 = H.BoundClosure_computeFieldNamed("self");
            $.BoundClosure_selfFieldNameCache = t1;
          }
          return t1;
        },
        BoundClosure_computeFieldNamed: function(fieldName) {
          var template, t1, names, i, $name;
          template = new H.BoundClosure("self", "target", "receiver", "name");
          t1 = Object.getOwnPropertyNames(template);
          t1.fixed$length = Array;
          names = t1;
          for (t1 = names.length, i = 0; i < t1; ++i) {
            $name = names[i];
            if (template[$name] === fieldName)
              return $name;
          }
        }
      }
    },
    "+BoundClosure": [159],
    Creates: {
      "^": "Object;types"
    },
    Returns: {
      "^": "Object;types"
    },
    JSName: {
      "^": "Object;name>"
    },
    CastErrorImplementation: {
      "^": "Error;message",
      toString$0: function(_) {
        return this.message;
      },
      static: {
        CastErrorImplementation$: function(actualType, expectedType) {
          return new H.CastErrorImplementation("CastError: Casting value of type " + H.S(actualType) + " to incompatible type " + H.S(expectedType));
        }
      }
    },
    RuntimeError: {
      "^": "Error;message",
      toString$0: function(_) {
        return "RuntimeError: " + H.S(this.message);
      }
    },
    RuntimeType: {
      "^": "Object;"
    },
    RuntimeFunctionType: {
      "^": "RuntimeType;returnType,parameterTypes,optionalParameterTypes,namedParameters",
      _isTest$1: function(expression) {
        var functionTypeObject = this._extractFunctionTypeObjectFrom$1(expression);
        return functionTypeObject == null ? false : H.isFunctionSubtype(functionTypeObject, this.toRti$0());
      },
      _extractFunctionTypeObjectFrom$1: function(o) {
        var interceptor = J.getInterceptor(o);
        return "$signature" in interceptor ? interceptor.$signature() : null;
      },
      toRti$0: function() {
        var result, t1, t2, namedRti, keys, i, $name;
        result = {func: "dynafunc"};
        t1 = this.returnType;
        t2 = J.getInterceptor(t1);
        if (!!t2.$isVoidRuntimeType)
          result.v = true;
        else if (!t2.$isDynamicRuntimeType)
          result.ret = t1.toRti$0();
        t1 = this.parameterTypes;
        if (t1 != null && t1.length !== 0)
          result.args = H.RuntimeFunctionType_listToRti(t1);
        t1 = this.optionalParameterTypes;
        if (t1 != null && t1.length !== 0)
          result.opt = H.RuntimeFunctionType_listToRti(t1);
        t1 = this.namedParameters;
        if (t1 != null) {
          namedRti = Object.create(null);
          keys = H.extractKeys(t1);
          for (t2 = keys.length, i = 0; i < t2; ++i) {
            $name = keys[i];
            namedRti[$name] = t1[$name].toRti$0();
          }
          result.named = namedRti;
        }
        return result;
      },
      toString$0: function(_) {
        var t1, t2, result, needsComma, i, type, keys, $name;
        t1 = this.parameterTypes;
        if (t1 != null)
          for (t2 = t1.length, result = "(", needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
            type = t1[i];
            if (needsComma)
              result += ", ";
            result += H.S(type);
          }
        else {
          result = "(";
          needsComma = false;
        }
        t1 = this.optionalParameterTypes;
        if (t1 != null && t1.length !== 0) {
          result = (needsComma ? result + ", " : result) + "[";
          for (t2 = t1.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
            type = t1[i];
            if (needsComma)
              result += ", ";
            result += H.S(type);
          }
          result += "]";
        } else {
          t1 = this.namedParameters;
          if (t1 != null) {
            result = (needsComma ? result + ", " : result) + "{";
            keys = H.extractKeys(t1);
            for (t2 = keys.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
              $name = keys[i];
              if (needsComma)
                result += ", ";
              result += H.S(t1[$name].toRti$0()) + " " + $name;
            }
            result += "}";
          }
        }
        return result + (") -> " + H.S(this.returnType));
      },
      static: {
        RuntimeFunctionType_listToRti: function(list) {
          var result, t1, i;
          list = list;
          result = [];
          for (t1 = list.length, i = 0; i < t1; ++i)
            result.push(list[i].toRti$0());
          return result;
        }
      }
    },
    DynamicRuntimeType: {
      "^": "RuntimeType;",
      toString$0: function(_) {
        return "dynamic";
      },
      toRti$0: function() {
        return;
      }
    },
    RuntimeTypePlain: {
      "^": "RuntimeType;_jsConstructorName",
      toRti$0: function() {
        var t1, rti;
        t1 = this._jsConstructorName;
        rti = H.jsConstructorNameToRti(t1);
        if (rti == null)
          throw H.wrapException("no type for '" + t1 + "'");
        return rti;
      },
      toString$0: function(_) {
        return this._jsConstructorName;
      }
    },
    RuntimeTypeGeneric: {
      "^": "RuntimeType;_jsConstructorName,$arguments,rti",
      toRti$0: function() {
        var t1, result, t2, _i;
        t1 = this.rti;
        if (t1 != null)
          return t1;
        t1 = this._jsConstructorName;
        result = [H.jsConstructorNameToRti(t1)];
        if (0 >= result.length)
          return H.ioore(result, 0);
        if (result[0] == null)
          throw H.wrapException("no type for '" + t1 + "<...>'");
        for (t1 = this.$arguments, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          result.push(t1[_i].toRti$0());
        this.rti = result;
        return result;
      },
      toString$0: function(_) {
        var t1 = this.$arguments;
        return this._jsConstructorName + "<" + (t1 && C.JSArray_methods).join$1(t1, ", ") + ">";
      }
    },
    UnimplementedNoSuchMethodError: {
      "^": "Error;_message",
      toString$0: function(_) {
        return "Unsupported operation: " + this._message;
      }
    },
    TypeImpl: {
      "^": "Object;_typeName<,_unmangledName",
      toString$0: function(_) {
        var t1, unmangledName;
        t1 = this._unmangledName;
        if (t1 != null)
          return t1;
        unmangledName = function(str, names) {
          return str.replace(/[^<,> ]+/g, function(m) {
            return names[m] || m;
          });
        }(this._typeName, init.mangledGlobalNames);
        this._unmangledName = unmangledName;
        return unmangledName;
      },
      get$hashCode: function(_) {
        return J.get$hashCode$(this._typeName);
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof H.TypeImpl && J.$eq$(this._typeName, other._typeName);
      },
      $isType: 1
    },
    JsLinkedHashMap: {
      "^": "Object;__js_helper$_length,_strings,_nums,_rest,_first,_last,_modifications",
      get$length: function(_) {
        return this.__js_helper$_length;
      },
      get$isEmpty: function(_) {
        return this.__js_helper$_length === 0;
      },
      get$isNotEmpty: function(_) {
        return !this.get$isEmpty(this);
      },
      get$keys: function(_) {
        return H.setRuntimeTypeInfo(new H.LinkedHashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
      },
      get$values: function(_) {
        return H.MappedIterable_MappedIterable(this.get$keys(this), new H.JsLinkedHashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
      },
      containsKey$1: function(_, key) {
        var strings, nums;
        if (typeof key === "string") {
          strings = this._strings;
          if (strings == null)
            return false;
          return this._containsTableEntry$2(strings, key);
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._nums;
          if (nums == null)
            return false;
          return this._containsTableEntry$2(nums, key);
        } else
          return this.internalContainsKey$1(key);
      },
      internalContainsKey$1: function(key) {
        var rest = this._rest;
        if (rest == null)
          return false;
        return this.internalFindBucketIndex$2(this._getTableBucket$2(rest, this.internalComputeHashCode$1(key)), key) >= 0;
      },
      addAll$1: function(_, other) {
        other._map.forEach$1(0, new H.JsLinkedHashMap_addAll_closure(this));
      },
      $index: function(_, key) {
        var strings, cell, nums;
        if (typeof key === "string") {
          strings = this._strings;
          if (strings == null)
            return;
          cell = this._getTableCell$2(strings, key);
          return cell == null ? null : cell.get$hashMapCellValue();
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._nums;
          if (nums == null)
            return;
          cell = this._getTableCell$2(nums, key);
          return cell == null ? null : cell.get$hashMapCellValue();
        } else
          return this.internalGet$1(key);
      },
      internalGet$1: function(key) {
        var rest, bucket, index;
        rest = this._rest;
        if (rest == null)
          return;
        bucket = this._getTableBucket$2(rest, this.internalComputeHashCode$1(key));
        index = this.internalFindBucketIndex$2(bucket, key);
        if (index < 0)
          return;
        return bucket[index].get$hashMapCellValue();
      },
      $indexSet: function(_, key, value) {
        var strings, nums;
        if (typeof key === "string") {
          strings = this._strings;
          if (strings == null) {
            strings = this._newHashTable$0();
            this._strings = strings;
          }
          this._addHashTableEntry$3(strings, key, value);
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._nums;
          if (nums == null) {
            nums = this._newHashTable$0();
            this._nums = nums;
          }
          this._addHashTableEntry$3(nums, key, value);
        } else
          this.internalSet$2(key, value);
      },
      internalSet$2: function(key, value) {
        var rest, hash, bucket, index;
        rest = this._rest;
        if (rest == null) {
          rest = this._newHashTable$0();
          this._rest = rest;
        }
        hash = this.internalComputeHashCode$1(key);
        bucket = this._getTableBucket$2(rest, hash);
        if (bucket == null)
          this._setTableEntry$3(rest, hash, [this._newLinkedCell$2(key, value)]);
        else {
          index = this.internalFindBucketIndex$2(bucket, key);
          if (index >= 0)
            bucket[index].set$hashMapCellValue(value);
          else
            bucket.push(this._newLinkedCell$2(key, value));
        }
      },
      putIfAbsent$2: function(_, key, ifAbsent) {
        var value;
        if (this.containsKey$1(0, key))
          return this.$index(0, key);
        value = ifAbsent.call$0();
        this.$indexSet(0, key, value);
        return value;
      },
      remove$1: function(_, key) {
        if (typeof key === "string")
          return this.__js_helper$_removeHashTableEntry$2(this._strings, key);
        else if (typeof key === "number" && (key & 0x3ffffff) === key)
          return this.__js_helper$_removeHashTableEntry$2(this._nums, key);
        else
          return this.internalRemove$1(key);
      },
      internalRemove$1: function(key) {
        var rest, bucket, index, cell;
        rest = this._rest;
        if (rest == null)
          return;
        bucket = this._getTableBucket$2(rest, this.internalComputeHashCode$1(key));
        index = this.internalFindBucketIndex$2(bucket, key);
        if (index < 0)
          return;
        cell = bucket.splice(index, 1)[0];
        this.__js_helper$_unlinkCell$1(cell);
        return cell.get$hashMapCellValue();
      },
      clear$0: function(_) {
        if (this.__js_helper$_length > 0) {
          this._last = null;
          this._first = null;
          this._rest = null;
          this._nums = null;
          this._strings = null;
          this.__js_helper$_length = 0;
          this._modifications = this._modifications + 1 & 67108863;
        }
      },
      forEach$1: function(_, action) {
        var cell, modifications;
        cell = this._first;
        modifications = this._modifications;
        for (; cell != null;) {
          action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
          if (modifications !== this._modifications)
            throw H.wrapException(new P.ConcurrentModificationError(this));
          cell = cell._next;
        }
      },
      _addHashTableEntry$3: function(table, key, value) {
        var cell = this._getTableCell$2(table, key);
        if (cell == null)
          this._setTableEntry$3(table, key, this._newLinkedCell$2(key, value));
        else
          cell.set$hashMapCellValue(value);
      },
      __js_helper$_removeHashTableEntry$2: function(table, key) {
        var cell;
        if (table == null)
          return;
        cell = this._getTableCell$2(table, key);
        if (cell == null)
          return;
        this.__js_helper$_unlinkCell$1(cell);
        this._deleteTableEntry$2(table, key);
        return cell.get$hashMapCellValue();
      },
      _newLinkedCell$2: function(key, value) {
        var cell, last;
        cell = H.setRuntimeTypeInfo(new H.LinkedHashMapCell(key, value, null, null), [null, null]);
        if (this._first == null) {
          this._last = cell;
          this._first = cell;
        } else {
          last = this._last;
          cell._previous = last;
          last._next = cell;
          this._last = cell;
        }
        ++this.__js_helper$_length;
        this._modifications = this._modifications + 1 & 67108863;
        return cell;
      },
      __js_helper$_unlinkCell$1: function(cell) {
        var previous, next;
        previous = cell.get$_previous();
        next = cell.get$_next();
        if (previous == null)
          this._first = next;
        else
          previous._next = next;
        if (next == null)
          this._last = previous;
        else
          next._previous = previous;
        --this.__js_helper$_length;
        this._modifications = this._modifications + 1 & 67108863;
      },
      internalComputeHashCode$1: function(key) {
        return J.get$hashCode$(key) & 0x3ffffff;
      },
      internalFindBucketIndex$2: function(bucket, key) {
        var $length, i;
        if (bucket == null)
          return -1;
        $length = bucket.length;
        for (i = 0; i < $length; ++i)
          if (J.$eq$(bucket[i].get$hashMapCellKey(), key))
            return i;
        return -1;
      },
      toString$0: function(_) {
        return P.Maps_mapToString(this);
      },
      _getTableCell$2: function(table, key) {
        return table[key];
      },
      _getTableBucket$2: function(table, key) {
        return table[key];
      },
      _setTableEntry$3: function(table, key, value) {
        table[key] = value;
      },
      _deleteTableEntry$2: function(table, key) {
        delete table[key];
      },
      _containsTableEntry$2: function(table, key) {
        return this._getTableCell$2(table, key) != null;
      },
      _newHashTable$0: function() {
        var table = Object.create(null);
        this._setTableEntry$3(table, "<non-identifier-key>", table);
        this._deleteTableEntry$2(table, "<non-identifier-key>");
        return table;
      },
      $isInternalMap: 1,
      $isMap: 1,
      $asMap: null,
      static: {
        JsLinkedHashMap_JsLinkedHashMap$es6: function($K, $V) {
          return H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [$K, $V]);
        }
      }
    },
    JsLinkedHashMap_values_closure: {
      "^": "Closure:1;$this",
      call$1: [function(each) {
        return this.$this.$index(0, each);
      }, null, null, 2, 0, null, 24, [], "call"]
    },
    JsLinkedHashMap_addAll_closure: {
      "^": "Closure;$this",
      call$2: function(key, value) {
        this.$this.$indexSet(0, key, value);
      },
      $signature: function() {
        return H.computeSignature(function(K, V) {
          return {func: 1, args: [K, V]};
        }, this.$this, "JsLinkedHashMap");
      }
    },
    LinkedHashMapCell: {
      "^": "Object;hashMapCellKey<,hashMapCellValue@,_next<,_previous<"
    },
    LinkedHashMapKeyIterable: {
      "^": "Iterable;__js_helper$_map",
      get$length: function(_) {
        return this.__js_helper$_map.__js_helper$_length;
      },
      get$isEmpty: function(_) {
        return this.__js_helper$_map.__js_helper$_length === 0;
      },
      get$iterator: function(_) {
        var t1, t2;
        t1 = this.__js_helper$_map;
        t2 = new H.LinkedHashMapKeyIterator(t1, t1._modifications, null, null);
        t2.$builtinTypeInfo = this.$builtinTypeInfo;
        t2.__js_helper$_cell = t1._first;
        return t2;
      },
      contains$1: function(_, element) {
        return this.__js_helper$_map.containsKey$1(0, element);
      },
      forEach$1: function(_, f) {
        var t1, cell, modifications;
        t1 = this.__js_helper$_map;
        cell = t1._first;
        modifications = t1._modifications;
        for (; cell != null;) {
          f.call$1(cell.hashMapCellKey);
          if (modifications !== t1._modifications)
            throw H.wrapException(new P.ConcurrentModificationError(t1));
          cell = cell._next;
        }
      },
      $isEfficientLength: 1
    },
    LinkedHashMapKeyIterator: {
      "^": "Object;__js_helper$_map,_modifications,__js_helper$_cell,__js_helper$_current",
      get$current: function() {
        return this.__js_helper$_current;
      },
      moveNext$0: function() {
        var t1 = this.__js_helper$_map;
        if (this._modifications !== t1._modifications)
          throw H.wrapException(new P.ConcurrentModificationError(t1));
        else {
          t1 = this.__js_helper$_cell;
          if (t1 == null) {
            this.__js_helper$_current = null;
            return false;
          } else {
            this.__js_helper$_current = t1.hashMapCellKey;
            this.__js_helper$_cell = t1._next;
            return true;
          }
        }
      }
    },
    initHooks_closure: {
      "^": "Closure:1;getTag",
      call$1: function(o) {
        return this.getTag(o);
      }
    },
    initHooks_closure0: {
      "^": "Closure:49;getUnknownTag",
      call$2: function(o, tag) {
        return this.getUnknownTag(o, tag);
      }
    },
    initHooks_closure1: {
      "^": "Closure:34;prototypeForTag",
      call$1: function(tag) {
        return this.prototypeForTag(tag);
      }
    },
    JSSyntaxRegExp: {
      "^": "Object;pattern,_nativeRegExp<,_nativeGlobalRegExp,_nativeAnchoredRegExp",
      toString$0: function(_) {
        return "RegExp/" + this.pattern + "/";
      },
      get$_nativeGlobalVersion: function() {
        var t1 = this._nativeGlobalRegExp;
        if (t1 != null)
          return t1;
        t1 = this._nativeRegExp;
        t1 = H.JSSyntaxRegExp_makeNative(this.pattern, t1.multiline, !t1.ignoreCase, true);
        this._nativeGlobalRegExp = t1;
        return t1;
      },
      get$_nativeAnchoredVersion: function() {
        var t1 = this._nativeAnchoredRegExp;
        if (t1 != null)
          return t1;
        t1 = this._nativeRegExp;
        t1 = H.JSSyntaxRegExp_makeNative(this.pattern + "|()", t1.multiline, !t1.ignoreCase, true);
        this._nativeAnchoredRegExp = t1;
        return t1;
      },
      firstMatch$1: function(string) {
        var m = this._nativeRegExp.exec(H.checkString(string));
        if (m == null)
          return;
        return new H._MatchImplementation(this, m);
      },
      allMatches$2: function(_, string, start) {
        H.checkString(string);
        H.checkInt(start);
        if (start > string.length)
          throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
        return new H._AllMatchesIterable(this, string, start);
      },
      allMatches$1: function($receiver, string) {
        return this.allMatches$2($receiver, string, 0);
      },
      _execGlobal$2: function(string, start) {
        var regexp, match;
        regexp = this.get$_nativeGlobalVersion();
        regexp.lastIndex = start;
        match = regexp.exec(string);
        if (match == null)
          return;
        return new H._MatchImplementation(this, match);
      },
      _execAnchored$2: function(string, start) {
        var regexp, match, t1, t2;
        regexp = this.get$_nativeAnchoredVersion();
        regexp.lastIndex = start;
        match = regexp.exec(string);
        if (match == null)
          return;
        t1 = match.length;
        t2 = t1 - 1;
        if (t2 < 0)
          return H.ioore(match, t2);
        if (match[t2] != null)
          return;
        C.JSArray_methods.set$length(match, t2);
        return new H._MatchImplementation(this, match);
      },
      matchAsPrefix$2: function(_, string, start) {
        var t1 = J.getInterceptor$n(start);
        if (t1.$lt(start, 0) || t1.$gt(start, string.length))
          throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
        return this._execAnchored$2(string, start);
      },
      $isRegExp: 1,
      static: {
        JSSyntaxRegExp_makeNative: function(source, multiLine, caseSensitive, global) {
          var m, i, g, regexp;
          H.checkString(source);
          m = multiLine ? "m" : "";
          i = caseSensitive ? "" : "i";
          g = global ? "g" : "";
          regexp = function(source, modifiers) {
            try {
              return new RegExp(source, modifiers);
            } catch (e) {
              return e;
            }
          }(source, m + i + g);
          if (regexp instanceof RegExp)
            return regexp;
          throw H.wrapException(new P.FormatException("Illegal RegExp pattern (" + String(regexp) + ")", source, null));
        }
      }
    },
    _MatchImplementation: {
      "^": "Object;pattern,_match",
      get$start: function(_) {
        return this._match.index;
      },
      get$end: function(_) {
        var t1, t2;
        t1 = this._match;
        t2 = t1.index;
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        t1 = J.get$length$asx(t1[0]);
        if (typeof t1 !== "number")
          return H.iae(t1);
        return t2 + t1;
      },
      $index: function(_, index) {
        var t1 = this._match;
        if (index >>> 0 !== index || index >= t1.length)
          return H.ioore(t1, index);
        return t1[index];
      }
    },
    _AllMatchesIterable: {
      "^": "IterableBase;_re,_string,_start",
      get$iterator: function(_) {
        return new H._AllMatchesIterator(this._re, this._string, this._start, null);
      },
      $asIterableBase: function() {
        return [P.Match];
      },
      $asIterable: function() {
        return [P.Match];
      }
    },
    _AllMatchesIterator: {
      "^": "Object;_regExp,_string,_nextIndex,__js_helper$_current",
      get$current: function() {
        return this.__js_helper$_current;
      },
      moveNext$0: function() {
        var t1, t2, match, t3, nextIndex;
        t1 = this._string;
        if (t1 == null)
          return false;
        t2 = this._nextIndex;
        if (t2 <= t1.length) {
          match = this._regExp._execGlobal$2(t1, t2);
          if (match != null) {
            this.__js_helper$_current = match;
            t1 = match._match;
            t2 = t1.index;
            if (0 >= t1.length)
              return H.ioore(t1, 0);
            t3 = J.get$length$asx(t1[0]);
            if (typeof t3 !== "number")
              return H.iae(t3);
            nextIndex = t2 + t3;
            this._nextIndex = t1.index === nextIndex ? nextIndex + 1 : nextIndex;
            return true;
          }
        }
        this.__js_helper$_current = null;
        this._string = null;
        return false;
      }
    },
    StringMatch: {
      "^": "Object;start>,input,pattern",
      get$end: function(_) {
        return J.$add$ns(this.start, this.pattern.length);
      },
      $index: function(_, g) {
        if (!J.$eq$(g, 0))
          H.throwExpression(P.RangeError$value(g, null, null));
        return this.pattern;
      }
    },
    _StringAllMatchesIterable: {
      "^": "Iterable;_input,_pattern,__js_helper$_index",
      get$iterator: function(_) {
        return new H._StringAllMatchesIterator(this._input, this._pattern, this.__js_helper$_index, null);
      },
      $asIterable: function() {
        return [P.Match];
      }
    },
    _StringAllMatchesIterator: {
      "^": "Object;_input,_pattern,__js_helper$_index,__js_helper$_current",
      moveNext$0: function() {
        var t1, t2, t3, t4, t5, index, end;
        t1 = this.__js_helper$_index;
        t2 = this._pattern;
        t3 = t2.length;
        t4 = this._input;
        t5 = t4.length;
        if (t1 + t3 > t5) {
          this.__js_helper$_current = null;
          return false;
        }
        index = t4.indexOf(t2, t1);
        if (index < 0) {
          this.__js_helper$_index = t5 + 1;
          this.__js_helper$_current = null;
          return false;
        }
        end = index + t3;
        this.__js_helper$_current = new H.StringMatch(index, t4, t2);
        this.__js_helper$_index = end === this.__js_helper$_index ? end + 1 : end;
        return true;
      },
      get$current: function() {
        return this.__js_helper$_current;
      }
    }
  }], ["dart._js_mirrors", "dart:_js_mirrors",, H, {
    "^": "",
    n: function(symbol) {
      return symbol.get$__internal$_name();
    },
    s: function($name) {
      if ($name == null)
        return;
      return new H.Symbol0($name);
    },
    reflect: [function(reflectee) {
      if (reflectee instanceof H.Closure)
        return new H.JsClosureMirror(reflectee, 4);
      else
        return new H.JsInstanceMirror(reflectee, 4);
    }, null, null, 2, 0, null, 25, []],
    reflectClassByMangledName: function(mangledName) {
      var result, unmangledName, t1;
      result = $.$get$mangledGlobalNames()._jsMangledNames[mangledName];
      unmangledName = typeof result !== "string" ? null : result;
      t1 = J.getInterceptor(mangledName);
      if (t1.$eq(mangledName, "dynamic"))
        return $.$get$JsMirrorSystem__dynamicType();
      if (t1.$eq(mangledName, "void"))
        return $.$get$JsMirrorSystem__voidType();
      return H.reflectClassByName(H.s(unmangledName == null ? mangledName : unmangledName), mangledName);
    },
    reflectClassByName: function(symbol, mangledName) {
      var t1, mirror, typeArgIndex, originalDeclaration, $constructor, descriptor, fields, fieldsMetadata, mixins, classMirror, typeVariables, typeArguments, i;
      t1 = $.classMirrors;
      if (t1 == null) {
        t1 = H.JsCache_allocate();
        $.classMirrors = t1;
      }
      mirror = t1[mangledName];
      if (mirror != null)
        return mirror;
      t1 = J.getInterceptor$asx(mangledName);
      typeArgIndex = t1.indexOf$1(mangledName, "<");
      if (typeArgIndex !== -1) {
        originalDeclaration = H.reflectClassByMangledName(t1.substring$2(mangledName, 0, typeArgIndex)).get$originalDeclaration();
        if (!!originalDeclaration.$isJsTypedefMirror)
          throw H.wrapException(new P.UnimplementedError(null));
        mirror = new H.JsTypeBoundClassMirror(originalDeclaration, t1.substring$2(mangledName, typeArgIndex + 1, J.$sub$n(t1.get$length(mangledName), 1)), null, null, null, null, null, null, null, null, null, null, null, null, null, originalDeclaration.get$simpleName());
        $.classMirrors[mangledName] = mirror;
        return mirror;
      }
      $constructor = init.allClasses[mangledName];
      if ($constructor == null)
        throw H.wrapException(new P.UnsupportedError("Cannot find class for: " + H.S(H.n(symbol))));
      descriptor = $constructor["@"];
      if (descriptor == null) {
        fields = null;
        fieldsMetadata = null;
      } else if ("$$isTypedef" in descriptor) {
        mirror = new H.JsTypedefMirror(mangledName, null, symbol);
        mirror.referent = new H.JsFunctionTypeMirror(init.types[descriptor.$typedefType], null, null, null, mirror);
        fields = null;
        fieldsMetadata = null;
      } else {
        fields = descriptor["^"];
        t1 = J.getInterceptor(fields);
        if (!!t1.$isList) {
          fieldsMetadata = t1.getRange$2(fields, 1, t1.get$length(fields)).toList$0(0);
          fields = t1.$index(fields, 0);
        } else
          fieldsMetadata = null;
        if (typeof fields !== "string")
          fields = "";
      }
      if (mirror == null) {
        t1 = J.split$1$s(fields, ";");
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        mixins = J.split$1$s(t1[0], "+");
        if (mixins.length > 1 && $.$get$mangledGlobalNames().$index(0, mangledName) == null)
          mirror = H.reflectMixinApplication(mixins, mangledName);
        else {
          classMirror = new H.JsClassMirror(mangledName, $constructor, fields, fieldsMetadata, H.JsCache_allocate(), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, symbol);
          typeVariables = $constructor.prototype["<>"];
          if (typeVariables == null || typeVariables.length === 0)
            mirror = classMirror;
          else {
            for (t1 = typeVariables.length, typeArguments = "dynamic", i = 1; i < t1; ++i)
              typeArguments += ",dynamic";
            mirror = new H.JsTypeBoundClassMirror(classMirror, typeArguments, null, null, null, null, null, null, null, null, null, null, null, null, null, classMirror.simpleName);
          }
        }
      }
      $.classMirrors[mangledName] = mirror;
      return mirror;
    },
    filterConstructors: function(methods) {
      var result, t1, _i, method;
      result = H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [null, null]);
      for (t1 = methods.length, _i = 0; _i < methods.length; methods.length === t1 || (0, H.throwConcurrentModificationError)(methods), ++_i) {
        method = methods[_i];
        if (method.get$isConstructor())
          result.$indexSet(0, method.get$simpleName(), method);
      }
      return result;
    },
    filterMembers: function(methods, variables) {
      var result, t1, _i, method, $name, t2;
      result = P.LinkedHashMap_LinkedHashMap$from(variables, null, null);
      for (t1 = methods.length, _i = 0; _i < methods.length; methods.length === t1 || (0, H.throwConcurrentModificationError)(methods), ++_i) {
        method = methods[_i];
        if (method.get$isSetter()) {
          $name = method.get$simpleName().__internal$_name;
          t2 = J.getInterceptor$asx($name);
          if (!!J.getInterceptor(result.$index(0, H.s(t2.substring$2($name, 0, J.$sub$n(t2.get$length($name), 1))))).$isVariableMirror)
            continue;
        }
        if (method.get$isConstructor())
          continue;
        if (!!method.get$_jsFunction().$getterStub)
          continue;
        result.putIfAbsent$2(0, method.get$simpleName(), new H.filterMembers_closure(method));
      }
      return result;
    },
    reflectMixinApplication: function(mixinNames, mangledName) {
      var mixins, t1, _i, it, superclass;
      mixins = [];
      for (t1 = mixinNames.length, _i = 0; _i < mixinNames.length; mixinNames.length === t1 || (0, H.throwConcurrentModificationError)(mixinNames), ++_i)
        mixins.push(H.reflectClassByMangledName(mixinNames[_i]));
      it = H.setRuntimeTypeInfo(new J.ArrayIterator(mixins, mixins.length, 0, null), [H.getTypeArgumentByIndex(mixins, 0)]);
      it.moveNext$0();
      superclass = it.__interceptors$_current;
      for (; it.moveNext$0();)
        superclass = new H.JsMixinApplication(superclass, it.__interceptors$_current, null, null, H.s(mangledName));
      return superclass;
    },
    findTypeVariableIndex: function(typeVariables, $name) {
      var t1, i, t2;
      t1 = J.getInterceptor$asx(typeVariables);
      i = 0;
      while (true) {
        t2 = t1.get$length(typeVariables);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        if (J.$eq$(t1.$index(typeVariables, i).get$simpleName(), H.s($name)))
          return i;
        ++i;
      }
      throw H.wrapException(P.ArgumentError$("Type variable not present in list."));
    },
    typeMirrorFromRuntimeTypeRepresentation: function(owner, type) {
      var t1, context, t2, representation, typeVariable, typeVariables, typeArgument;
      t1 = {};
      t1.ownerClass = null;
      for (context = owner; context != null;) {
        t2 = J.getInterceptor(context);
        if (!!t2.$isClassMirror) {
          t1.ownerClass = context;
          break;
        }
        if (!!t2.$isTypedefMirror)
          break;
        context = context.get$owner();
      }
      if (type == null)
        return $.$get$JsMirrorSystem__dynamicType();
      else if (type instanceof H.TypeImpl)
        return H.reflectClassByMangledName(type._typeName);
      else {
        t2 = t1.ownerClass;
        if (t2 == null)
          representation = H.runtimeTypeToString(type, null);
        else if (t2.get$isOriginalDeclaration())
          if (typeof type === "number") {
            typeVariable = init.metadata[type];
            typeVariables = t1.ownerClass.get$typeVariables();
            return J.$index$asx(typeVariables, H.findTypeVariableIndex(typeVariables, J.get$name$x(typeVariable)));
          } else
            representation = H.runtimeTypeToString(type, null);
        else {
          t1 = new H.typeMirrorFromRuntimeTypeRepresentation_getTypeArgument(t1);
          if (typeof type === "number") {
            typeArgument = t1.call$1(type);
            if (typeArgument instanceof H.JsTypeVariableMirror)
              return typeArgument;
          }
          representation = H.runtimeTypeToString(type, new H.typeMirrorFromRuntimeTypeRepresentation_substituteTypeVariable(t1));
        }
      }
      if (representation != null)
        return H.reflectClassByMangledName(representation);
      if (type.typedef != null)
        return H.typeMirrorFromRuntimeTypeRepresentation(owner, type.typedef);
      else if ('func' in type)
        return new H.JsFunctionTypeMirror(type, null, null, null, owner);
      return P.reflectClass(C.Type_Function_3bx);
    },
    computeQualifiedName: function(owner, simpleName) {
      if (owner == null)
        return simpleName;
      return H.s(H.S(owner.get$qualifiedName().__internal$_name) + "." + H.S(simpleName.__internal$_name));
    },
    parseCompactFieldSpecification: function(owner, fieldSpecification, isStatic, result) {
      var t1, fields, fieldsMetadata, t2, fieldNumber, _i, field, fieldNumber0, metadata, mirror;
      t1 = J.getInterceptor(fieldSpecification);
      if (!!t1.$isList) {
        fields = H.splitFields(t1.$index(fieldSpecification, 0), ",");
        fieldsMetadata = t1.sublist$1(fieldSpecification, 1);
      } else {
        fields = typeof fieldSpecification === "string" ? H.splitFields(fieldSpecification, ",") : [];
        fieldsMetadata = null;
      }
      for (t1 = fields.length, t2 = fieldsMetadata != null, fieldNumber = 0, _i = 0; _i < fields.length; fields.length === t1 || (0, H.throwConcurrentModificationError)(fields), ++_i) {
        field = fields[_i];
        if (t2) {
          fieldNumber0 = fieldNumber + 1;
          if (fieldNumber >= fieldsMetadata.length)
            return H.ioore(fieldsMetadata, fieldNumber);
          metadata = fieldsMetadata[fieldNumber];
          fieldNumber = fieldNumber0;
        } else
          metadata = null;
        mirror = H.JsVariableMirror_JsVariableMirror$from(field, metadata, owner, isStatic);
        if (mirror != null)
          result.push(mirror);
      }
    },
    splitFields: function(string, pattern) {
      var t1 = J.getInterceptor$asx(string);
      if (t1.get$isEmpty(string) === true)
        return H.setRuntimeTypeInfo([], [P.String]);
      return t1.split$1(string, pattern);
    },
    isOperatorName: function($name) {
      switch ($name) {
        case "==":
        case "[]":
        case "*":
        case "/":
        case "%":
        case "~/":
        case "+":
        case "<<":
        case ">>":
        case ">=":
        case ">":
        case "<=":
        case "<":
        case "&":
        case "^":
        case "|":
        case "-":
        case "unary-":
        case "[]=":
        case "~":
          return true;
        default:
          return false;
      }
    },
    isReflectiveDataInPrototype: function(key) {
      var t1, firstChar;
      t1 = J.getInterceptor(key);
      if (t1.$eq(key, "^") || t1.$eq(key, "$methodsWithOptionalArguments"))
        return true;
      firstChar = t1.$index(key, 0);
      t1 = J.getInterceptor(firstChar);
      return t1.$eq(firstChar, "*") || t1.$eq(firstChar, "+");
    },
    JsMirrorSystem: {
      "^": "Object;_cachedLibraries,isolate",
      static: {
        JsMirrorSystem_librariesByName: function() {
          var t1 = $.JsMirrorSystem__librariesByName;
          if (t1 == null) {
            t1 = H.JsMirrorSystem_computeLibrariesByName();
            $.JsMirrorSystem__librariesByName = t1;
            if (!$.JsMirrorSystem__hasInstalledDeferredLoadHook) {
              $.JsMirrorSystem__hasInstalledDeferredLoadHook = true;
              $.deferredLoadHook = new H.JsMirrorSystem_librariesByName_closure();
            }
          }
          return t1;
        },
        JsMirrorSystem_computeLibrariesByName: function() {
          var result, jsLibraries, t1, _i, data, t2, $name, uriString, uri, classes, functions, metadataFunction, fields, isRoot, globalObject, metadata;
          result = H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [P.String, [P.List, P.LibraryMirror]]);
          jsLibraries = init.libraries;
          if (jsLibraries == null)
            return result;
          for (t1 = jsLibraries.length, _i = 0; _i < jsLibraries.length; jsLibraries.length === t1 || (0, H.throwConcurrentModificationError)(jsLibraries), ++_i) {
            data = jsLibraries[_i];
            t2 = J.getInterceptor$asx(data);
            $name = t2.$index(data, 0);
            uriString = t2.$index(data, 1);
            uri = !J.$eq$(uriString, "") ? P.Uri_parse(uriString, 0, null) : P._Uri__Uri(null, "dartlang.org", "dart2js-stripped-uri", null, null, null, P.LinkedHashMap__makeLiteral(["lib", $name]), "https", null);
            classes = t2.$index(data, 2);
            functions = t2.$index(data, 3);
            metadataFunction = t2.$index(data, 4);
            fields = t2.$index(data, 5);
            isRoot = t2.$index(data, 6);
            globalObject = t2.$index(data, 7);
            metadata = metadataFunction == null ? C.List_empty : metadataFunction();
            J.add$1$ax(result.putIfAbsent$2(0, $name, new H.JsMirrorSystem_computeLibrariesByName_closure()), new H.JsLibraryMirror(uri, classes, functions, metadata, fields, isRoot, globalObject, null, null, null, null, null, null, null, null, null, null, H.s($name)));
          }
          return result;
        }
      }
    },
    JsMirrorSystem_librariesByName_closure: {
      "^": "Closure:4;",
      call$0: function() {
        $.JsMirrorSystem__librariesByName = null;
        return;
      }
    },
    JsMirrorSystem_computeLibrariesByName_closure: {
      "^": "Closure:4;",
      call$0: function() {
        return H.setRuntimeTypeInfo([], [P.LibraryMirror]);
      }
    },
    JsMirror: {
      "^": "Object;",
      toString$0: function(_) {
        return this.get$_prettyName();
      }
    },
    JsIsolateMirror: {
      "^": "JsMirror;_isolateContext",
      get$_prettyName: function() {
        return "Isolate";
      }
    },
    JsDeclarationMirror: {
      "^": "JsMirror;simpleName<",
      get$qualifiedName: function() {
        return H.computeQualifiedName(this.get$owner(), this.get$simpleName());
      },
      toString$0: function(_) {
        return this.get$_prettyName() + " on '" + H.S(this.get$simpleName().__internal$_name) + "'";
      },
      get$location: function(_) {
        return H.throwExpression(new P.UnimplementedError(null));
      }
    },
    JsTypeVariableMirror: {
      "^": "JsTypeMirror;owner<,_typeVariable,_metadataIndex,_cachedUpperBound,simpleName",
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof H.JsTypeVariableMirror && J.$eq$(this.simpleName, other.simpleName) && this.owner.$eq(0, other.owner);
      },
      get$hashCode: function(_) {
        var t1, t2;
        t1 = J.get$hashCode$(C.Type_JsTypeVariableMirror_gT2._typeName);
        if (typeof t1 !== "number")
          return H.iae(t1);
        t2 = this.owner;
        return (1073741823 & t1 ^ 17 * J.get$hashCode$(this.simpleName) ^ 19 * t2.get$hashCode(t2)) >>> 0;
      },
      get$_prettyName: function() {
        return "TypeVariableMirror";
      }
    },
    JsTypeMirror: {
      "^": "JsDeclarationMirror;simpleName",
      get$_prettyName: function() {
        return "TypeMirror";
      },
      get$owner: function() {
        return;
      },
      get$typeVariables: function() {
        return C.List_empty1;
      },
      get$typeArguments: function() {
        return C.List_empty0;
      },
      get$isOriginalDeclaration: function() {
        return true;
      },
      get$originalDeclaration: function() {
        return this;
      },
      static: {
        JsTypeMirror$: function(simpleName) {
          return new H.JsTypeMirror(simpleName);
        }
      }
    },
    JsLibraryMirror: {
      "^": "JsDeclarationMirror_JsObjectMirror;__js_mirrors$_uri,_classes,_functions,_metadata,_compactFieldSpecification,_isRoot,_globalObject,_cachedFunctionMirrors,_cachedFields,_cachedClasses,_cachedFunctions,_cachedGetters,_cachedSetters,_cachedVariables,_cachedMembers,_cachedDeclarations,_cachedMetadata,simpleName",
      get$_prettyName: function() {
        return "LibraryMirror";
      },
      get$qualifiedName: function() {
        return this.simpleName;
      },
      get$_methods: function() {
        return this.get$_functionMirrors();
      },
      get$__classes: function() {
        var t1, result, cls, t2;
        t1 = this._cachedClasses;
        if (t1 != null)
          return t1;
        result = H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [null, null]);
        for (t1 = J.get$iterator$ax(this._classes); t1.moveNext$0();) {
          cls = H.reflectClassByMangledName(t1.get$current());
          if (!!J.getInterceptor(cls).$isClassMirror)
            cls = cls.get$originalDeclaration();
          t2 = J.getInterceptor(cls);
          if (!!t2.$isJsClassMirror) {
            result.$indexSet(0, cls.simpleName, cls);
            cls._owner = this;
          } else if (!!t2.$isJsTypedefMirror)
            result.$indexSet(0, cls.simpleName, cls);
        }
        t1 = H.setRuntimeTypeInfo(new P.UnmodifiableMapView(result), [P.Symbol, P.ClassMirror]);
        this._cachedClasses = t1;
        return t1;
      },
      get$_functionMirrors: function() {
        var t1, result, t2, t3, i, t4, $name, jsFunction, result0, unmangledName, isConstructor, mirror;
        t1 = this._cachedFunctionMirrors;
        if (t1 != null)
          return t1;
        result = H.setRuntimeTypeInfo([], [H.JsMethodMirror]);
        t1 = this._functions;
        t2 = J.getInterceptor$asx(t1);
        t3 = this._globalObject;
        i = 0;
        while (true) {
          t4 = t2.get$length(t1);
          if (typeof t4 !== "number")
            return H.iae(t4);
          if (!(i < t4))
            break;
          c$0: {
            $name = t2.$index(t1, i);
            jsFunction = t3[$name];
            result0 = $.$get$mangledGlobalNames()._jsMangledNames[$name];
            unmangledName = typeof result0 !== "string" ? null : result0;
            if (unmangledName == null || !!jsFunction.$getterStub)
              break c$0;
            isConstructor = J.getInterceptor$s(unmangledName).startsWith$1(unmangledName, "new ");
            if (isConstructor) {
              t4 = C.JSString_methods.substring$1(unmangledName, 4);
              unmangledName = H.stringReplaceAllUnchecked(t4, "$", ".");
            }
            mirror = H.JsMethodMirror_JsMethodMirror$fromUnmangledName(unmangledName, jsFunction, !isConstructor, isConstructor);
            result.push(mirror);
            mirror._owner = this;
          }
          ++i;
        }
        this._cachedFunctionMirrors = result;
        return result;
      },
      get$_fields: function() {
        var t1, result;
        t1 = this._cachedFields;
        if (t1 != null)
          return t1;
        result = H.setRuntimeTypeInfo([], [P.VariableMirror]);
        H.parseCompactFieldSpecification(this, this._compactFieldSpecification, true, result);
        this._cachedFields = result;
        return result;
      },
      get$__functions: function() {
        var t1, result, t2, _i, mirror;
        t1 = this._cachedFunctions;
        if (t1 != null)
          return t1;
        result = H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [null, null]);
        for (t1 = this.get$_functionMirrors(), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          mirror = t1[_i];
          if (!mirror.isConstructor)
            result.$indexSet(0, mirror.simpleName, mirror);
        }
        t1 = H.setRuntimeTypeInfo(new P.UnmodifiableMapView(result), [P.Symbol, P.MethodMirror]);
        this._cachedFunctions = t1;
        return t1;
      },
      get$__getters: function() {
        var t1 = this._cachedGetters;
        if (t1 != null)
          return t1;
        t1 = H.setRuntimeTypeInfo(new P.UnmodifiableMapView(H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [null, null])), [P.Symbol, P.MethodMirror]);
        this._cachedGetters = t1;
        return t1;
      },
      get$__setters: function() {
        var t1 = this._cachedSetters;
        if (t1 != null)
          return t1;
        t1 = H.setRuntimeTypeInfo(new P.UnmodifiableMapView(H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [null, null])), [P.Symbol, P.MethodMirror]);
        this._cachedSetters = t1;
        return t1;
      },
      get$__variables: function() {
        var t1, result, t2, _i, mirror;
        t1 = this._cachedVariables;
        if (t1 != null)
          return t1;
        result = H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [null, null]);
        for (t1 = this.get$_fields(), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          mirror = t1[_i];
          result.$indexSet(0, mirror.simpleName, mirror);
        }
        t1 = H.setRuntimeTypeInfo(new P.UnmodifiableMapView(result), [P.Symbol, P.VariableMirror]);
        this._cachedVariables = t1;
        return t1;
      },
      get$__members: function() {
        var t1, result;
        t1 = this._cachedMembers;
        if (t1 != null)
          return t1;
        result = P.LinkedHashMap_LinkedHashMap$from(this.get$__classes(), null, null);
        t1 = new H.JsLibraryMirror___members_addToResult(result);
        this.get$__functions()._map.forEach$1(0, t1);
        this.get$__getters()._map.forEach$1(0, t1);
        this.get$__setters()._map.forEach$1(0, t1);
        this.get$__variables()._map.forEach$1(0, t1);
        t1 = H.setRuntimeTypeInfo(new P.UnmodifiableMapView(result), [P.Symbol, P.Mirror]);
        this._cachedMembers = t1;
        return t1;
      },
      get$declarations: function() {
        var t1, result;
        t1 = this._cachedDeclarations;
        if (t1 != null)
          return t1;
        result = H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [P.Symbol, P.DeclarationMirror]);
        this.get$__members()._map.forEach$1(0, new H.JsLibraryMirror_declarations_addToResult(result));
        t1 = H.setRuntimeTypeInfo(new P.UnmodifiableMapView(result), [P.Symbol, P.DeclarationMirror]);
        this._cachedDeclarations = t1;
        return t1;
      },
      get$owner: function() {
        return;
      }
    },
    JsDeclarationMirror_JsObjectMirror: {
      "^": "JsDeclarationMirror+JsObjectMirror;"
    },
    JsLibraryMirror___members_addToResult: {
      "^": "Closure:16;result",
      call$2: function(key, value) {
        this.result.$indexSet(0, key, value);
      }
    },
    JsLibraryMirror_declarations_addToResult: {
      "^": "Closure:16;result",
      call$2: function(key, value) {
        this.result.$indexSet(0, key, value);
      }
    },
    filterMembers_closure: {
      "^": "Closure:4;method",
      call$0: function() {
        return this.method;
      }
    },
    JsMixinApplication: {
      "^": "JsTypeMirror_JsObjectMirror;superclass<,mixin,_cachedSimpleName,_cachedInstanceMembers,simpleName",
      get$_prettyName: function() {
        return "ClassMirror";
      },
      get$simpleName: function() {
        var t1, superName;
        t1 = this._cachedSimpleName;
        if (t1 != null)
          return t1;
        superName = this.superclass.get$qualifiedName().__internal$_name;
        t1 = this.mixin;
        t1 = J.contains$1$asx(superName, " with ") === true ? H.s(H.S(superName) + ", " + H.S(t1.get$qualifiedName().__internal$_name)) : H.s(H.S(superName) + " with " + H.S(t1.get$qualifiedName().__internal$_name));
        this._cachedSimpleName = t1;
        return t1;
      },
      get$qualifiedName: function() {
        return this.get$simpleName();
      },
      get$declarations: function() {
        return this.mixin.get$declarations();
      },
      get$isOriginalDeclaration: function() {
        return true;
      },
      get$originalDeclaration: function() {
        return this;
      },
      get$typeVariables: function() {
        throw H.wrapException(new P.UnimplementedError(null));
      },
      get$typeArguments: function() {
        return C.List_empty0;
      },
      $isClassMirror: 1
    },
    JsTypeMirror_JsObjectMirror: {
      "^": "JsTypeMirror+JsObjectMirror;"
    },
    JsObjectMirror: {
      "^": "Object;"
    },
    JsInstanceMirror: {
      "^": "JsObjectMirror;reflectee,_getterCache",
      get$type: function(_) {
        var t1 = this.reflectee;
        if (t1 == null)
          return P.reflectClass(C.Type_Null_Yyn);
        return H.reflectClassByMangledName(H.getRuntimeTypeString(t1));
      },
      invoke$3: function(memberName, positionalArguments, namedArguments) {
        return this._invoke$4(memberName, 0, positionalArguments, namedArguments);
      },
      _invokeMethodWithNamedArguments$3: function(reflectiveName, positionalArguments, namedArguments) {
        var t1, jsFunction, info, t2, defaultArguments, t3, i, t4;
        t1 = this.reflectee;
        jsFunction = J.getInterceptor(t1)[reflectiveName];
        if (jsFunction == null)
          throw H.wrapException(new H.UnimplementedNoSuchMethodError("Invoking noSuchMethod with named arguments not implemented"));
        info = H.ReflectionInfo_ReflectionInfo(jsFunction);
        positionalArguments = P.List_List$from(positionalArguments, true, null);
        t2 = info.requiredParameterCount;
        if (t2 !== positionalArguments.length)
          throw H.wrapException(new H.UnimplementedNoSuchMethodError("Invoking noSuchMethod with named arguments not implemented"));
        defaultArguments = H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [null, null]);
        for (t3 = info.optionalParameterCount, i = 0; i < t3; ++i) {
          t4 = i + t2;
          defaultArguments.$indexSet(0, info.parameterName$1(t4), init.metadata[info.defaultValue$1(0, t4)]);
        }
        namedArguments.forEach$1(0, new H.JsInstanceMirror__invokeMethodWithNamedArguments_closure(defaultArguments));
        C.JSArray_methods.addAll$1(positionalArguments, defaultArguments.get$values(defaultArguments));
        return H.reflect(jsFunction.apply(t1, positionalArguments));
      },
      get$_classInvocationCache: function() {
        var cacheName, cacheHolder, cache;
        cacheName = $.Primitives_mirrorInvokeCacheName;
        cacheHolder = this.reflectee;
        if (cacheHolder == null)
          cacheHolder = J.getInterceptor(null);
        cache = cacheHolder.constructor[cacheName];
        if (cache == null) {
          cache = H.JsCache_allocate();
          cacheHolder.constructor[cacheName] = cache;
        }
        return cache;
      },
      _computeReflectiveName$4: function(symbolName, type, positionalArguments, namedArguments) {
        var $name, nbArgs;
        $name = symbolName.__internal$_name;
        switch (type) {
          case 1:
            return $name;
          case 2:
            return H.S($name) + "=";
          case 0:
            if (namedArguments.get$isNotEmpty(namedArguments))
              return H.S($name) + "*";
            nbArgs = positionalArguments.length;
            return H.S($name) + ":" + nbArgs;
        }
        throw H.wrapException(new H.RuntimeError("Could not compute reflective name for " + H.S($name)));
      },
      _getCachedInvocation$5: function($name, type, reflectiveName, positionalArguments, namedArguments) {
        var cache, cacheEntry;
        cache = this.get$_classInvocationCache();
        cacheEntry = cache[reflectiveName];
        if (cacheEntry == null) {
          cacheEntry = new H.JSInvocationMirror($name, $.$get$reflectiveNames().$index(0, reflectiveName), type, positionalArguments, C.List_empty, null).__js_helper$_getCachedInvocation$1(this.reflectee);
          cache[reflectiveName] = cacheEntry;
        }
        return cacheEntry;
      },
      _invoke$4: function($name, type, positionalArguments, namedArguments) {
        var reflectiveName, cacheEntry, t1, getterCacheEntry;
        reflectiveName = this._computeReflectiveName$4($name, type, positionalArguments, namedArguments);
        if (namedArguments.get$isNotEmpty(namedArguments))
          return this._invokeMethodWithNamedArguments$3(reflectiveName, positionalArguments, namedArguments);
        cacheEntry = this._getCachedInvocation$5($name, type, reflectiveName, positionalArguments, namedArguments);
        if (!cacheEntry.get$isNoSuchMethod())
          t1 = !("$reflectable" in cacheEntry.get$jsFunction() || this.reflectee instanceof H.TearOffClosure);
        else
          t1 = true;
        if (t1) {
          if (type === 0) {
            getterCacheEntry = this._getCachedInvocation$5($name, 1, this._computeReflectiveName$4($name, 1, C.List_empty, C.Map_empty), C.List_empty, C.Map_empty);
            t1 = !getterCacheEntry.get$isNoSuchMethod() && !getterCacheEntry.get$isGetterStub();
          } else
            t1 = false;
          if (t1)
            return this.getField$1($name).invoke$3(C.Symbol_call, positionalArguments, namedArguments);
          if (type === 2)
            $name = H.s(H.S($name.__internal$_name) + "=");
          if (!cacheEntry.get$isNoSuchMethod())
            H.throwInvalidReflectionError(reflectiveName);
          return H.reflect(cacheEntry.invokeOn$2(this.reflectee, new H.JSInvocationMirror($name, $.$get$reflectiveNames().$index(0, reflectiveName), type, positionalArguments, [], null)));
        } else
          return H.reflect(cacheEntry.invokeOn$2(this.reflectee, positionalArguments));
      },
      getField$1: function(fieldName) {
        var cache, getter, value, result;
        $FASTPATH$0: {
          cache = this._getterCache;
          if (typeof cache == "number" || typeof fieldName.$p == "undefined")
            break $FASTPATH$0;
          getter = fieldName.$p(cache);
          if (typeof getter == "undefined")
            break $FASTPATH$0;
          value = getter(this.reflectee);
          if (value === getter.v)
            return getter.m;
          else {
            result = H.reflect(value);
            getter.v = value;
            getter.m = result;
            return result;
          }
        }
        return this._getFieldSlow$1(fieldName);
      },
      _getFieldSlow$1: function(fieldName) {
        var result, $name, cacheEntry, cache, mangledName, getter;
        result = this._invoke$4(fieldName, 1, C.List_empty, C.Map_empty);
        $name = fieldName.__internal$_name;
        cacheEntry = this.get$_classInvocationCache()[$name];
        if (cacheEntry.get$isNoSuchMethod())
          return result;
        cache = this._getterCache;
        if (typeof cache == "number") {
          cache = J.$sub$n(cache, 1);
          this._getterCache = cache;
          if (!J.$eq$(cache, 0))
            return result;
          cache = Object.create(null);
          this._getterCache = cache;
        }
        if (typeof fieldName.$p == "undefined")
          fieldName.$p = this._newProbeFn$2($name, true);
        mangledName = cacheEntry.get$mangledName();
        getter = cacheEntry.get$isIntercepted() ? this._newInterceptedGetterFn$2(mangledName, true) : this._newGetterFn$2(mangledName, true);
        cache[$name] = getter;
        getter.v = getter.m = cache;
        return result;
      },
      _newProbeFn$2: function(id, useEval) {
        if (useEval)
          return new Function("c", "return c." + H.S(id) + ";");
        else
          return function(n) {
            return function(c) {
              return c[n];
            };
          }(id);
      },
      _newGetterFn$2: function($name, useEval) {
        if (!useEval)
          return function(n) {
            return function(o) {
              return o[n]();
            };
          }($name);
        return new Function("o", "/* " + this.reflectee.constructor.name + " */ return o." + H.S($name) + "();");
      },
      _newInterceptedGetterFn$2: function($name, useEval) {
        var interceptor, functionName;
        interceptor = J.getInterceptor(this.reflectee);
        if (!useEval)
          return function(n, i) {
            return function(o) {
              return i[n](o);
            };
          }($name, interceptor);
        functionName = interceptor.constructor.name + "$" + H.S($name);
        return new Function("i", "  function " + functionName + "(o){return i." + H.S($name) + "(o)}  return " + functionName + ";")(interceptor);
      },
      $eq: function(_, other) {
        var t1, t2;
        if (other == null)
          return false;
        if (other instanceof H.JsInstanceMirror) {
          t1 = this.reflectee;
          t2 = other.reflectee;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        return t1;
      },
      get$hashCode: function(_) {
        return J.$xor$n(H.objectHashCode(this.reflectee), 909522486);
      },
      toString$0: function(_) {
        return "InstanceMirror on " + H.S(P.Error_safeToString(this.reflectee));
      }
    },
    JsInstanceMirror__invokeMethodWithNamedArguments_closure: {
      "^": "Closure:27;defaultArguments",
      call$2: function(symbol, value) {
        var parameter, t1;
        parameter = symbol.get$__internal$_name();
        t1 = this.defaultArguments;
        if (t1.containsKey$1(0, parameter))
          t1.$indexSet(0, parameter, value);
        else
          throw H.wrapException(new H.UnimplementedNoSuchMethodError("Invoking noSuchMethod with named arguments not implemented"));
      }
    },
    JsTypeBoundClassMirror: {
      "^": "JsDeclarationMirror;_class,_typeArguments,_cachedTypeArguments,_cachedDeclarations,_cachedMembers,_cachedConstructors,_cachedVariables,_cachedGetters,_cachedSetters,_cachedMethodsMap,_cachedMethods,_superclass,_cachedSuperinterfaces,_cachedInstanceMembers,_cachedStaticMembers,simpleName",
      get$_prettyName: function() {
        return "ClassMirror";
      },
      toString$0: function(_) {
        var result, t1, t2;
        result = "ClassMirror on " + H.S(this._class.get$simpleName().__internal$_name);
        if (this.get$typeArguments() != null) {
          t1 = result + "<";
          t2 = this.get$typeArguments();
          result = t1 + t2.join$1(t2, ", ") + ">";
        }
        return result;
      },
      get$_mangledName: function() {
        for (var t1 = this.get$typeArguments(), t1 = t1.get$iterator(t1); t1.moveNext$0();)
          if (!J.$eq$(t1.__internal$_current, $.$get$JsMirrorSystem__dynamicType()))
            return H.S(this._class.get$_mangledName()) + "<" + this._typeArguments + ">";
        return this._class.get$_mangledName();
      },
      get$typeVariables: function() {
        return this._class.get$typeVariables();
      },
      get$typeArguments: function() {
        var t1, result, t2, t3, level, currentTypeArgument, i, character;
        t1 = this._cachedTypeArguments;
        if (t1 != null)
          return t1;
        result = [];
        t1 = new H.JsTypeBoundClassMirror_typeArguments_addTypeArgument(result);
        t2 = this._typeArguments;
        if (C.JSString_methods.indexOf$1(t2, "<") === -1)
          C.JSArray_methods.forEach$1(t2.split(","), new H.JsTypeBoundClassMirror_typeArguments_closure(t1));
        else {
          for (t3 = t2.length, level = 0, currentTypeArgument = "", i = 0; i < t3; ++i) {
            character = t2[i];
            if (character === " ")
              continue;
            else if (character === "<") {
              currentTypeArgument += character;
              ++level;
            } else if (character === ">") {
              currentTypeArgument += character;
              --level;
            } else if (character === ",")
              if (level > 0)
                currentTypeArgument += character;
              else {
                t1.call$1(currentTypeArgument);
                currentTypeArgument = "";
              }
            else
              currentTypeArgument += character;
          }
          t1.call$1(currentTypeArgument);
        }
        t1 = H.setRuntimeTypeInfo(new P.UnmodifiableListView(result), [null]);
        this._cachedTypeArguments = t1;
        return t1;
      },
      get$_methods: function() {
        var t1 = this._cachedMethods;
        if (t1 != null)
          return t1;
        t1 = this._class._getMethodsWithOwner$1(this);
        this._cachedMethods = t1;
        return t1;
      },
      get$__constructors: function() {
        var t1 = this._cachedConstructors;
        if (t1 != null)
          return t1;
        t1 = H.setRuntimeTypeInfo(new P.UnmodifiableMapView(H.filterConstructors(this.get$_methods())), [P.Symbol, P.MethodMirror]);
        this._cachedConstructors = t1;
        return t1;
      },
      get$__variables: function() {
        var t1, result, t2, _i, mirror;
        t1 = this._cachedVariables;
        if (t1 != null)
          return t1;
        result = H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [null, null]);
        for (t1 = this._class._getFieldsWithOwner$1(this), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          mirror = t1[_i];
          result.$indexSet(0, mirror.simpleName, mirror);
        }
        t1 = H.setRuntimeTypeInfo(new P.UnmodifiableMapView(result), [P.Symbol, P.VariableMirror]);
        this._cachedVariables = t1;
        return t1;
      },
      get$__members: function() {
        var t1 = this._cachedMembers;
        if (t1 != null)
          return t1;
        t1 = H.setRuntimeTypeInfo(new P.UnmodifiableMapView(H.filterMembers(this.get$_methods(), this.get$__variables())), [P.Symbol, P.DeclarationMirror]);
        this._cachedMembers = t1;
        return t1;
      },
      get$declarations: function() {
        var t1, result;
        t1 = this._cachedDeclarations;
        if (t1 != null)
          return t1;
        result = H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [P.Symbol, P.DeclarationMirror]);
        result.addAll$1(0, this.get$__members());
        result.addAll$1(0, this.get$__constructors());
        J.forEach$1$ax(this._class.get$typeVariables(), new H.JsTypeBoundClassMirror_declarations_closure(result));
        t1 = H.setRuntimeTypeInfo(new P.UnmodifiableMapView(result), [P.Symbol, P.DeclarationMirror]);
        this._cachedDeclarations = t1;
        return t1;
      },
      get$owner: function() {
        return this._class.get$owner();
      },
      get$superclass: function() {
        var t1 = this._superclass;
        if (t1 != null)
          return t1;
        t1 = H.typeMirrorFromRuntimeTypeRepresentation(this, init.types[J.$index$asx(init.typeInformation[this._class.get$_mangledName()], 0)]);
        this._superclass = t1;
        return t1;
      },
      get$isOriginalDeclaration: function() {
        return false;
      },
      get$originalDeclaration: function() {
        return this._class;
      },
      get$location: function(_) {
        var t1 = this._class;
        return t1.get$location(t1);
      },
      get$qualifiedName: function() {
        return this._class.get$qualifiedName();
      },
      get$simpleName: function() {
        return this._class.get$simpleName();
      },
      $isClassMirror: 1
    },
    JsTypeBoundClassMirror_typeArguments_addTypeArgument: {
      "^": "Closure:34;result",
      call$1: function(typeArgument) {
        var parsedIndex, t1, typeVariable;
        parsedIndex = H.Primitives_parseInt(typeArgument, null, new H.JsTypeBoundClassMirror_typeArguments_addTypeArgument_closure());
        t1 = this.result;
        if (J.$eq$(parsedIndex, -1))
          t1.push(H.reflectClassByMangledName(J.trim$0$s(typeArgument)));
        else {
          typeVariable = init.metadata[parsedIndex];
          t1.push(new H.JsTypeVariableMirror(P.reflectClass(typeVariable.get$owner()), typeVariable, parsedIndex, null, H.s(J.get$name$x(typeVariable))));
        }
      }
    },
    JsTypeBoundClassMirror_typeArguments_addTypeArgument_closure: {
      "^": "Closure:1;",
      call$1: function(_) {
        return -1;
      }
    },
    JsTypeBoundClassMirror_typeArguments_closure: {
      "^": "Closure:1;addTypeArgument",
      call$1: function(t) {
        return this.addTypeArgument.call$1(t);
      }
    },
    JsTypeBoundClassMirror_declarations_closure: {
      "^": "Closure:1;result",
      call$1: function(tv) {
        this.result.$indexSet(0, tv.get$simpleName(), tv);
        return tv;
      }
    },
    JsClassMirror: {
      "^": "JsTypeMirror_JsObjectMirror0;_mangledName<,_jsConstructor,_fieldsDescriptor,_fieldsMetadata,_jsConstructorCache,_metadata,_superclass,_cachedMethods,_cachedFields,_cachedConstructors,_cachedMethodsMap,_cachedGetters,_cachedSetters,_cachedVariables,_cachedMembers,_cachedDeclarations,_cachedMetadata,_cachedSuperinterfaces,_cachedTypeVariables,_cachedInstanceMembers,_cachedStaticMembers,_owner,simpleName",
      get$_prettyName: function() {
        return "ClassMirror";
      },
      get$__constructors: function() {
        var t1 = this._cachedConstructors;
        if (t1 != null)
          return t1;
        t1 = H.setRuntimeTypeInfo(new P.UnmodifiableMapView(H.filterConstructors(this.get$_methods())), [P.Symbol, P.MethodMirror]);
        this._cachedConstructors = t1;
        return t1;
      },
      _getMethodsWithOwner$1: function(methodOwner) {
        var $prototype, keys, result, t1, _i, key, simpleName, $function, stubName, mirror, mangledName, jsFunction, reflectionName, isConstructor, t2;
        $prototype = this._jsConstructor.prototype;
        $prototype.$deferredAction();
        keys = H.extractKeys($prototype);
        result = H.setRuntimeTypeInfo([], [H.JsMethodMirror]);
        for (t1 = keys.length, _i = 0; _i < t1; ++_i) {
          key = keys[_i];
          if (H.isReflectiveDataInPrototype(key))
            continue;
          simpleName = $.$get$mangledNames().$index(0, key);
          if (simpleName == null)
            continue;
          $function = $prototype[key];
          if (!($function.$reflectable === 1))
            continue;
          stubName = $function.$stubName;
          if (stubName != null && !J.$eq$(key, stubName))
            continue;
          mirror = H.JsMethodMirror_JsMethodMirror$fromUnmangledName(simpleName, $function, false, false);
          result.push(mirror);
          mirror._owner = methodOwner;
        }
        keys = H.extractKeys(init.statics[this._mangledName]);
        for (t1 = keys.length, _i = 0; _i < t1; ++_i) {
          mangledName = keys[_i];
          if (H.isReflectiveDataInPrototype(mangledName))
            continue;
          jsFunction = this.get$owner()._globalObject[mangledName];
          if ("$reflectable" in jsFunction) {
            reflectionName = jsFunction.$reflectionName;
            if (reflectionName == null)
              continue;
            isConstructor = C.JSString_methods.startsWith$1(reflectionName, "new ");
            if (isConstructor) {
              t2 = C.JSString_methods.substring$1(reflectionName, 4);
              reflectionName = H.stringReplaceAllUnchecked(t2, "$", ".");
            }
          } else
            continue;
          mirror = H.JsMethodMirror_JsMethodMirror$fromUnmangledName(reflectionName, jsFunction, !isConstructor, isConstructor);
          result.push(mirror);
          mirror._owner = methodOwner;
        }
        return result;
      },
      get$_methods: function() {
        var t1 = this._cachedMethods;
        if (t1 != null)
          return t1;
        t1 = this._getMethodsWithOwner$1(this);
        this._cachedMethods = t1;
        return t1;
      },
      _getFieldsWithOwner$1: function(fieldOwner) {
        var result, t1, instanceFieldSpecfication, staticDescriptor;
        result = H.setRuntimeTypeInfo([], [P.VariableMirror]);
        t1 = this._fieldsDescriptor.split(";");
        if (1 >= t1.length)
          return H.ioore(t1, 1);
        instanceFieldSpecfication = t1[1];
        t1 = this._fieldsMetadata;
        if (t1 != null) {
          instanceFieldSpecfication = [instanceFieldSpecfication];
          C.JSArray_methods.addAll$1(instanceFieldSpecfication, t1);
        }
        H.parseCompactFieldSpecification(fieldOwner, instanceFieldSpecfication, false, result);
        staticDescriptor = init.statics[this._mangledName];
        if (staticDescriptor != null)
          H.parseCompactFieldSpecification(fieldOwner, staticDescriptor["^"], true, result);
        return result;
      },
      get$_fields: function() {
        var t1 = this._cachedFields;
        if (t1 != null)
          return t1;
        t1 = this._getFieldsWithOwner$1(this);
        this._cachedFields = t1;
        return t1;
      },
      get$__variables: function() {
        var t1, result, t2, _i, mirror;
        t1 = this._cachedVariables;
        if (t1 != null)
          return t1;
        result = H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [null, null]);
        for (t1 = this.get$_fields(), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          mirror = t1[_i];
          result.$indexSet(0, mirror.simpleName, mirror);
        }
        t1 = H.setRuntimeTypeInfo(new P.UnmodifiableMapView(result), [P.Symbol, P.VariableMirror]);
        this._cachedVariables = t1;
        return t1;
      },
      get$__members: function() {
        var t1 = this._cachedMembers;
        if (t1 != null)
          return t1;
        t1 = H.setRuntimeTypeInfo(new P.UnmodifiableMapView(H.filterMembers(this.get$_methods(), this.get$__variables())), [P.Symbol, P.Mirror]);
        this._cachedMembers = t1;
        return t1;
      },
      get$declarations: function() {
        var t1, result;
        t1 = this._cachedDeclarations;
        if (t1 != null)
          return t1;
        result = H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [P.Symbol, P.DeclarationMirror]);
        t1 = new H.JsClassMirror_declarations_addToResult(result);
        this.get$__members()._map.forEach$1(0, t1);
        this.get$__constructors()._map.forEach$1(0, t1);
        J.forEach$1$ax(this.get$typeVariables(), new H.JsClassMirror_declarations_closure(result));
        t1 = H.setRuntimeTypeInfo(new P.UnmodifiableMapView(result), [P.Symbol, P.DeclarationMirror]);
        this._cachedDeclarations = t1;
        return t1;
      },
      get$owner: function() {
        var t1, t2;
        t1 = this._owner;
        if (t1 == null) {
          for (t1 = H.JsMirrorSystem_librariesByName(), t1 = t1.get$values(t1), t1 = t1.get$iterator(t1); t1.moveNext$0();)
            for (t2 = J.get$iterator$ax(t1.get$current()); t2.moveNext$0();)
              t2.get$current().get$__classes();
          t1 = this._owner;
          if (t1 == null)
            throw H.wrapException(new P.StateError('Class "' + H.S(H.n(this.simpleName)) + '" has no owner'));
        }
        return t1;
      },
      get$superclass: function() {
        var t1, typeInformation, t2, superclassName, mixins, t3;
        t1 = this._superclass;
        if (t1 == null) {
          typeInformation = init.typeInformation[this._mangledName];
          if (typeInformation != null) {
            t1 = H.typeMirrorFromRuntimeTypeRepresentation(this, init.types[J.$index$asx(typeInformation, 0)]);
            this._superclass = t1;
          } else {
            t1 = this._fieldsDescriptor;
            t2 = t1.split(";");
            if (0 >= t2.length)
              return H.ioore(t2, 0);
            t2 = J.split$1$s(t2[0], ":");
            if (0 >= t2.length)
              return H.ioore(t2, 0);
            superclassName = t2[0];
            t2 = J.getInterceptor$s(superclassName);
            mixins = t2.split$1(superclassName, "+");
            t3 = mixins.length;
            if (t3 > 1) {
              if (t3 !== 2)
                throw H.wrapException(new H.RuntimeError("Strange mixin: " + t1));
              t1 = H.reflectClassByMangledName(mixins[0]);
              this._superclass = t1;
            } else {
              t1 = t2.$eq(superclassName, "") ? this : H.reflectClassByMangledName(superclassName);
              this._superclass = t1;
            }
          }
        }
        return J.$eq$(t1, this) ? null : this._superclass;
      },
      get$isOriginalDeclaration: function() {
        return true;
      },
      get$originalDeclaration: function() {
        return this;
      },
      get$typeVariables: function() {
        var t1, result, typeVariables, i, typeVariable;
        t1 = this._cachedTypeVariables;
        if (t1 != null)
          return t1;
        result = [];
        typeVariables = this._jsConstructor.prototype["<>"];
        if (typeVariables == null)
          return result;
        for (i = 0; i < typeVariables.length; ++i) {
          t1 = typeVariables[i];
          typeVariable = init.metadata[t1];
          result.push(new H.JsTypeVariableMirror(this, typeVariable, t1, null, H.s(J.get$name$x(typeVariable))));
        }
        t1 = H.setRuntimeTypeInfo(new P.UnmodifiableListView(result), [null]);
        this._cachedTypeVariables = t1;
        return t1;
      },
      get$typeArguments: function() {
        return C.List_empty0;
      },
      $isClassMirror: 1
    },
    JsTypeMirror_JsObjectMirror0: {
      "^": "JsTypeMirror+JsObjectMirror;"
    },
    JsClassMirror_declarations_addToResult: {
      "^": "Closure:16;result",
      call$2: function(key, value) {
        this.result.$indexSet(0, key, value);
      }
    },
    JsClassMirror_declarations_closure: {
      "^": "Closure:1;result",
      call$1: function(tv) {
        this.result.$indexSet(0, tv.get$simpleName(), tv);
        return tv;
      }
    },
    JsVariableMirror: {
      "^": "JsDeclarationMirror;_jsName,isFinal,isStatic,_metadataFunction,_owner,_type,_metadata,simpleName",
      get$_prettyName: function() {
        return "VariableMirror";
      },
      get$owner: function() {
        return this._owner;
      },
      $isVariableMirror: 1,
      static: {
        JsVariableMirror_JsVariableMirror$from: function(descriptor, metadataFunction, owner, isStatic) {
          var fieldInformation, t1, field, $length, t2, code, isFinal, jsName, divider, accessorName, result, unmangledName, setterName, _i;
          fieldInformation = J.split$1$s(descriptor, "-");
          t1 = fieldInformation.length;
          if (t1 === 1)
            return;
          if (0 >= t1)
            return H.ioore(fieldInformation, 0);
          field = fieldInformation[0];
          t1 = J.getInterceptor$asx(field);
          $length = t1.get$length(field);
          t2 = J.getInterceptor$n($length);
          code = H.JsVariableMirror_fieldCode(t1.codeUnitAt$1(field, t2.$sub($length, 1)));
          if (code === 0)
            return;
          isFinal = C.JSInt_methods._shrOtherPositive$1(code, 2) === 0;
          jsName = t1.substring$2(field, 0, t2.$sub($length, 1));
          divider = t1.indexOf$1(field, ":");
          if (divider > 0) {
            accessorName = C.JSString_methods.substring$2(jsName, 0, divider);
            jsName = t1.substring$1(field, divider + 1);
          } else
            accessorName = jsName;
          if (isStatic) {
            result = $.$get$mangledGlobalNames()._jsMangledNames[accessorName];
            unmangledName = typeof result !== "string" ? null : result;
          } else
            unmangledName = $.$get$mangledNames().$index(0, "get$" + accessorName);
          if (unmangledName == null)
            unmangledName = accessorName;
          if (isFinal) {
            setterName = H.s(H.S(unmangledName) + "=");
            t1 = owner.get$_methods();
            t2 = t1.length;
            _i = 0;
            while (true) {
              if (!(_i < t1.length)) {
                isFinal = true;
                break;
              }
              if (J.$eq$(t1[_i].get$simpleName(), setterName)) {
                isFinal = false;
                break;
              }
              t1.length === t2 || (0, H.throwConcurrentModificationError)(t1);
              ++_i;
            }
          }
          if (1 >= fieldInformation.length)
            return H.ioore(fieldInformation, 1);
          return new H.JsVariableMirror(jsName, isFinal, isStatic, metadataFunction, owner, H.Primitives_parseInt(fieldInformation[1], null, new H.closure0()), null, H.s(unmangledName));
        },
        JsVariableMirror_fieldCode: function(code) {
          if (code >= 60 && code <= 64)
            return code - 59;
          if (code >= 123 && code <= 126)
            return code - 117;
          if (code >= 37 && code <= 43)
            return code - 27;
          return 0;
        }
      }
    },
    closure0: {
      "^": "Closure:1;",
      call$1: function(_) {
        return;
      }
    },
    JsClosureMirror: {
      "^": "JsInstanceMirror;reflectee,_getterCache",
      toString$0: function(_) {
        return "ClosureMirror on '" + H.S(P.Error_safeToString(this.reflectee)) + "'";
      }
    },
    JsMethodMirror: {
      "^": "JsDeclarationMirror;_jsFunction<,_requiredParameterCount,_optionalParameterCount,isGetter,isSetter<,isStatic,isConstructor<,isOperator,_owner,_metadata,_returnType,_parameters,simpleName",
      get$_prettyName: function() {
        return "MethodMirror";
      },
      get$owner: function() {
        return this._owner;
      },
      $isMirror: 1,
      static: {
        JsMethodMirror_JsMethodMirror$fromUnmangledName: function($name, jsFunction, isStatic, isConstructor) {
          var info, isOperator, isSetter, requiredParameterCount, isGetter, optionalParameterCount, reflectionInfo;
          info = $name.split(":");
          if (0 >= info.length)
            return H.ioore(info, 0);
          $name = info[0];
          isOperator = H.isOperatorName($name);
          isSetter = !isOperator && J.endsWith$1$s($name, "=");
          if (info.length === 1) {
            if (isSetter) {
              requiredParameterCount = 1;
              isGetter = false;
            } else {
              requiredParameterCount = 0;
              isGetter = true;
            }
            optionalParameterCount = 0;
          } else {
            reflectionInfo = H.ReflectionInfo_ReflectionInfo(jsFunction);
            requiredParameterCount = reflectionInfo.requiredParameterCount;
            optionalParameterCount = reflectionInfo.optionalParameterCount;
            isGetter = false;
          }
          return new H.JsMethodMirror(jsFunction, requiredParameterCount, optionalParameterCount, isGetter, isSetter, isStatic, isConstructor, isOperator, null, null, null, null, H.s($name));
        }
      }
    },
    JsTypedefMirror: {
      "^": "JsDeclarationMirror;_mangledName<,referent,simpleName",
      get$value: function(_) {
        return this.referent;
      },
      get$_prettyName: function() {
        return "TypedefMirror";
      },
      get$typeVariables: function() {
        return H.throwExpression(new P.UnimplementedError(null));
      },
      get$originalDeclaration: function() {
        return this;
      },
      get$owner: function() {
        return H.throwExpression(new P.UnimplementedError(null));
      },
      $isTypedefMirror: 1
    },
    BrokenClassMirror: {
      "^": "Object;",
      get$superclass: function() {
        return H.throwExpression(new P.UnimplementedError(null));
      },
      get$declarations: function() {
        return H.throwExpression(new P.UnimplementedError(null));
      },
      get$typeVariables: function() {
        return H.throwExpression(new P.UnimplementedError(null));
      },
      get$typeArguments: function() {
        return H.throwExpression(new P.UnimplementedError(null));
      },
      get$originalDeclaration: function() {
        return H.throwExpression(new P.UnimplementedError(null));
      },
      get$simpleName: function() {
        return H.throwExpression(new P.UnimplementedError(null));
      },
      get$qualifiedName: function() {
        return H.throwExpression(new P.UnimplementedError(null));
      },
      get$location: function(_) {
        return H.throwExpression(new P.UnimplementedError(null));
      }
    },
    JsFunctionTypeMirror: {
      "^": "BrokenClassMirror;_typeData,_cachedToString,_cachedReturnType,_cachedParameters,owner<",
      get$isOriginalDeclaration: function() {
        return true;
      },
      _unmangleIfPreserved$1: function(mangled) {
        var result = init.mangledGlobalNames[mangled];
        if (result != null)
          return result;
        return mangled;
      },
      toString$0: function(_) {
        var t1, t2, t3, s, sep, _i, argument, $name;
        t1 = this._cachedToString;
        if (t1 != null)
          return t1;
        t1 = this._typeData;
        if ("args" in t1)
          for (t2 = t1.args, t3 = t2.length, s = "FunctionTypeMirror on '(", sep = "", _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i, sep = ", ") {
            argument = t2[_i];
            s = C.JSString_methods.$add(s + sep, this._unmangleIfPreserved$1(H.runtimeTypeToString(argument, null)));
          }
        else {
          s = "FunctionTypeMirror on '(";
          sep = "";
        }
        if ("opt" in t1) {
          s += sep + "[";
          for (t2 = t1.opt, t3 = t2.length, sep = "", _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i, sep = ", ") {
            argument = t2[_i];
            s = C.JSString_methods.$add(s + sep, this._unmangleIfPreserved$1(H.runtimeTypeToString(argument, null)));
          }
          s += "]";
        }
        if ("named" in t1) {
          s += sep + "{";
          for (t2 = H.extractKeys(t1.named), t3 = t2.length, sep = "", _i = 0; _i < t3; ++_i, sep = ", ") {
            $name = t2[_i];
            s = C.JSString_methods.$add(s + sep + (H.S($name) + ": "), this._unmangleIfPreserved$1(H.runtimeTypeToString(t1.named[$name], null)));
          }
          s += "}";
        }
        s += ") -> ";
        if (!!t1.v)
          s += "void";
        else
          s = "ret" in t1 ? C.JSString_methods.$add(s, this._unmangleIfPreserved$1(H.runtimeTypeToString(t1.ret, null))) : s + "dynamic";
        t1 = s + "'";
        this._cachedToString = t1;
        return t1;
      },
      get$callMethod: function() {
        return H.throwExpression(new P.UnimplementedError(null));
      },
      callMethod$2: function(arg0, arg1) {
        return this.get$callMethod().call$2(arg0, arg1);
      },
      $isClassMirror: 1
    },
    typeMirrorFromRuntimeTypeRepresentation_getTypeArgument: {
      "^": "Closure:160;_box_0",
      call$1: function(index) {
        var typeVariable, t1, variableIndex;
        typeVariable = init.metadata[index];
        t1 = this._box_0;
        variableIndex = H.findTypeVariableIndex(t1.ownerClass.get$typeVariables(), J.get$name$x(typeVariable));
        return J.$index$asx(t1.ownerClass.get$typeArguments(), variableIndex);
      }
    },
    typeMirrorFromRuntimeTypeRepresentation_substituteTypeVariable: {
      "^": "Closure:13;getTypeArgument",
      call$1: function(index) {
        var typeArgument, t1;
        typeArgument = this.getTypeArgument.call$1(index);
        t1 = J.getInterceptor(typeArgument);
        if (!!t1.$isJsTypeVariableMirror)
          return H.S(typeArgument._metadataIndex);
        if (!t1.$isJsClassMirror && !t1.$isJsTypeBoundClassMirror)
          if (t1.$eq(typeArgument, $.$get$JsMirrorSystem__dynamicType()))
            return "dynamic";
          else if (t1.$eq(typeArgument, $.$get$JsMirrorSystem__voidType()))
            return "void";
          else
            return "dynamic";
        return typeArgument.get$_mangledName();
      }
    }
  }], ["dart._js_names", "dart:_js_names",, H, {
    "^": "",
    extractKeys: function(victim) {
      var t1 = H.setRuntimeTypeInfo(victim ? Object.keys(victim) : [], [null]);
      t1.fixed$length = Array;
      return t1;
    },
    _LazyMangledNamesMap: {
      "^": "Object;_jsMangledNames",
      $index: ["super$_LazyMangledNamesMap$$index", function(_, key) {
        var result = this._jsMangledNames[key];
        return typeof result !== "string" ? null : result;
      }]
    },
    _LazyMangledInstanceNamesMap: {
      "^": "_LazyMangledNamesMap;_jsMangledNames",
      $index: function(_, key) {
        var result = this.super$_LazyMangledNamesMap$$index(this, key);
        if (result == null && J.startsWith$1$s(key, "set$")) {
          result = this.super$_LazyMangledNamesMap$$index(this, "get$" + J.substring$1$s(key, "set$".length));
          return result != null ? result + "=" : null;
        }
        return result;
      }
    },
    _LazyReflectiveNamesMap: {
      "^": "Object;_jsMangledNames,_isInstance,_cacheLength,__js_names$_cache",
      _updateReflectiveNames$0: function() {
        var result, t1, t2, getterPrefixLength, key, reflectiveName;
        result = P.LinkedHashMap_LinkedHashMap$_empty(P.String, P.String);
        t1 = this._jsMangledNames;
        for (t2 = J.get$iterator$ax(Object.keys(t1)), getterPrefixLength = "get$".length; t2.moveNext$0();) {
          key = t2.get$current();
          reflectiveName = t1[key];
          if (typeof reflectiveName !== "string")
            continue;
          result.$indexSet(0, reflectiveName, key);
          if (J.startsWith$1$s(key, "get$"))
            result.$indexSet(0, H.S(reflectiveName) + "=", "set$" + J.substring$1$s(key, getterPrefixLength));
        }
        return result;
      },
      $index: function(_, key) {
        if (this.__js_names$_cache == null || Object.keys(this._jsMangledNames).length !== this._cacheLength) {
          this.__js_names$_cache = this._updateReflectiveNames$0();
          this._cacheLength = Object.keys(this._jsMangledNames).length;
        }
        return this.__js_names$_cache.$index(0, key);
      }
    }
  }], ["dart2js._js_primitives", "dart:_js_primitives",, H, {
    "^": "",
    printString: function(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof window == "object")
        return;
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    }
  }], ["metadata", "dart:_metadata",, H, {
    "^": "",
    SupportedBrowser: {
      "^": "Object;browserName,minimumVersion"
    },
    Experimental: {
      "^": "Object;"
    },
    DomName: {
      "^": "Object;name>"
    },
    DocsEditable: {
      "^": "Object;"
    },
    Unstable: {
      "^": "Object;"
    }
  }], ["dart.typed_data.implementation", "dart:_native_typed_data",, H, {
    "^": "",
    _checkLength: function($length) {
      if (typeof $length !== "number" || Math.floor($length) !== $length)
        throw H.wrapException(P.ArgumentError$("Invalid length " + H.S($length)));
      return $length;
    },
    _checkValidRange: function(start, end, $length) {
      var t1;
      if (!(start >>> 0 !== start))
        if (end == null)
          t1 = start > $length;
        else
          t1 = end >>> 0 !== end || start > end || end > $length;
      else
        t1 = true;
      if (t1)
        throw H.wrapException(H.diagnoseRangeError(start, end, $length));
      if (end == null)
        return $length;
      return end;
    },
    NativeByteBuffer: {
      "^": "Interceptor;",
      get$runtimeType: function(receiver) {
        return C.Type_ByteBuffer_RkP;
      },
      $isNativeByteBuffer: 1,
      $isByteBuffer: 1,
      "%": "ArrayBuffer"
    },
    NativeTypedData: {
      "^": "Interceptor;",
      _invalidPosition$3: function(receiver, position, $length, $name) {
        if (typeof position !== "number" || Math.floor(position) !== position)
          throw H.wrapException(P.ArgumentError$value(position, $name, "Invalid list position"));
        else
          throw H.wrapException(P.RangeError$range(position, 0, $length, $name, null));
      },
      _checkPosition$3: function(receiver, position, $length, $name) {
        if (position >>> 0 !== position || position > $length)
          this._invalidPosition$3(receiver, position, $length, $name);
      },
      $isNativeTypedData: 1,
      $isTypedData: 1,
      "%": ";ArrayBufferView;NativeTypedArray|NativeTypedArray_ListMixin|NativeTypedArray_ListMixin_FixedLengthListMixin|NativeTypedArrayOfDouble|NativeTypedArray_ListMixin0|NativeTypedArray_ListMixin_FixedLengthListMixin0|NativeTypedArrayOfInt"
    },
    NativeByteData: {
      "^": "NativeTypedData;",
      get$runtimeType: function(receiver) {
        return C.Type_ByteData_zNC;
      },
      $isTypedData: 1,
      "%": "DataView"
    },
    NativeTypedArray: {
      "^": "NativeTypedData;",
      get$length: function(receiver) {
        return receiver.length;
      },
      _setRangeFast$4: function(receiver, start, end, source, skipCount) {
        var targetLength, count, sourceLength;
        targetLength = receiver.length;
        this._checkPosition$3(receiver, start, targetLength, "start");
        this._checkPosition$3(receiver, end, targetLength, "end");
        if (J.$gt$n(start, end))
          throw H.wrapException(P.RangeError$range(start, 0, end, null, null));
        count = J.$sub$n(end, start);
        if (J.$lt$n(skipCount, 0))
          throw H.wrapException(P.ArgumentError$(skipCount));
        sourceLength = source.length;
        if (typeof skipCount !== "number")
          return H.iae(skipCount);
        if (typeof count !== "number")
          return H.iae(count);
        if (sourceLength - skipCount < count)
          throw H.wrapException(new P.StateError("Not enough elements"));
        if (skipCount !== 0 || sourceLength !== count)
          source = source.subarray(skipCount, skipCount + count);
        receiver.set(source, start);
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: Isolate.functionThatReturnsNull,
      $isJSIndexable: 1,
      $asJSIndexable: Isolate.functionThatReturnsNull
    },
    NativeTypedArrayOfDouble: {
      "^": "NativeTypedArray_ListMixin_FixedLengthListMixin;",
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        receiver[index] = value;
      },
      setRange$4: function(receiver, start, end, iterable, skipCount) {
        if (!!J.getInterceptor(iterable).$isNativeTypedArrayOfDouble) {
          this._setRangeFast$4(receiver, start, end, iterable, skipCount);
          return;
        }
        this.super$ListMixin$setRange(receiver, start, end, iterable, skipCount);
      },
      setRange$3: function($receiver, start, end, iterable) {
        return this.setRange$4($receiver, start, end, iterable, 0);
      }
    },
    NativeTypedArray_ListMixin: {
      "^": "NativeTypedArray+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [P.$double];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$double];
      }
    },
    NativeTypedArray_ListMixin_FixedLengthListMixin: {
      "^": "NativeTypedArray_ListMixin+FixedLengthListMixin;"
    },
    NativeTypedArrayOfInt: {
      "^": "NativeTypedArray_ListMixin_FixedLengthListMixin0;",
      $indexSet: function(receiver, index, value) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        receiver[index] = value;
      },
      setRange$4: function(receiver, start, end, iterable, skipCount) {
        if (!!J.getInterceptor(iterable).$isNativeTypedArrayOfInt) {
          this._setRangeFast$4(receiver, start, end, iterable, skipCount);
          return;
        }
        this.super$ListMixin$setRange(receiver, start, end, iterable, skipCount);
      },
      setRange$3: function($receiver, start, end, iterable) {
        return this.setRange$4($receiver, start, end, iterable, 0);
      },
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      }
    },
    NativeTypedArray_ListMixin0: {
      "^": "NativeTypedArray+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      }
    },
    NativeTypedArray_ListMixin_FixedLengthListMixin0: {
      "^": "NativeTypedArray_ListMixin0+FixedLengthListMixin;"
    },
    NativeFloat32List: {
      "^": "NativeTypedArrayOfDouble;",
      get$runtimeType: function(receiver) {
        return C.Type_Float32List_LB7;
      },
      sublist$2: function(receiver, start, end) {
        return new Float32Array(receiver.subarray(start, H._checkValidRange(start, end, receiver.length)));
      },
      sublist$1: function($receiver, start) {
        return this.sublist$2($receiver, start, null);
      },
      $isTypedData: 1,
      $isList: 1,
      $asList: function() {
        return [P.$double];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$double];
      },
      "%": "Float32Array"
    },
    NativeFloat64List: {
      "^": "NativeTypedArrayOfDouble;",
      get$runtimeType: function(receiver) {
        return C.Type_Float64List_LB7;
      },
      sublist$2: function(receiver, start, end) {
        return new Float64Array(receiver.subarray(start, H._checkValidRange(start, end, receiver.length)));
      },
      sublist$1: function($receiver, start) {
        return this.sublist$2($receiver, start, null);
      },
      $isTypedData: 1,
      $isList: 1,
      $asList: function() {
        return [P.$double];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$double];
      },
      "%": "Float64Array"
    },
    NativeInt16List: {
      "^": "NativeTypedArrayOfInt;",
      get$runtimeType: function(receiver) {
        return C.Type_Int16List_uXf;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      sublist$2: function(receiver, start, end) {
        return new Int16Array(receiver.subarray(start, H._checkValidRange(start, end, receiver.length)));
      },
      sublist$1: function($receiver, start) {
        return this.sublist$2($receiver, start, null);
      },
      $isTypedData: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      },
      "%": "Int16Array"
    },
    NativeInt32List: {
      "^": "NativeTypedArrayOfInt;",
      get$runtimeType: function(receiver) {
        return C.Type_Int32List_O50;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      sublist$2: function(receiver, start, end) {
        return new Int32Array(receiver.subarray(start, H._checkValidRange(start, end, receiver.length)));
      },
      sublist$1: function($receiver, start) {
        return this.sublist$2($receiver, start, null);
      },
      $isTypedData: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      },
      "%": "Int32Array"
    },
    NativeInt8List: {
      "^": "NativeTypedArrayOfInt;",
      get$runtimeType: function(receiver) {
        return C.Type_Int8List_ekJ;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      sublist$2: function(receiver, start, end) {
        return new Int8Array(receiver.subarray(start, H._checkValidRange(start, end, receiver.length)));
      },
      sublist$1: function($receiver, start) {
        return this.sublist$2($receiver, start, null);
      },
      $isTypedData: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      },
      "%": "Int8Array"
    },
    NativeUint16List: {
      "^": "NativeTypedArrayOfInt;",
      get$runtimeType: function(receiver) {
        return C.Type_Uint16List_2bx;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      sublist$2: function(receiver, start, end) {
        return new Uint16Array(receiver.subarray(start, H._checkValidRange(start, end, receiver.length)));
      },
      sublist$1: function($receiver, start) {
        return this.sublist$2($receiver, start, null);
      },
      $isTypedData: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      },
      "%": "Uint16Array"
    },
    NativeUint32List: {
      "^": "NativeTypedArrayOfInt;",
      get$runtimeType: function(receiver) {
        return C.Type_Uint32List_2bx;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      sublist$2: function(receiver, start, end) {
        return new Uint32Array(receiver.subarray(start, H._checkValidRange(start, end, receiver.length)));
      },
      sublist$1: function($receiver, start) {
        return this.sublist$2($receiver, start, null);
      },
      $isTypedData: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      },
      "%": "Uint32Array"
    },
    NativeUint8ClampedList: {
      "^": "NativeTypedArrayOfInt;",
      get$runtimeType: function(receiver) {
        return C.Type_Uint8ClampedList_Jik;
      },
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      sublist$2: function(receiver, start, end) {
        return new Uint8ClampedArray(receiver.subarray(start, H._checkValidRange(start, end, receiver.length)));
      },
      sublist$1: function($receiver, start) {
        return this.sublist$2($receiver, start, null);
      },
      $isTypedData: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      },
      "%": "CanvasPixelArray|Uint8ClampedArray"
    },
    NativeUint8List: {
      "^": "NativeTypedArrayOfInt;",
      get$runtimeType: function(receiver) {
        return C.Type_Uint8List_WLA;
      },
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      sublist$2: function(receiver, start, end) {
        return new Uint8Array(receiver.subarray(start, H._checkValidRange(start, end, receiver.length)));
      },
      sublist$1: function($receiver, start) {
        return this.sublist$2($receiver, start, null);
      },
      $isTypedData: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      },
      "%": ";Uint8Array"
    }
  }], ["dart.async", "dart:async",, P, {
    "^": "",
    _AsyncRun__initializeScheduleImmediate: function() {
      var t1, div, span;
      t1 = {};
      if (self.scheduleImmediate != null)
        return P.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(H.convertDartClosureToJS(new P._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new P._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return P.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return P.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride: [function(callback) {
      ++init.globalState.topEventLoop._activeJsAsyncCount;
      self.scheduleImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateJsOverride_internalCallback(callback), 0));
    }, "call$1", "async__AsyncRun__scheduleImmediateJsOverride$closure", 2, 0, 20],
    _AsyncRun__scheduleImmediateWithSetImmediate: [function(callback) {
      ++init.globalState.topEventLoop._activeJsAsyncCount;
      self.setImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(callback), 0));
    }, "call$1", "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", 2, 0, 20],
    _AsyncRun__scheduleImmediateWithTimer: [function(callback) {
      P.Timer__createTimer(C.Duration_0, callback);
    }, "call$1", "async__AsyncRun__scheduleImmediateWithTimer$closure", 2, 0, 20],
    _asyncHelper: function(object, bodyFunctionOrErrorCode, completer) {
      if (bodyFunctionOrErrorCode === 0) {
        J.complete$1$x(completer, object);
        return;
      } else if (bodyFunctionOrErrorCode === 1) {
        completer.completeError$2(H.unwrapException(object), H.getTraceFromException(object));
        return;
      }
      P._awaitOnObject(object, bodyFunctionOrErrorCode);
      return completer.get$future();
    },
    _awaitOnObject: function(object, bodyFunction) {
      var thenCallback, errorCallback, t1, future;
      thenCallback = new P._awaitOnObject_closure(bodyFunction);
      errorCallback = new P._awaitOnObject_closure0(bodyFunction);
      t1 = J.getInterceptor(object);
      if (!!t1.$is_Future)
        object._thenNoZoneRegistration$2(thenCallback, errorCallback);
      else if (!!t1.$isFuture)
        object.then$2$onError(thenCallback, errorCallback);
      else {
        future = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
        future._state = 4;
        future._resultOrListeners = object;
        future._thenNoZoneRegistration$2(thenCallback, null);
      }
    },
    _wrapJsFunctionForAsync: function($function) {
      var $protected = function(fn, ERROR) {
        return function(errorCode, result) {
          while (true)
            try {
              fn(errorCode, result);
              break;
            } catch (error) {
              result = error;
              errorCode = ERROR;
            }
        };
      }($function, 1);
      $.Zone__current.toString;
      return new P._wrapJsFunctionForAsync_closure($protected);
    },
    _invokeErrorHandler: function(errorHandler, error, stackTrace) {
      var t1 = H.getDynamicRuntimeType();
      t1 = H.buildFunctionType(t1, [t1, t1])._isTest$1(errorHandler);
      if (t1)
        return errorHandler.call$2(error, stackTrace);
      else
        return errorHandler.call$1(error);
    },
    _registerErrorHandler: function(errorHandler, zone) {
      var t1 = H.getDynamicRuntimeType();
      t1 = H.buildFunctionType(t1, [t1, t1])._isTest$1(errorHandler);
      if (t1) {
        zone.toString;
        return errorHandler;
      } else {
        zone.toString;
        return errorHandler;
      }
    },
    Future_Future$error: function(error, stackTrace, $T) {
      var t1;
      error = error != null ? error : new P.NullThrownError();
      t1 = $.Zone__current;
      if (t1 !== C.C__RootZone)
        t1.toString;
      t1 = H.setRuntimeTypeInfo(new P._Future(0, t1, null), [$T]);
      t1._asyncCompleteError$2(error, stackTrace);
      return t1;
    },
    Completer_Completer$sync: function($T) {
      return H.setRuntimeTypeInfo(new P._SyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [$T])), [$T]);
    },
    _completeWithErrorCallback: function(result, error, stackTrace) {
      $.Zone__current.toString;
      result._completeError$2(error, stackTrace);
    },
    _microtaskLoop: function() {
      var t1, t2;
      for (; t1 = $._nextCallback, t1 != null;) {
        $._lastPriorityCallback = null;
        t2 = J.get$next$x(t1);
        $._nextCallback = t2;
        if (t2 == null)
          $._lastCallback = null;
        t1.get$callback().call$0();
      }
    },
    _startMicrotaskLoop: [function() {
      $._isInCallbackLoop = true;
      try {
        P._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
      }
    }, "call$0", "async___startMicrotaskLoop$closure", 0, 0, 7],
    _scheduleAsyncCallback: function(callback) {
      var newEntry = new P._AsyncCallbackEntry(callback, null);
      if ($._nextCallback == null) {
        $._lastCallback = newEntry;
        $._nextCallback = newEntry;
        if (!$._isInCallbackLoop)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
      } else {
        $._lastCallback.next = newEntry;
        $._lastCallback = newEntry;
      }
    },
    _schedulePriorityAsyncCallback: function(callback) {
      var t1, entry, t2;
      t1 = $._nextCallback;
      if (t1 == null) {
        P._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = new P._AsyncCallbackEntry(callback, null);
      t2 = $._lastPriorityCallback;
      if (t2 == null) {
        entry.next = t1;
        $._lastPriorityCallback = entry;
        $._nextCallback = entry;
      } else {
        entry.next = t2.next;
        t2.next = entry;
        $._lastPriorityCallback = entry;
        if (entry.next == null)
          $._lastCallback = entry;
      }
    },
    scheduleMicrotask: function(callback) {
      var currentZone = $.Zone__current;
      if (C.C__RootZone === currentZone) {
        P._rootScheduleMicrotask(null, null, C.C__RootZone, callback);
        return;
      }
      currentZone.toString;
      P._rootScheduleMicrotask(null, null, currentZone, currentZone.bindCallback$2$runGuarded(callback, true));
    },
    StreamIterator_StreamIterator: function(stream, $T) {
      var t1, t2, t3;
      t1 = H.setRuntimeTypeInfo(new P._StreamIteratorImpl(null, null, null, 0), [$T]);
      t2 = t1.get$_onData();
      t3 = t1.get$_onError();
      t1._subscription = stream.listen$4$cancelOnError$onDone$onError(t2, true, t1.get$_onDone(), t3);
      return t1;
    },
    StreamController_StreamController$broadcast: function(onCancel, onListen, sync, $T) {
      return sync ? H.setRuntimeTypeInfo(new P._SyncBroadcastStreamController(onListen, onCancel, 0, null, null, null, null), [$T]) : H.setRuntimeTypeInfo(new P._AsyncBroadcastStreamController(onListen, onCancel, 0, null, null, null, null), [$T]);
    },
    _runGuarded: function(notificationHandler) {
      var result, e, s, exception, t1;
      if (notificationHandler == null)
        return;
      try {
        result = notificationHandler.call$0();
        if (!!J.getInterceptor(result).$isFuture)
          return result;
        return;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = H.getTraceFromException(exception);
        t1 = $.Zone__current;
        t1.toString;
        P._rootHandleUncaughtError(null, null, t1, e, s);
      }
    },
    _runUserCode: function(userCode, onSuccess, onError) {
      var e, s, replacement, error, stackTrace, exception, t1;
      try {
        onSuccess.call$1(userCode.call$0());
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = H.getTraceFromException(exception);
        $.Zone__current.toString;
        replacement = null;
        if (replacement == null)
          onError.call$2(e, s);
        else {
          t1 = J.get$error$x(replacement);
          error = t1;
          stackTrace = replacement.get$stackTrace();
          onError.call$2(error, stackTrace);
        }
      }
    },
    _cancelAndError: function(subscription, future, error, stackTrace) {
      var cancelFuture = subscription.cancel$0(0);
      if (!!J.getInterceptor(cancelFuture).$isFuture)
        cancelFuture.whenComplete$1(new P._cancelAndError_closure(future, error, stackTrace));
      else
        future._completeError$2(error, stackTrace);
    },
    _cancelAndErrorWithReplacement: function(subscription, future, error, stackTrace) {
      $.Zone__current.toString;
      P._cancelAndError(subscription, future, error, stackTrace);
    },
    _cancelAndErrorClosure: function(subscription, future) {
      return new P._cancelAndErrorClosure_closure(subscription, future);
    },
    _cancelAndValue: function(subscription, future, value) {
      var cancelFuture = subscription.cancel$0(0);
      if (!!J.getInterceptor(cancelFuture).$isFuture)
        cancelFuture.whenComplete$1(new P._cancelAndValue_closure(future, value));
      else
        future._complete$1(value);
    },
    _addErrorWithReplacement: function(sink, error, stackTrace) {
      $.Zone__current.toString;
      sink._addError$2(error, stackTrace);
    },
    Timer_Timer: function(duration, callback) {
      var t1 = $.Zone__current;
      if (t1 === C.C__RootZone) {
        t1.toString;
        return P.Timer__createTimer(duration, callback);
      }
      return P.Timer__createTimer(duration, t1.bindCallback$2$runGuarded(callback, true));
    },
    Timer__createTimer: function(duration, callback) {
      var milliseconds = C.JSNumber_methods._tdivFast$1(duration._duration, 1000);
      return H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
    },
    _rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
      var t1 = {};
      t1.error = error;
      P._schedulePriorityAsyncCallback(new P._rootHandleUncaughtError_closure(t1, stackTrace));
    },
    _rootRun: function($self, $parent, zone, f) {
      var old, t1;
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$0();
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunUnary: function($self, $parent, zone, f, arg) {
      var old, t1;
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$1(arg);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunBinary: function($self, $parent, zone, f, arg1, arg2) {
      var old, t1;
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$2(arg1, arg2);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootScheduleMicrotask: function($self, $parent, zone, f) {
      var t1 = C.C__RootZone !== zone;
      if (t1)
        f = zone.bindCallback$2$runGuarded(f, !(!t1 || false));
      P._scheduleAsyncCallback(f);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: {
      "^": "Closure:1;_box_0",
      call$1: [function(_) {
        var t1, f;
        --init.globalState.topEventLoop._activeJsAsyncCount;
        t1 = this._box_0;
        f = t1.storedCallback;
        t1.storedCallback = null;
        f.call$0();
      }, null, null, 2, 0, null, 5, [], "call"]
    },
    _AsyncRun__initializeScheduleImmediate_closure: {
      "^": "Closure:41;_box_0,div,span",
      call$1: function(callback) {
        var t1, t2;
        ++init.globalState.topEventLoop._activeJsAsyncCount;
        this._box_0.storedCallback = callback;
        t1 = this.div;
        t2 = this.span;
        t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
      }
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: {
      "^": "Closure:4;callback",
      call$0: [function() {
        --init.globalState.topEventLoop._activeJsAsyncCount;
        this.callback.call$0();
      }, null, null, 0, 0, null, "call"]
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: {
      "^": "Closure:4;callback",
      call$0: [function() {
        --init.globalState.topEventLoop._activeJsAsyncCount;
        this.callback.call$0();
      }, null, null, 0, 0, null, "call"]
    },
    _awaitOnObject_closure: {
      "^": "Closure:1;bodyFunction",
      call$1: [function(result) {
        return this.bodyFunction.call$2(0, result);
      }, null, null, 2, 0, null, 6, [], "call"]
    },
    _awaitOnObject_closure0: {
      "^": "Closure:38;bodyFunction",
      call$2: [function(error, stackTrace) {
        this.bodyFunction.call$2(1, new H.ExceptionAndStackTrace(error, stackTrace));
      }, null, null, 4, 0, null, 2, [], 4, [], "call"]
    },
    _wrapJsFunctionForAsync_closure: {
      "^": "Closure:51;$protected",
      call$2: [function(errorCode, result) {
        this.$protected(errorCode, result);
      }, null, null, 4, 0, null, 41, [], 6, [], "call"]
    },
    _BroadcastStream: {
      "^": "_ControllerStream;_async$_controller",
      get$isBroadcast: function() {
        return true;
      }
    },
    _BroadcastSubscription: {
      "^": "_ControllerSubscription;_eventState@,_async$_next@,_async$_previous@,_async$_controller,_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
      _expectsEvent$1: function(eventId) {
        return (this._eventState & 1) === eventId;
      },
      _toggleEventId$0: function() {
        this._eventState ^= 1;
      },
      get$_isFiring: function() {
        return (this._eventState & 2) !== 0;
      },
      _setRemoveAfterFiring$0: function() {
        this._eventState |= 4;
      },
      get$_removeAfterFiring: function() {
        return (this._eventState & 4) !== 0;
      },
      _onPause$0: [function() {
      }, "call$0", "get$_onPause", 0, 0, 7],
      _onResume$0: [function() {
      }, "call$0", "get$_onResume", 0, 0, 7]
    },
    _BroadcastStreamController: {
      "^": "Object;_state<",
      get$stream: function(_) {
        var t1 = new P._BroadcastStream(this);
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        return t1;
      },
      get$isPaused: function() {
        return false;
      },
      get$_isFiring: function() {
        return (this._state & 2) !== 0;
      },
      get$_mayAddEvent: function() {
        return this._state < 4;
      },
      _ensureDoneFuture$0: function() {
        var t1 = this._doneFuture;
        if (t1 != null)
          return t1;
        t1 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
        this._doneFuture = t1;
        return t1;
      },
      _addListener$1: function(subscription) {
        var oldLast;
        subscription.set$_eventState(this._state & 1);
        oldLast = this._lastSubscription;
        this._lastSubscription = subscription;
        subscription.set$_async$_next(null);
        subscription.set$_async$_previous(oldLast);
        if (oldLast == null)
          this._firstSubscription = subscription;
        else
          oldLast.set$_async$_next(subscription);
      },
      _removeListener$1: function(subscription) {
        var previous, next;
        previous = subscription.get$_async$_previous();
        next = subscription.get$_async$_next();
        if (previous == null)
          this._firstSubscription = next;
        else
          previous.set$_async$_next(next);
        if (next == null)
          this._lastSubscription = previous;
        else
          next.set$_async$_previous(previous);
        subscription.set$_async$_previous(subscription);
        subscription.set$_async$_next(subscription);
      },
      _subscribe$4: function(onData, onError, onDone, cancelOnError) {
        var t1, subscription, t2;
        if ((this._state & 4) !== 0) {
          t1 = new P._DoneStreamSubscription($.Zone__current, 0, onDone);
          t1.$builtinTypeInfo = this.$builtinTypeInfo;
          t1._schedule$0();
          return t1;
        }
        t1 = $.Zone__current;
        subscription = new P._BroadcastSubscription(0, null, null, this, null, null, null, t1, cancelOnError ? 1 : 0, null, null);
        subscription.$builtinTypeInfo = this.$builtinTypeInfo;
        subscription._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, H.getTypeArgumentByIndex(this, 0));
        subscription._async$_previous = subscription;
        subscription._async$_next = subscription;
        this._addListener$1(subscription);
        t1 = this._firstSubscription;
        t2 = this._lastSubscription;
        if (t1 == null ? t2 == null : t1 === t2)
          P._runGuarded(this.onListen);
        return subscription;
      },
      _recordCancel$1: function(sub) {
        if (sub.get$_async$_next() === sub)
          return;
        if (sub.get$_isFiring())
          sub._setRemoveAfterFiring$0();
        else {
          this._removeListener$1(sub);
          if ((this._state & 2) === 0 && this._firstSubscription == null)
            this._callOnCancel$0();
        }
        return;
      },
      _recordPause$1: function(subscription) {
      },
      _recordResume$1: function(subscription) {
      },
      _addEventError$0: ["super$_BroadcastStreamController$_addEventError", function() {
        if ((this._state & 4) !== 0)
          return new P.StateError("Cannot add new events after calling close");
        return new P.StateError("Cannot add new events while doing an addStream");
      }],
      add$1: [function(_, data) {
        if (!this.get$_mayAddEvent())
          throw H.wrapException(this._addEventError$0());
        this._sendData$1(data);
      }, "call$1", "get$add", 2, 0, function() {
        return H.computeSignature(function(T) {
          return {func: 1, v: true, args: [T]};
        }, this.$receiver, "_BroadcastStreamController");
      }, 7, []],
      addError$2: [function(error, stackTrace) {
        error = error != null ? error : new P.NullThrownError();
        if (!this.get$_mayAddEvent())
          throw H.wrapException(this._addEventError$0());
        $.Zone__current.toString;
        this._sendError$2(error, stackTrace);
      }, function(error) {
        return this.addError$2(error, null);
      }, "addError$1", "call$2", "call$1", "get$addError", 2, 2, 17, 1, 2, [], 4, []],
      close$0: function(_) {
        var doneFuture;
        if ((this._state & 4) !== 0)
          return this._doneFuture;
        if (!this.get$_mayAddEvent())
          throw H.wrapException(this._addEventError$0());
        this._state |= 4;
        doneFuture = this._ensureDoneFuture$0();
        this._sendDone$0();
        return doneFuture;
      },
      _async$_add$1: function(_, data) {
        this._sendData$1(data);
      },
      _addError$2: function(error, stackTrace) {
        this._sendError$2(error, stackTrace);
      },
      _close$0: function() {
        var addState = this._addStreamState;
        this._addStreamState = null;
        this._state &= 4294967287;
        C.JSNull_methods.complete$0(addState);
      },
      _forEachListener$1: function(action) {
        var t1, subscription, id, next;
        t1 = this._state;
        if ((t1 & 2) !== 0)
          throw H.wrapException(new P.StateError("Cannot fire new event. Controller is already firing an event"));
        subscription = this._firstSubscription;
        if (subscription == null)
          return;
        id = t1 & 1;
        this._state = t1 ^ 3;
        for (; subscription != null;)
          if (subscription._expectsEvent$1(id)) {
            subscription.set$_eventState(subscription.get$_eventState() | 2);
            action.call$1(subscription);
            subscription._toggleEventId$0();
            next = subscription.get$_async$_next();
            if (subscription.get$_removeAfterFiring())
              this._removeListener$1(subscription);
            subscription.set$_eventState(subscription.get$_eventState() & 4294967293);
            subscription = next;
          } else
            subscription = subscription.get$_async$_next();
        this._state &= 4294967293;
        if (this._firstSubscription == null)
          this._callOnCancel$0();
      },
      _callOnCancel$0: function() {
        if ((this._state & 4) !== 0 && this._doneFuture._state === 0)
          this._doneFuture._asyncComplete$1(null);
        P._runGuarded(this.onCancel);
      }
    },
    _SyncBroadcastStreamController: {
      "^": "_BroadcastStreamController;onListen,onCancel,_state,_firstSubscription,_lastSubscription,_addStreamState,_doneFuture",
      get$_mayAddEvent: function() {
        return P._BroadcastStreamController.prototype.get$_mayAddEvent.call(this) && (this._state & 2) === 0;
      },
      _addEventError$0: function() {
        if ((this._state & 2) !== 0)
          return new P.StateError("Cannot fire new event. Controller is already firing an event");
        return this.super$_BroadcastStreamController$_addEventError();
      },
      _sendData$1: function(data) {
        var t1, t2;
        t1 = this._firstSubscription;
        if (t1 == null)
          return;
        t2 = this._lastSubscription;
        if (t1 == null ? t2 == null : t1 === t2) {
          this._state |= 2;
          t1._async$_add$1(0, data);
          this._state &= 4294967293;
          if (this._firstSubscription == null)
            this._callOnCancel$0();
          return;
        }
        this._forEachListener$1(new P._SyncBroadcastStreamController__sendData_closure(this, data));
      },
      _sendError$2: function(error, stackTrace) {
        if (this._firstSubscription == null)
          return;
        this._forEachListener$1(new P._SyncBroadcastStreamController__sendError_closure(this, error, stackTrace));
      },
      _sendDone$0: function() {
        if (this._firstSubscription != null)
          this._forEachListener$1(new P._SyncBroadcastStreamController__sendDone_closure(this));
        else
          this._doneFuture._asyncComplete$1(null);
      }
    },
    _SyncBroadcastStreamController__sendData_closure: {
      "^": "Closure;$this,data",
      call$1: function(subscription) {
        subscription._async$_add$1(0, this.data);
      },
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [[P._BufferingStreamSubscription, T]]};
        }, this.$this, "_SyncBroadcastStreamController");
      }
    },
    _SyncBroadcastStreamController__sendError_closure: {
      "^": "Closure;$this,error,stackTrace",
      call$1: function(subscription) {
        subscription._addError$2(this.error, this.stackTrace);
      },
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [[P._BufferingStreamSubscription, T]]};
        }, this.$this, "_SyncBroadcastStreamController");
      }
    },
    _SyncBroadcastStreamController__sendDone_closure: {
      "^": "Closure;$this",
      call$1: function(subscription) {
        subscription._close$0();
      },
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [[P._BufferingStreamSubscription, T]]};
        }, this.$this, "_SyncBroadcastStreamController");
      }
    },
    _AsyncBroadcastStreamController: {
      "^": "_BroadcastStreamController;onListen,onCancel,_state,_firstSubscription,_lastSubscription,_addStreamState,_doneFuture",
      _sendData$1: function(data) {
        var subscription, t1;
        for (subscription = this._firstSubscription; subscription != null; subscription = subscription.get$_async$_next()) {
          t1 = new P._DelayedData(data, null);
          t1.$builtinTypeInfo = this.$builtinTypeInfo;
          subscription._addPending$1(t1);
        }
      },
      _sendError$2: function(error, stackTrace) {
        var subscription;
        for (subscription = this._firstSubscription; subscription != null; subscription = subscription.get$_async$_next())
          subscription._addPending$1(new P._DelayedError(error, stackTrace, null));
      },
      _sendDone$0: function() {
        var subscription = this._firstSubscription;
        if (subscription != null)
          for (; subscription != null; subscription = subscription.get$_async$_next())
            subscription._addPending$1(C.C__DelayedDone);
        else
          this._doneFuture._asyncComplete$1(null);
      }
    },
    Future: {
      "^": "Object;"
    },
    TimeoutException: {
      "^": "Object;message,duration>",
      toString$0: function(_) {
        var result = "TimeoutException after " + H.S(this.duration);
        return result + ": " + this.message;
      }
    },
    _Completer: {
      "^": "Object;future<",
      completeError$2: [function(error, stackTrace) {
        error = error != null ? error : new P.NullThrownError();
        if (this.future._state !== 0)
          throw H.wrapException(new P.StateError("Future already completed"));
        $.Zone__current.toString;
        this._completeError$2(error, stackTrace);
      }, function(error) {
        return this.completeError$2(error, null);
      }, "completeError$1", "call$2", "call$1", "get$completeError", 2, 2, 17, 1, 2, [], 4, []]
    },
    _AsyncCompleter: {
      "^": "_Completer;future",
      complete$1: function(_, value) {
        var t1 = this.future;
        if (t1._state !== 0)
          throw H.wrapException(new P.StateError("Future already completed"));
        t1._asyncComplete$1(value);
      },
      complete$0: function($receiver) {
        return this.complete$1($receiver, null);
      },
      _completeError$2: function(error, stackTrace) {
        this.future._asyncCompleteError$2(error, stackTrace);
      }
    },
    _SyncCompleter: {
      "^": "_Completer;future",
      complete$1: function(_, value) {
        var t1 = this.future;
        if (t1._state !== 0)
          throw H.wrapException(new P.StateError("Future already completed"));
        t1._complete$1(value);
      },
      complete$0: function($receiver) {
        return this.complete$1($receiver, null);
      },
      _completeError$2: function(error, stackTrace) {
        this.future._completeError$2(error, stackTrace);
      }
    },
    _FutureListener: {
      "^": "Object;_nextListener@,result>,state,callback<,errorCallback",
      get$_zone: function() {
        return this.result._zone;
      },
      get$handlesValue: function() {
        return (this.state & 1) !== 0;
      },
      get$handlesError: function() {
        return (this.state & 2) !== 0;
      },
      get$handlesComplete: function() {
        return this.state === 8;
      },
      get$hasErrorCallback: function() {
        return this.errorCallback != null;
      },
      handleValue$1: function(sourceResult) {
        return this.result._zone.runUnary$2(this.callback, sourceResult);
      },
      matchesErrorTest$1: function(asyncError) {
        if (this.state !== 6)
          return true;
        return this.result._zone.runUnary$2(this.callback, J.get$error$x(asyncError));
      },
      handleError$1: function(asyncError) {
        var t1, t2, t3, t4;
        t1 = this.errorCallback;
        t2 = H.getDynamicRuntimeType();
        t2 = H.buildFunctionType(t2, [t2, t2])._isTest$1(t1);
        t3 = J.getInterceptor$x(asyncError);
        t4 = this.result;
        if (t2)
          return t4._zone.runBinary$3(t1, t3.get$error(asyncError), asyncError.get$stackTrace());
        else
          return t4._zone.runUnary$2(t1, t3.get$error(asyncError));
      },
      handleWhenComplete$0: function() {
        return this.result._zone.run$1(0, this.callback);
      }
    },
    _Future: {
      "^": "Object;_state<,_zone<,_resultOrListeners<",
      get$_isChained: function() {
        return this._state === 2;
      },
      get$_isComplete: function() {
        return this._state >= 4;
      },
      get$_hasError: function() {
        return this._state === 8;
      },
      _setChained$1: function(source) {
        this._state = 2;
        this._resultOrListeners = source;
      },
      then$2$onError: function(f, onError) {
        var currentZone = $.Zone__current;
        if (currentZone !== C.C__RootZone) {
          currentZone.toString;
          if (onError != null)
            onError = P._registerErrorHandler(onError, currentZone);
        }
        return this._thenNoZoneRegistration$2(f, onError);
      },
      then$1: function(f) {
        return this.then$2$onError(f, null);
      },
      _thenNoZoneRegistration$2: function(f, onError) {
        var result = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
        this._addListener$1(H.setRuntimeTypeInfo(new P._FutureListener(null, result, onError == null ? 1 : 3, f, onError), [null, null]));
        return result;
      },
      whenComplete$1: function(action) {
        var t1, result;
        t1 = $.Zone__current;
        result = new P._Future(0, t1, null);
        result.$builtinTypeInfo = this.$builtinTypeInfo;
        if (t1 !== C.C__RootZone)
          t1.toString;
        this._addListener$1(H.setRuntimeTypeInfo(new P._FutureListener(null, result, 8, action, null), [null, null]));
        return result;
      },
      _setPendingComplete$0: function() {
        this._state = 1;
      },
      _clearPendingComplete$0: function() {
        this._state = 0;
      },
      get$_error: function() {
        return this._resultOrListeners;
      },
      get$_chainSource: function() {
        return this._resultOrListeners;
      },
      _setValue$1: function(value) {
        this._state = 4;
        this._resultOrListeners = value;
      },
      _setErrorObject$1: function(error) {
        this._state = 8;
        this._resultOrListeners = error;
      },
      _cloneResult$1: function(source) {
        this._state = source.get$_state();
        this._resultOrListeners = source.get$_resultOrListeners();
      },
      _addListener$1: function(listener) {
        var t1, source;
        t1 = this._state;
        if (t1 <= 1) {
          listener._nextListener = this._resultOrListeners;
          this._resultOrListeners = listener;
        } else {
          if (t1 === 2) {
            source = this._resultOrListeners;
            if (!source.get$_isComplete()) {
              source._addListener$1(listener);
              return;
            }
            this._state = source.get$_state();
            this._resultOrListeners = source.get$_resultOrListeners();
          }
          t1 = this._zone;
          t1.toString;
          P._rootScheduleMicrotask(null, null, t1, new P._Future__addListener_closure(this, listener));
        }
      },
      _prependListeners$1: function(listeners) {
        var t1, t2, existingListeners, cursor, source;
        t1 = {};
        t1.listeners = listeners;
        if (listeners == null)
          return;
        t2 = this._state;
        if (t2 <= 1) {
          existingListeners = this._resultOrListeners;
          this._resultOrListeners = listeners;
          if (existingListeners != null) {
            for (cursor = listeners; cursor.get$_nextListener() != null;)
              cursor = cursor.get$_nextListener();
            cursor.set$_nextListener(existingListeners);
          }
        } else {
          if (t2 === 2) {
            source = this._resultOrListeners;
            if (!source.get$_isComplete()) {
              source._prependListeners$1(listeners);
              return;
            }
            this._state = source.get$_state();
            this._resultOrListeners = source.get$_resultOrListeners();
          }
          t1.listeners = this._reverseListeners$1(listeners);
          t2 = this._zone;
          t2.toString;
          P._rootScheduleMicrotask(null, null, t2, new P._Future__prependListeners_closure(t1, this));
        }
      },
      _removeListeners$0: function() {
        var current = this._resultOrListeners;
        this._resultOrListeners = null;
        return this._reverseListeners$1(current);
      },
      _reverseListeners$1: function(listeners) {
        var current, prev, next;
        for (current = listeners, prev = null; current != null; prev = current, current = next) {
          next = current.get$_nextListener();
          current.set$_nextListener(prev);
        }
        return prev;
      },
      _complete$1: function(value) {
        var listeners;
        if (!!J.getInterceptor(value).$isFuture)
          P._Future__chainCoreFuture(value, this);
        else {
          listeners = this._removeListeners$0();
          this._state = 4;
          this._resultOrListeners = value;
          P._Future__propagateToListeners(this, listeners);
        }
      },
      _completeWithValue$1: function(value) {
        var listeners = this._removeListeners$0();
        this._state = 4;
        this._resultOrListeners = value;
        P._Future__propagateToListeners(this, listeners);
      },
      _completeError$2: [function(error, stackTrace) {
        var listeners = this._removeListeners$0();
        this._state = 8;
        this._resultOrListeners = new P.AsyncError(error, stackTrace);
        P._Future__propagateToListeners(this, listeners);
      }, function(error) {
        return this._completeError$2(error, null);
      }, "_completeError$1", "call$2", "call$1", "get$_completeError", 2, 2, 62, 1, 2, [], 4, []],
      _asyncComplete$1: function(value) {
        var t1;
        if (!!J.getInterceptor(value).$isFuture) {
          if (value._state === 8) {
            this._state = 1;
            t1 = this._zone;
            t1.toString;
            P._rootScheduleMicrotask(null, null, t1, new P._Future__asyncComplete_closure(this, value));
          } else
            P._Future__chainCoreFuture(value, this);
          return;
        }
        this._state = 1;
        t1 = this._zone;
        t1.toString;
        P._rootScheduleMicrotask(null, null, t1, new P._Future__asyncComplete_closure0(this, value));
      },
      _asyncCompleteError$2: function(error, stackTrace) {
        var t1;
        this._state = 1;
        t1 = this._zone;
        t1.toString;
        P._rootScheduleMicrotask(null, null, t1, new P._Future__asyncCompleteError_closure(this, error, stackTrace));
      },
      timeout$2$onTimeout: [function(_, timeLimit, onTimeout) {
        var t1, result, zone;
        t1 = {};
        t1.onTimeout = onTimeout;
        if (this._state >= 4) {
          t1 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
          t1._asyncComplete$1(this);
          return t1;
        }
        result = new P._Future(0, $.Zone__current, null);
        result.$builtinTypeInfo = this.$builtinTypeInfo;
        t1.timer = null;
        zone = $.Zone__current;
        zone.toString;
        t1.onTimeout = onTimeout;
        t1.timer = P.Timer_Timer(timeLimit, new P._Future_timeout_closure(t1, result, zone));
        this.then$2$onError(new P._Future_timeout_closure0(t1, this, result), new P._Future_timeout_closure1(t1, result));
        return result;
      }, function($receiver, timeLimit) {
        return this.timeout$2$onTimeout($receiver, timeLimit, null);
      }, "timeout$1", "call$2$onTimeout", "call$1", "get$timeout", 2, 3, function() {
        return H.computeSignature(function(T) {
          return {func: 1, ret: [P.Future, T], args: [P.Duration], named: {onTimeout: {func: 1}}};
        }, this.$receiver, "_Future");
      }, 1],
      $isFuture: 1,
      static: {
        _Future$immediate: function(value, $T) {
          var t1 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [$T]);
          t1._asyncComplete$1(value);
          return t1;
        },
        _Future__chainForeignFuture: function(source, target) {
          var e, s, exception, t1;
          target._setPendingComplete$0();
          try {
            source.then$2$onError(new P._Future__chainForeignFuture_closure(target), new P._Future__chainForeignFuture_closure0(target));
          } catch (exception) {
            t1 = H.unwrapException(exception);
            e = t1;
            s = H.getTraceFromException(exception);
            P.scheduleMicrotask(new P._Future__chainForeignFuture_closure1(target, e, s));
          }
        },
        _Future__chainCoreFuture: function(source, target) {
          var listeners;
          for (; source.get$_isChained();)
            source = source.get$_chainSource();
          if (source.get$_isComplete()) {
            listeners = target._removeListeners$0();
            target._cloneResult$1(source);
            P._Future__propagateToListeners(target, listeners);
          } else {
            listeners = target.get$_resultOrListeners();
            target._setChained$1(source);
            source._prependListeners$1(listeners);
          }
        },
        _Future__propagateToListeners: function(source, listeners) {
          var t1, t2, t3, hasError, asyncError, t4, listeners0, sourceResult, zone, oldZone, result;
          t1 = {};
          t1.source = source;
          for (t2 = source; true;) {
            t3 = {};
            hasError = t2.get$_hasError();
            if (listeners == null) {
              if (hasError) {
                asyncError = t1.source.get$_error();
                t2 = t1.source.get$_zone();
                t3 = J.get$error$x(asyncError);
                t4 = asyncError.get$stackTrace();
                t2.toString;
                P._rootHandleUncaughtError(null, null, t2, t3, t4);
              }
              return;
            }
            for (; listeners.get$_nextListener() != null; listeners = listeners0) {
              listeners0 = listeners.get$_nextListener();
              listeners.set$_nextListener(null);
              P._Future__propagateToListeners(t1.source, listeners);
            }
            sourceResult = t1.source.get$_resultOrListeners();
            t3.listenerHasError = hasError;
            t3.listenerValueOrError = sourceResult;
            t2 = !hasError;
            if (!t2 || listeners.get$handlesValue() || listeners.get$handlesComplete()) {
              zone = listeners.get$_zone();
              if (hasError) {
                t4 = t1.source.get$_zone();
                t4.toString;
                t4 = t4 == null ? zone == null : t4 === zone;
                if (!t4)
                  zone.toString;
                else
                  t4 = true;
                t4 = !t4;
              } else
                t4 = false;
              if (t4) {
                asyncError = t1.source.get$_error();
                t2 = t1.source.get$_zone();
                t3 = J.get$error$x(asyncError);
                t4 = asyncError.get$stackTrace();
                t2.toString;
                P._rootHandleUncaughtError(null, null, t2, t3, t4);
                return;
              }
              oldZone = $.Zone__current;
              if (oldZone == null ? zone != null : oldZone !== zone)
                $.Zone__current = zone;
              else
                oldZone = null;
              if (listeners.get$handlesComplete())
                new P._Future__propagateToListeners_handleWhenCompleteCallback(t1, t3, hasError, listeners).call$0();
              else if (t2) {
                if (listeners.get$handlesValue())
                  new P._Future__propagateToListeners_handleValueCallback(t3, listeners, sourceResult).call$0();
              } else if (listeners.get$handlesError())
                new P._Future__propagateToListeners_handleError(t1, t3, listeners).call$0();
              if (oldZone != null)
                $.Zone__current = oldZone;
              t2 = t3.listenerValueOrError;
              t4 = J.getInterceptor(t2);
              if (!!t4.$isFuture) {
                result = J.get$result$x(listeners);
                if (!!t4.$is_Future)
                  if (t2._state >= 4) {
                    listeners = result._removeListeners$0();
                    result._cloneResult$1(t2);
                    t1.source = t2;
                    continue;
                  } else
                    P._Future__chainCoreFuture(t2, result);
                else
                  P._Future__chainForeignFuture(t2, result);
                return;
              }
            }
            result = J.get$result$x(listeners);
            listeners = result._removeListeners$0();
            t2 = t3.listenerHasError;
            t3 = t3.listenerValueOrError;
            if (!t2)
              result._setValue$1(t3);
            else
              result._setErrorObject$1(t3);
            t1.source = result;
            t2 = result;
          }
        }
      }
    },
    _Future__addListener_closure: {
      "^": "Closure:4;$this,listener",
      call$0: function() {
        P._Future__propagateToListeners(this.$this, this.listener);
      }
    },
    _Future__prependListeners_closure: {
      "^": "Closure:4;_box_0,$this",
      call$0: function() {
        P._Future__propagateToListeners(this.$this, this._box_0.listeners);
      }
    },
    _Future__chainForeignFuture_closure: {
      "^": "Closure:1;target",
      call$1: [function(value) {
        var t1 = this.target;
        t1._clearPendingComplete$0();
        t1._complete$1(value);
      }, null, null, 2, 0, null, 3, [], "call"]
    },
    _Future__chainForeignFuture_closure0: {
      "^": "Closure:68;target",
      call$2: [function(error, stackTrace) {
        this.target._completeError$2(error, stackTrace);
      }, function(error) {
        return this.call$2(error, null);
      }, "call$1", null, null, null, 2, 2, null, 1, 2, [], 4, [], "call"]
    },
    _Future__chainForeignFuture_closure1: {
      "^": "Closure:4;target,e,s",
      call$0: [function() {
        this.target._completeError$2(this.e, this.s);
      }, null, null, 0, 0, null, "call"]
    },
    _Future__asyncComplete_closure: {
      "^": "Closure:4;$this,coreFuture",
      call$0: function() {
        P._Future__chainCoreFuture(this.coreFuture, this.$this);
      }
    },
    _Future__asyncComplete_closure0: {
      "^": "Closure:4;$this,typedValue",
      call$0: function() {
        this.$this._completeWithValue$1(this.typedValue);
      }
    },
    _Future__asyncCompleteError_closure: {
      "^": "Closure:4;$this,error,stackTrace",
      call$0: function() {
        this.$this._completeError$2(this.error, this.stackTrace);
      }
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: {
      "^": "Closure:7;_box_1,_box_0,hasError,listener",
      call$0: function() {
        var completeResult, e, s, exception, t1, t2, originalSource;
        completeResult = null;
        try {
          completeResult = this.listener.handleWhenComplete$0();
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          if (this.hasError) {
            t1 = J.get$error$x(this._box_1.source.get$_error());
            t2 = e;
            t2 = t1 == null ? t2 == null : t1 === t2;
            t1 = t2;
          } else
            t1 = false;
          t2 = this._box_0;
          if (t1)
            t2.listenerValueOrError = this._box_1.source.get$_error();
          else
            t2.listenerValueOrError = new P.AsyncError(e, s);
          t2.listenerHasError = true;
          return;
        }
        if (!!J.getInterceptor(completeResult).$isFuture) {
          if (completeResult instanceof P._Future && completeResult.get$_state() >= 4) {
            if (completeResult.get$_state() === 8) {
              t1 = this._box_0;
              t1.listenerValueOrError = completeResult.get$_resultOrListeners();
              t1.listenerHasError = true;
            }
            return;
          }
          originalSource = this._box_1.source;
          t1 = this._box_0;
          t1.listenerValueOrError = completeResult.then$1(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(originalSource));
          t1.listenerHasError = false;
        }
      }
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: {
      "^": "Closure:1;originalSource",
      call$1: [function(_) {
        return this.originalSource;
      }, null, null, 2, 0, null, 5, [], "call"]
    },
    _Future__propagateToListeners_handleValueCallback: {
      "^": "Closure:7;_box_0,listener,sourceResult",
      call$0: function() {
        var e, s, exception, t1;
        try {
          this._box_0.listenerValueOrError = this.listener.handleValue$1(this.sourceResult);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          t1 = this._box_0;
          t1.listenerValueOrError = new P.AsyncError(e, s);
          t1.listenerHasError = true;
        }
      }
    },
    _Future__propagateToListeners_handleError: {
      "^": "Closure:7;_box_1,_box_0,listener",
      call$0: function() {
        var asyncError, e, s, t1, t2, exception, t3, t4;
        try {
          asyncError = this._box_1.source.get$_error();
          t1 = this.listener;
          if (t1.matchesErrorTest$1(asyncError) === true && t1.get$hasErrorCallback()) {
            t2 = this._box_0;
            t2.listenerValueOrError = t1.handleError$1(asyncError);
            t2.listenerHasError = false;
          }
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          t1 = this._box_1;
          t2 = J.get$error$x(t1.source.get$_error());
          t3 = e;
          t4 = this._box_0;
          if (t2 == null ? t3 == null : t2 === t3)
            t4.listenerValueOrError = t1.source.get$_error();
          else
            t4.listenerValueOrError = new P.AsyncError(e, s);
          t4.listenerHasError = true;
        }
      }
    },
    _Future_timeout_closure: {
      "^": "Closure:4;_box_0,result,zone",
      call$0: function() {
        var e, s, exception, t1;
        try {
          this.result._complete$1(this.zone.run$1(0, this._box_0.onTimeout));
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          this.result._completeError$2(e, s);
        }
      }
    },
    _Future_timeout_closure0: {
      "^": "Closure;_box_0,$this,result",
      call$1: [function(v) {
        var t1 = this._box_0.timer;
        if (t1._handle != null) {
          t1.cancel$0(0);
          this.result._completeWithValue$1(v);
        }
      }, null, null, 2, 0, null, 16, [], "call"],
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [T]};
        }, this.$this, "_Future");
      }
    },
    _Future_timeout_closure1: {
      "^": "Closure:9;_box_0,result",
      call$2: [function(e, s) {
        var t1 = this._box_0.timer;
        if (t1._handle != null) {
          t1.cancel$0(0);
          this.result._completeError$2(e, s);
        }
      }, null, null, 4, 0, null, 0, [], 8, [], "call"]
    },
    _AsyncCallbackEntry: {
      "^": "Object;callback<,next*"
    },
    Stream: {
      "^": "Object;",
      get$isBroadcast: function() {
        return false;
      },
      where$1: function(_, test) {
        return H.setRuntimeTypeInfo(new P._WhereStream(test, this), [H.getRuntimeTypeArgument(this, "Stream", 0)]);
      },
      map$1: function(_, convert) {
        return H.setRuntimeTypeInfo(new P._MapStream(convert, this), [H.getRuntimeTypeArgument(this, "Stream", 0), null]);
      },
      handleError$2$test: function(onError, test) {
        return H.setRuntimeTypeInfo(new P._HandleErrorStream(onError, test, this), [H.getRuntimeTypeArgument(this, "Stream", 0)]);
      },
      handleError$1: function(onError) {
        return this.handleError$2$test(onError, null);
      },
      contains$1: function(_, needle) {
        var t1, future;
        t1 = {};
        future = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [P.bool]);
        t1.subscription = null;
        t1.subscription = this.listen$4$cancelOnError$onDone$onError(new P.Stream_contains_closure(t1, this, needle, future), true, new P.Stream_contains_closure0(future), future.get$_completeError());
        return future;
      },
      forEach$1: function(_, action) {
        var t1, future;
        t1 = {};
        future = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
        t1.subscription = null;
        t1.subscription = this.listen$4$cancelOnError$onDone$onError(new P.Stream_forEach_closure(t1, this, action, future), true, new P.Stream_forEach_closure0(future), future.get$_completeError());
        return future;
      },
      get$length: function(_) {
        var t1, future;
        t1 = {};
        future = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [P.$int]);
        t1.count = 0;
        this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
        return future;
      },
      get$isEmpty: function(_) {
        var t1, future;
        t1 = {};
        future = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [P.bool]);
        t1.subscription = null;
        t1.subscription = this.listen$4$cancelOnError$onDone$onError(new P.Stream_isEmpty_closure(t1, future), true, new P.Stream_isEmpty_closure0(future), future.get$_completeError());
        return future;
      },
      toList$0: function(_) {
        var result, future;
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(this, "Stream", 0)]);
        future = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [[P.List, H.getRuntimeTypeArgument(this, "Stream", 0)]]);
        this.listen$4$cancelOnError$onDone$onError(new P.Stream_toList_closure(this, result), true, new P.Stream_toList_closure0(result, future), future.get$_completeError());
        return future;
      },
      get$first: function(_) {
        var t1, future;
        t1 = {};
        future = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [H.getRuntimeTypeArgument(this, "Stream", 0)]);
        t1.subscription = null;
        t1.subscription = this.listen$4$cancelOnError$onDone$onError(new P.Stream_first_closure(t1, this, future), true, new P.Stream_first_closure0(future), future.get$_completeError());
        return future;
      },
      get$last: function(_) {
        var t1, future;
        t1 = {};
        future = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [H.getRuntimeTypeArgument(this, "Stream", 0)]);
        t1.result = null;
        t1.foundResult = false;
        this.listen$4$cancelOnError$onDone$onError(new P.Stream_last_closure(t1, this), true, new P.Stream_last_closure0(t1, future), future.get$_completeError());
        return future;
      },
      singleWhere$1: function(_, test) {
        var t1, future;
        t1 = {};
        future = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [H.getRuntimeTypeArgument(this, "Stream", 0)]);
        t1.result = null;
        t1.foundResult = false;
        t1.subscription = null;
        t1.subscription = this.listen$4$cancelOnError$onDone$onError(new P.Stream_singleWhere_closure(t1, this, test, future), true, new P.Stream_singleWhere_closure0(t1, future), future.get$_completeError());
        return future;
      },
      elementAt$1: function(_, index) {
        var t1, future;
        t1 = {};
        if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
          throw H.wrapException(P.ArgumentError$(index));
        future = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [H.getRuntimeTypeArgument(this, "Stream", 0)]);
        t1.subscription = null;
        t1.elementIndex = 0;
        t1.subscription = this.listen$4$cancelOnError$onDone$onError(new P.Stream_elementAt_closure(t1, this, index, future), true, new P.Stream_elementAt_closure0(t1, this, index, future), future.get$_completeError());
        return future;
      },
      timeout$2$onTimeout: [function(_, timeLimit, onTimeout) {
        var t1, t2, t3, controller;
        t1 = {};
        t1.controller = null;
        t1.subscription = null;
        t1.timer = null;
        t1.zone = null;
        t1.timeout = null;
        t2 = new P.Stream_timeout_onListen(t1, this, timeLimit, onTimeout, new P.Stream_timeout_onData(t1, this, timeLimit), new P.Stream_timeout_onError(t1, timeLimit), new P.Stream_timeout_onDone(t1));
        t3 = new P.Stream_timeout_onCancel(t1);
        controller = this.get$isBroadcast() ? H.setRuntimeTypeInfo(new P._SyncBroadcastStreamController(t2, t3, 0, null, null, null, null), [H.getRuntimeTypeArgument(this, "Stream", 0)]) : H.setRuntimeTypeInfo(new P._SyncStreamController(null, 0, null, t2, new P.Stream_timeout_closure(t1), new P.Stream_timeout_closure0(t1, timeLimit), t3), [H.getRuntimeTypeArgument(this, "Stream", 0)]);
        t1.controller = controller;
        return controller.get$stream(controller);
      }, function($receiver, timeLimit) {
        return this.timeout$2$onTimeout($receiver, timeLimit, null);
      }, "timeout$1", "call$2$onTimeout", "call$1", "get$timeout", 2, 3, function() {
        return H.computeSignature(function(T) {
          return {func: 1, ret: [P.Stream, T], args: [P.Duration], named: {onTimeout: {func: 1, v: true, args: [[P.EventSink, T]]}}};
        }, this.$receiver, "Stream");
      }, 1]
    },
    Stream_contains_closure: {
      "^": "Closure;_box_0,$this,needle,future",
      call$1: [function(element) {
        var t1, t2;
        t1 = this._box_0;
        t2 = this.future;
        P._runUserCode(new P.Stream_contains__closure(this.needle, element), new P.Stream_contains__closure0(t1, t2), P._cancelAndErrorClosure(t1.subscription, t2));
      }, null, null, 2, 0, null, 9, [], "call"],
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [T]};
        }, this.$this, "Stream");
      }
    },
    Stream_contains__closure: {
      "^": "Closure:4;needle,element",
      call$0: function() {
        return J.$eq$(this.element, this.needle);
      }
    },
    Stream_contains__closure0: {
      "^": "Closure:29;_box_0,future",
      call$1: function(isMatch) {
        if (isMatch === true)
          P._cancelAndValue(this._box_0.subscription, this.future, true);
      }
    },
    Stream_contains_closure0: {
      "^": "Closure:4;future",
      call$0: [function() {
        this.future._complete$1(false);
      }, null, null, 0, 0, null, "call"]
    },
    Stream_forEach_closure: {
      "^": "Closure;_box_0,$this,action,future",
      call$1: [function(element) {
        P._runUserCode(new P.Stream_forEach__closure(this.action, element), new P.Stream_forEach__closure0(), P._cancelAndErrorClosure(this._box_0.subscription, this.future));
      }, null, null, 2, 0, null, 9, [], "call"],
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [T]};
        }, this.$this, "Stream");
      }
    },
    Stream_forEach__closure: {
      "^": "Closure:4;action,element",
      call$0: function() {
        return this.action.call$1(this.element);
      }
    },
    Stream_forEach__closure0: {
      "^": "Closure:1;",
      call$1: function(_) {
      }
    },
    Stream_forEach_closure0: {
      "^": "Closure:4;future",
      call$0: [function() {
        this.future._complete$1(null);
      }, null, null, 0, 0, null, "call"]
    },
    Stream_length_closure: {
      "^": "Closure:1;_box_0",
      call$1: [function(_) {
        ++this._box_0.count;
      }, null, null, 2, 0, null, 5, [], "call"]
    },
    Stream_length_closure0: {
      "^": "Closure:4;_box_0,future",
      call$0: [function() {
        this.future._complete$1(this._box_0.count);
      }, null, null, 0, 0, null, "call"]
    },
    Stream_isEmpty_closure: {
      "^": "Closure:1;_box_0,future",
      call$1: [function(_) {
        P._cancelAndValue(this._box_0.subscription, this.future, false);
      }, null, null, 2, 0, null, 5, [], "call"]
    },
    Stream_isEmpty_closure0: {
      "^": "Closure:4;future",
      call$0: [function() {
        this.future._complete$1(true);
      }, null, null, 0, 0, null, "call"]
    },
    Stream_toList_closure: {
      "^": "Closure;$this,result",
      call$1: [function(data) {
        this.result.push(data);
      }, null, null, 2, 0, null, 7, [], "call"],
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [T]};
        }, this.$this, "Stream");
      }
    },
    Stream_toList_closure0: {
      "^": "Closure:4;result,future",
      call$0: [function() {
        this.future._complete$1(this.result);
      }, null, null, 0, 0, null, "call"]
    },
    Stream_first_closure: {
      "^": "Closure;_box_0,$this,future",
      call$1: [function(value) {
        P._cancelAndValue(this._box_0.subscription, this.future, value);
      }, null, null, 2, 0, null, 3, [], "call"],
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [T]};
        }, this.$this, "Stream");
      }
    },
    Stream_first_closure0: {
      "^": "Closure:4;future",
      call$0: [function() {
        var e, s, t1, exception;
        try {
          t1 = H.IterableElementError_noElement();
          throw H.wrapException(t1);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          P._completeWithErrorCallback(this.future, e, s);
        }
      }, null, null, 0, 0, null, "call"]
    },
    Stream_last_closure: {
      "^": "Closure;_box_0,$this",
      call$1: [function(value) {
        var t1 = this._box_0;
        t1.foundResult = true;
        t1.result = value;
      }, null, null, 2, 0, null, 3, [], "call"],
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [T]};
        }, this.$this, "Stream");
      }
    },
    Stream_last_closure0: {
      "^": "Closure:4;_box_0,future",
      call$0: [function() {
        var e, s, t1, exception;
        t1 = this._box_0;
        if (t1.foundResult) {
          this.future._complete$1(t1.result);
          return;
        }
        try {
          t1 = H.IterableElementError_noElement();
          throw H.wrapException(t1);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          P._completeWithErrorCallback(this.future, e, s);
        }
      }, null, null, 0, 0, null, "call"]
    },
    Stream_singleWhere_closure: {
      "^": "Closure;_box_0,$this,test,future",
      call$1: [function(value) {
        var t1, t2;
        t1 = this._box_0;
        t2 = this.future;
        P._runUserCode(new P.Stream_singleWhere__closure(this.test, value), new P.Stream_singleWhere__closure0(t1, t2, value), P._cancelAndErrorClosure(t1.subscription, t2));
      }, null, null, 2, 0, null, 3, [], "call"],
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [T]};
        }, this.$this, "Stream");
      }
    },
    Stream_singleWhere__closure: {
      "^": "Closure:4;test,value",
      call$0: function() {
        return true === this.test.call$1(this.value);
      }
    },
    Stream_singleWhere__closure0: {
      "^": "Closure:29;_box_0,future,value",
      call$1: function(isMatch) {
        var e, s, t1, t2, exception;
        if (isMatch === true) {
          t1 = this._box_0;
          if (t1.foundResult) {
            try {
              t2 = H.IterableElementError_tooMany();
              throw H.wrapException(t2);
            } catch (exception) {
              t2 = H.unwrapException(exception);
              e = t2;
              s = H.getTraceFromException(exception);
              P._cancelAndErrorWithReplacement(t1.subscription, this.future, e, s);
            }
            return;
          }
          t1.foundResult = true;
          t1.result = this.value;
        }
      }
    },
    Stream_singleWhere_closure0: {
      "^": "Closure:4;_box_0,future",
      call$0: [function() {
        var e, s, t1, exception;
        t1 = this._box_0;
        if (t1.foundResult) {
          this.future._complete$1(t1.result);
          return;
        }
        try {
          t1 = H.IterableElementError_noElement();
          throw H.wrapException(t1);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          P._completeWithErrorCallback(this.future, e, s);
        }
      }, null, null, 0, 0, null, "call"]
    },
    Stream_elementAt_closure: {
      "^": "Closure;_box_0,$this,index,future",
      call$1: [function(value) {
        var t1 = this._box_0;
        if (J.$eq$(this.index, t1.elementIndex)) {
          P._cancelAndValue(t1.subscription, this.future, value);
          return;
        }
        ++t1.elementIndex;
      }, null, null, 2, 0, null, 3, [], "call"],
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [T]};
        }, this.$this, "Stream");
      }
    },
    Stream_elementAt_closure0: {
      "^": "Closure:4;_box_0,$this,index,future",
      call$0: [function() {
        this.future._completeError$1(P.IndexError$(this.index, this.$this, "index", null, this._box_0.elementIndex));
      }, null, null, 0, 0, null, "call"]
    },
    Stream_timeout_onData: {
      "^": "Closure;_box_0,$this,timeLimit",
      call$1: [function($event) {
        var t1, t2, t3;
        t1 = this._box_0;
        t1.timer.cancel$0(0);
        t1.controller.add$1(0, $event);
        t2 = t1.zone;
        t3 = t1.timeout;
        t2.toString;
        t1.timer = P.Timer__createTimer(this.timeLimit, t3);
      }, null, null, 2, 0, null, 26, [], "call"],
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, v: true, args: [T]};
        }, this.$this, "Stream");
      }
    },
    Stream_timeout_onError: {
      "^": "Closure:28;_box_0,timeLimit",
      call$2: [function(error, stackTrace) {
        var t1, t2, t3;
        t1 = this._box_0;
        t1.timer.cancel$0(0);
        t1.controller._addError$2(error, stackTrace);
        t2 = t1.zone;
        t3 = t1.timeout;
        t2.toString;
        t1.timer = P.Timer__createTimer(this.timeLimit, t3);
      }, null, null, 4, 0, null, 2, [], 4, [], "call"]
    },
    Stream_timeout_onDone: {
      "^": "Closure:7;_box_0",
      call$0: [function() {
        var t1 = this._box_0;
        t1.timer.cancel$0(0);
        t1.controller.close$0(0);
      }, null, null, 0, 0, null, "call"]
    },
    Stream_timeout_onListen: {
      "^": "Closure:7;_box_0,$this,timeLimit,onTimeout,onData,onError,onDone",
      call$0: function() {
        var t1, t2, t3;
        t1 = this._box_0;
        t1.zone = $.Zone__current;
        t1.timeout = new P.Stream_timeout_onListen_closure(t1, this.timeLimit);
        t1.subscription = this.$this.listen$3$onDone$onError(this.onData, this.onDone, this.onError);
        t2 = t1.zone;
        t3 = t1.timeout;
        t2.toString;
        t1.timer = P.Timer__createTimer(this.timeLimit, t3);
      }
    },
    Stream_timeout_onListen_closure: {
      "^": "Closure:4;_box_0,timeLimit",
      call$0: function() {
        this._box_0.controller.addError$2(new P.TimeoutException("No stream event", this.timeLimit), null);
      }
    },
    Stream_timeout_onCancel: {
      "^": "Closure:11;_box_0",
      call$0: [function() {
        var t1, result;
        t1 = this._box_0;
        t1.timer.cancel$0(0);
        result = t1.subscription.cancel$0(0);
        t1.subscription = null;
        return result;
      }, null, null, 0, 0, null, "call"]
    },
    Stream_timeout_closure: {
      "^": "Closure:4;_box_0",
      call$0: function() {
        var t1 = this._box_0;
        t1.timer.cancel$0(0);
        t1.subscription.pause$0(0);
      }
    },
    Stream_timeout_closure0: {
      "^": "Closure:4;_box_0,timeLimit",
      call$0: function() {
        var t1, t2, t3;
        t1 = this._box_0;
        t1.subscription.resume$0(0);
        t2 = t1.zone;
        t3 = t1.timeout;
        t2.toString;
        t1.timer = P.Timer__createTimer(this.timeLimit, t3);
      }
    },
    StreamSubscription: {
      "^": "Object;"
    },
    EventSink: {
      "^": "Object;"
    },
    _StreamController: {
      "^": "Object;_state<",
      get$stream: function(_) {
        var t1 = new P._ControllerStream(this);
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        return t1;
      },
      get$isPaused: function() {
        var t1 = this._state;
        return (t1 & 1) !== 0 ? this.get$_subscription().get$_isInputPaused() : (t1 & 2) === 0;
      },
      get$_pendingEvents: function() {
        if ((this._state & 8) === 0)
          return this._varData;
        return this._varData.get$varData();
      },
      _ensurePendingEvents$0: function() {
        var t1, state;
        if ((this._state & 8) === 0) {
          t1 = this._varData;
          if (t1 == null) {
            t1 = new P._StreamImplEvents(null, null, 0);
            t1.$builtinTypeInfo = this.$builtinTypeInfo;
            this._varData = t1;
          }
          return t1;
        }
        state = this._varData;
        state.get$varData();
        return state.get$varData();
      },
      get$_subscription: function() {
        if ((this._state & 8) !== 0)
          return this._varData.get$varData();
        return this._varData;
      },
      _badEventState$0: function() {
        if ((this._state & 4) !== 0)
          return new P.StateError("Cannot add event after closing");
        return new P.StateError("Cannot add event while adding a stream");
      },
      _ensureDoneFuture$0: function() {
        var t1 = this._doneFuture;
        if (t1 == null) {
          t1 = (this._state & 2) !== 0 ? $.$get$Future__nullFuture() : H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
          this._doneFuture = t1;
        }
        return t1;
      },
      add$1: function(_, value) {
        if (this._state >= 4)
          throw H.wrapException(this._badEventState$0());
        this._async$_add$1(0, value);
      },
      addError$2: function(error, stackTrace) {
        if (this._state >= 4)
          throw H.wrapException(this._badEventState$0());
        $.Zone__current.toString;
        this._addError$2(error, stackTrace);
      },
      close$0: function(_) {
        var t1 = this._state;
        if ((t1 & 4) !== 0)
          return this._ensureDoneFuture$0();
        if (t1 >= 4)
          throw H.wrapException(this._badEventState$0());
        t1 |= 4;
        this._state = t1;
        if ((t1 & 1) !== 0)
          this._sendDone$0();
        else if ((t1 & 3) === 0)
          this._ensurePendingEvents$0().add$1(0, C.C__DelayedDone);
        return this._ensureDoneFuture$0();
      },
      _async$_add$1: function(_, value) {
        var t1, t2;
        t1 = this._state;
        if ((t1 & 1) !== 0)
          this._sendData$1(value);
        else if ((t1 & 3) === 0) {
          t1 = this._ensurePendingEvents$0();
          t2 = new P._DelayedData(value, null);
          t2.$builtinTypeInfo = this.$builtinTypeInfo;
          t1.add$1(0, t2);
        }
      },
      _addError$2: function(error, stackTrace) {
        var t1 = this._state;
        if ((t1 & 1) !== 0)
          this._sendError$2(error, stackTrace);
        else if ((t1 & 3) === 0)
          this._ensurePendingEvents$0().add$1(0, new P._DelayedError(error, stackTrace, null));
      },
      _close$0: function() {
        var addState = this._varData;
        this._varData = addState.get$varData();
        this._state &= 4294967287;
        addState.complete$0(0);
      },
      _subscribe$4: function(onData, onError, onDone, cancelOnError) {
        var t1, subscription, pendingEvents, addState;
        if ((this._state & 3) !== 0)
          throw H.wrapException(new P.StateError("Stream has already been listened to."));
        t1 = $.Zone__current;
        subscription = new P._ControllerSubscription(this, null, null, null, t1, cancelOnError ? 1 : 0, null, null);
        subscription.$builtinTypeInfo = this.$builtinTypeInfo;
        subscription._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, H.getTypeArgumentByIndex(this, 0));
        pendingEvents = this.get$_pendingEvents();
        t1 = this._state |= 1;
        if ((t1 & 8) !== 0) {
          addState = this._varData;
          addState.set$varData(subscription);
          addState.resume$0(0);
        } else
          this._varData = subscription;
        subscription._setPendingEvents$1(pendingEvents);
        subscription._guardCallback$1(new P._StreamController__subscribe_closure(this));
        return subscription;
      },
      _recordCancel$1: function(subscription) {
        var result, e, s, exception, t1, result0;
        result = null;
        if ((this._state & 8) !== 0)
          result = this._varData.cancel$0(0);
        this._varData = null;
        this._state = this._state & 4294967286 | 2;
        if (result == null)
          try {
            result = this.onCancel.call$0();
          } catch (exception) {
            t1 = H.unwrapException(exception);
            e = t1;
            s = H.getTraceFromException(exception);
            result0 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
            result0._asyncCompleteError$2(e, s);
            result = result0;
          }
        else
          result = result.whenComplete$1(this.onCancel);
        t1 = new P._StreamController__recordCancel_complete(this);
        if (result != null)
          result = result.whenComplete$1(t1);
        else
          t1.call$0();
        return result;
      },
      _recordPause$1: function(subscription) {
        if ((this._state & 8) !== 0)
          this._varData.pause$0(0);
        P._runGuarded(this.onPause);
      },
      _recordResume$1: function(subscription) {
        if ((this._state & 8) !== 0)
          this._varData.resume$0(0);
        P._runGuarded(this.onResume);
      }
    },
    _StreamController__subscribe_closure: {
      "^": "Closure:4;$this",
      call$0: function() {
        P._runGuarded(this.$this.onListen);
      }
    },
    _StreamController__recordCancel_complete: {
      "^": "Closure:7;$this",
      call$0: [function() {
        var t1 = this.$this._doneFuture;
        if (t1 != null && t1._state === 0)
          t1._asyncComplete$1(null);
      }, null, null, 0, 0, null, "call"]
    },
    _SyncStreamControllerDispatch: {
      "^": "Object;",
      _sendData$1: function(data) {
        this.get$_subscription()._async$_add$1(0, data);
      },
      _sendError$2: function(error, stackTrace) {
        this.get$_subscription()._addError$2(error, stackTrace);
      },
      _sendDone$0: function() {
        this.get$_subscription()._close$0();
      }
    },
    _SyncStreamController: {
      "^": "_StreamController+_SyncStreamControllerDispatch;_varData,_state,_doneFuture,onListen,onPause,onResume,onCancel"
    },
    _ControllerStream: {
      "^": "_StreamImpl;_async$_controller",
      get$hashCode: function(_) {
        return (H.Primitives_objectHashCode(this._async$_controller) ^ 892482866) >>> 0;
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (this === other)
          return true;
        if (!(other instanceof P._ControllerStream))
          return false;
        return other._async$_controller === this._async$_controller;
      }
    },
    _ControllerSubscription: {
      "^": "_BufferingStreamSubscription;_async$_controller,_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
      _onCancel$0: function() {
        return this._async$_controller._recordCancel$1(this);
      },
      _onPause$0: [function() {
        this._async$_controller._recordPause$1(this);
      }, "call$0", "get$_onPause", 0, 0, 7],
      _onResume$0: [function() {
        this._async$_controller._recordResume$1(this);
      }, "call$0", "get$_onResume", 0, 0, 7]
    },
    _EventSink: {
      "^": "Object;"
    },
    _BufferingStreamSubscription: {
      "^": "Object;_zone<,_state<",
      _setPendingEvents$1: function(pendingEvents) {
        if (pendingEvents == null)
          return;
        this._pending = pendingEvents;
        if (!pendingEvents.get$isEmpty(pendingEvents)) {
          this._state = (this._state | 64) >>> 0;
          this._pending.schedule$1(this);
        }
      },
      pause$1: function(_, resumeSignal) {
        var t1 = this._state;
        if ((t1 & 8) !== 0)
          return;
        this._state = (t1 + 128 | 4) >>> 0;
        if (t1 < 128 && this._pending != null)
          this._pending.cancelSchedule$0();
        if ((t1 & 4) === 0 && (this._state & 32) === 0)
          this._guardCallback$1(this.get$_onPause());
      },
      pause$0: function($receiver) {
        return this.pause$1($receiver, null);
      },
      resume$0: function(_) {
        var t1 = this._state;
        if ((t1 & 8) !== 0)
          return;
        if (t1 >= 128) {
          t1 -= 128;
          this._state = t1;
          if (t1 < 128) {
            if ((t1 & 64) !== 0) {
              t1 = this._pending;
              t1 = !t1.get$isEmpty(t1);
            } else
              t1 = false;
            if (t1)
              this._pending.schedule$1(this);
            else {
              t1 = (this._state & 4294967291) >>> 0;
              this._state = t1;
              if ((t1 & 32) === 0)
                this._guardCallback$1(this.get$_onResume());
            }
          }
        }
      },
      cancel$0: function(_) {
        var t1 = (this._state & 4294967279) >>> 0;
        this._state = t1;
        if ((t1 & 8) !== 0)
          return this._cancelFuture;
        this._cancel$0();
        return this._cancelFuture;
      },
      get$_isInputPaused: function() {
        return (this._state & 4) !== 0;
      },
      get$isPaused: function() {
        return this._state >= 128;
      },
      _cancel$0: function() {
        var t1 = (this._state | 8) >>> 0;
        this._state = t1;
        if ((t1 & 64) !== 0)
          this._pending.cancelSchedule$0();
        if ((this._state & 32) === 0)
          this._pending = null;
        this._cancelFuture = this._onCancel$0();
      },
      _async$_add$1: ["super$_BufferingStreamSubscription$_add", function(_, data) {
        var t1 = this._state;
        if ((t1 & 8) !== 0)
          return;
        if (t1 < 32)
          this._sendData$1(data);
        else
          this._addPending$1(H.setRuntimeTypeInfo(new P._DelayedData(data, null), [null]));
      }],
      _addError$2: ["super$_BufferingStreamSubscription$_addError", function(error, stackTrace) {
        var t1 = this._state;
        if ((t1 & 8) !== 0)
          return;
        if (t1 < 32)
          this._sendError$2(error, stackTrace);
        else
          this._addPending$1(new P._DelayedError(error, stackTrace, null));
      }],
      _close$0: function() {
        var t1 = this._state;
        if ((t1 & 8) !== 0)
          return;
        t1 = (t1 | 2) >>> 0;
        this._state = t1;
        if (t1 < 32)
          this._sendDone$0();
        else
          this._addPending$1(C.C__DelayedDone);
      },
      _onPause$0: [function() {
      }, "call$0", "get$_onPause", 0, 0, 7],
      _onResume$0: [function() {
      }, "call$0", "get$_onResume", 0, 0, 7],
      _onCancel$0: function() {
        return;
      },
      _addPending$1: function($event) {
        var pending, t1;
        pending = this._pending;
        if (pending == null) {
          pending = H.setRuntimeTypeInfo(new P._StreamImplEvents(null, null, 0), [null]);
          this._pending = pending;
        }
        pending.add$1(0, $event);
        t1 = this._state;
        if ((t1 & 64) === 0) {
          t1 = (t1 | 64) >>> 0;
          this._state = t1;
          if (t1 < 128)
            this._pending.schedule$1(this);
        }
      },
      _sendData$1: function(data) {
        var t1 = this._state;
        this._state = (t1 | 32) >>> 0;
        this._zone.runUnaryGuarded$2(this._onData, data);
        this._state = (this._state & 4294967263) >>> 0;
        this._checkState$1((t1 & 4) !== 0);
      },
      _sendError$2: function(error, stackTrace) {
        var t1, t2;
        t1 = this._state;
        t2 = new P._BufferingStreamSubscription__sendError_sendError(this, error, stackTrace);
        if ((t1 & 1) !== 0) {
          this._state = (t1 | 16) >>> 0;
          this._cancel$0();
          t1 = this._cancelFuture;
          if (!!J.getInterceptor(t1).$isFuture)
            t1.whenComplete$1(t2);
          else
            t2.call$0();
        } else {
          t2.call$0();
          this._checkState$1((t1 & 4) !== 0);
        }
      },
      _sendDone$0: function() {
        var t1, t2;
        t1 = new P._BufferingStreamSubscription__sendDone_sendDone(this);
        this._cancel$0();
        this._state = (this._state | 16) >>> 0;
        t2 = this._cancelFuture;
        if (!!J.getInterceptor(t2).$isFuture)
          t2.whenComplete$1(t1);
        else
          t1.call$0();
      },
      _guardCallback$1: function(callback) {
        var t1 = this._state;
        this._state = (t1 | 32) >>> 0;
        callback.call$0();
        this._state = (this._state & 4294967263) >>> 0;
        this._checkState$1((t1 & 4) !== 0);
      },
      _checkState$1: function(wasInputPaused) {
        var t1, isInputPaused;
        if ((this._state & 64) !== 0) {
          t1 = this._pending;
          t1 = t1.get$isEmpty(t1);
        } else
          t1 = false;
        if (t1) {
          t1 = (this._state & 4294967231) >>> 0;
          this._state = t1;
          if ((t1 & 4) !== 0)
            if (t1 < 128) {
              t1 = this._pending;
              t1 = t1 == null || t1.get$isEmpty(t1);
            } else
              t1 = false;
          else
            t1 = false;
          if (t1)
            this._state = (this._state & 4294967291) >>> 0;
        }
        for (; true; wasInputPaused = isInputPaused) {
          t1 = this._state;
          if ((t1 & 8) !== 0) {
            this._pending = null;
            return;
          }
          isInputPaused = (t1 & 4) !== 0;
          if (wasInputPaused === isInputPaused)
            break;
          this._state = (t1 ^ 32) >>> 0;
          if (isInputPaused)
            this._onPause$0();
          else
            this._onResume$0();
          this._state = (this._state & 4294967263) >>> 0;
        }
        t1 = this._state;
        if ((t1 & 64) !== 0 && t1 < 128)
          this._pending.schedule$1(this);
      },
      _BufferingStreamSubscription$4: function(onData, onError, onDone, cancelOnError, $T) {
        var t1 = this._zone;
        t1.toString;
        this._onData = onData;
        this._onError = P._registerErrorHandler(onError, t1);
        this._onDone = onDone;
      },
      $is_EventSink: 1
    },
    _BufferingStreamSubscription__sendError_sendError: {
      "^": "Closure:7;$this,error,stackTrace",
      call$0: [function() {
        var t1, t2, t3, t4, t5, t6;
        t1 = this.$this;
        t2 = t1._state;
        if ((t2 & 8) !== 0 && (t2 & 16) === 0)
          return;
        t1._state = (t2 | 32) >>> 0;
        t2 = t1._onError;
        t3 = H.buildFunctionType(H.getDynamicRuntimeType(), [H.buildInterfaceType(P.Object), H.buildInterfaceType(P.StackTrace)])._isTest$1(t2);
        t4 = t1._zone;
        t5 = this.error;
        t6 = t1._onError;
        if (t3)
          t4.runBinaryGuarded$3(t6, t5, this.stackTrace);
        else
          t4.runUnaryGuarded$2(t6, t5);
        t1._state = (t1._state & 4294967263) >>> 0;
      }, null, null, 0, 0, null, "call"]
    },
    _BufferingStreamSubscription__sendDone_sendDone: {
      "^": "Closure:7;$this",
      call$0: [function() {
        var t1, t2;
        t1 = this.$this;
        t2 = t1._state;
        if ((t2 & 16) === 0)
          return;
        t1._state = (t2 | 42) >>> 0;
        t1._zone.runGuarded$1(t1._onDone);
        t1._state = (t1._state & 4294967263) >>> 0;
      }, null, null, 0, 0, null, "call"]
    },
    _StreamImpl: {
      "^": "Stream;",
      listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
        return this._async$_controller._subscribe$4(onData, onError, onDone, true === cancelOnError);
      },
      listen$3$onDone$onError: function(onData, onDone, onError) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
      }
    },
    _DelayedEvent: {
      "^": "Object;next*"
    },
    _DelayedData: {
      "^": "_DelayedEvent;value>,next",
      perform$1: function(dispatch) {
        dispatch._sendData$1(this.value);
      }
    },
    _DelayedError: {
      "^": "_DelayedEvent;error>,stackTrace<,next",
      perform$1: function(dispatch) {
        dispatch._sendError$2(this.error, this.stackTrace);
      },
      $as_DelayedEvent: Isolate.functionThatReturnsNull
    },
    _DelayedDone: {
      "^": "Object;",
      perform$1: function(dispatch) {
        dispatch._sendDone$0();
      },
      get$next: function(_) {
        return;
      },
      set$next: function(_, _0) {
        throw H.wrapException(new P.StateError("No events after a done."));
      }
    },
    _PendingEvents: {
      "^": "Object;_state<",
      schedule$1: function(dispatch) {
        var t1 = this._state;
        if (t1 === 1)
          return;
        if (t1 >= 1) {
          this._state = 1;
          return;
        }
        P.scheduleMicrotask(new P._PendingEvents_schedule_closure(this, dispatch));
        this._state = 1;
      },
      cancelSchedule$0: function() {
        if (this._state === 1)
          this._state = 3;
      }
    },
    _PendingEvents_schedule_closure: {
      "^": "Closure:4;$this,dispatch",
      call$0: [function() {
        var t1, oldState, $event, t2;
        t1 = this.$this;
        oldState = t1._state;
        t1._state = 0;
        if (oldState === 3)
          return;
        $event = t1.firstPendingEvent;
        t2 = J.get$next$x($event);
        t1.firstPendingEvent = t2;
        if (t2 == null)
          t1.lastPendingEvent = null;
        $event.perform$1(this.dispatch);
      }, null, null, 0, 0, null, "call"]
    },
    _StreamImplEvents: {
      "^": "_PendingEvents;firstPendingEvent,lastPendingEvent,_state",
      get$isEmpty: function(_) {
        return this.lastPendingEvent == null;
      },
      add$1: function(_, $event) {
        var t1 = this.lastPendingEvent;
        if (t1 == null) {
          this.lastPendingEvent = $event;
          this.firstPendingEvent = $event;
        } else {
          J.set$next$x(t1, $event);
          this.lastPendingEvent = $event;
        }
      },
      clear$0: function(_) {
        if (this._state === 1)
          this._state = 3;
        this.lastPendingEvent = null;
        this.firstPendingEvent = null;
      }
    },
    _DoneStreamSubscription: {
      "^": "Object;_zone<,_state<,_onDone",
      get$isPaused: function() {
        return this._state >= 4;
      },
      _schedule$0: function() {
        var t1, t2;
        if ((this._state & 2) !== 0)
          return;
        t1 = this._zone;
        t2 = this.get$_sendDone();
        t1.toString;
        P._rootScheduleMicrotask(null, null, t1, t2);
        this._state = (this._state | 2) >>> 0;
      },
      pause$1: function(_, resumeSignal) {
        this._state += 4;
      },
      pause$0: function($receiver) {
        return this.pause$1($receiver, null);
      },
      resume$0: function(_) {
        var t1 = this._state;
        if (t1 >= 4) {
          t1 -= 4;
          this._state = t1;
          if (t1 < 4 && (t1 & 1) === 0)
            this._schedule$0();
        }
      },
      cancel$0: function(_) {
        return;
      },
      _sendDone$0: [function() {
        var t1 = (this._state & 4294967293) >>> 0;
        this._state = t1;
        if (t1 >= 4)
          return;
        this._state = (t1 | 1) >>> 0;
        this._zone.runGuarded$1(this._onDone);
      }, "call$0", "get$_sendDone", 0, 0, 7]
    },
    _StreamIteratorImpl: {
      "^": "Object;_subscription,_async$_current,_futureOrPrefetch,_state<",
      _clear$0: function(_) {
        this._subscription = null;
        this._futureOrPrefetch = null;
        this._async$_current = null;
        this._state = 1;
      },
      cancel$0: function(_) {
        var subscription, hasNext;
        subscription = this._subscription;
        if (subscription == null)
          return;
        if (this._state === 2) {
          hasNext = this._futureOrPrefetch;
          this._clear$0(0);
          hasNext._complete$1(false);
        } else
          this._clear$0(0);
        return subscription.cancel$0(0);
      },
      _onData$1: [function(data) {
        var hasNext;
        if (this._state === 2) {
          this._async$_current = data;
          hasNext = this._futureOrPrefetch;
          this._futureOrPrefetch = null;
          this._state = 0;
          hasNext._complete$1(true);
          return;
        }
        this._subscription.pause$0(0);
        this._futureOrPrefetch = data;
        this._state = 3;
      }, "call$1", "get$_onData", 2, 0, function() {
        return H.computeSignature(function(T) {
          return {func: 1, v: true, args: [T]};
        }, this.$receiver, "_StreamIteratorImpl");
      }, 7, []],
      _onError$2: [function(error, stackTrace) {
        var hasNext;
        if (this._state === 2) {
          hasNext = this._futureOrPrefetch;
          this._clear$0(0);
          hasNext._completeError$2(error, stackTrace);
          return;
        }
        this._subscription.pause$0(0);
        this._futureOrPrefetch = new P.AsyncError(error, stackTrace);
        this._state = 4;
      }, function(error) {
        return this._onError$2(error, null);
      }, "_onError$1", "call$2", "call$1", "get$_onError", 2, 2, 17, 1, 2, [], 4, []],
      _onDone$0: [function() {
        if (this._state === 2) {
          var hasNext = this._futureOrPrefetch;
          this._clear$0(0);
          hasNext._complete$1(false);
          return;
        }
        this._subscription.pause$0(0);
        this._futureOrPrefetch = null;
        this._state = 5;
      }, "call$0", "get$_onDone", 0, 0, 7]
    },
    _cancelAndError_closure: {
      "^": "Closure:4;future,error,stackTrace",
      call$0: [function() {
        return this.future._completeError$2(this.error, this.stackTrace);
      }, null, null, 0, 0, null, "call"]
    },
    _cancelAndErrorClosure_closure: {
      "^": "Closure:38;subscription,future",
      call$2: function(error, stackTrace) {
        P._cancelAndError(this.subscription, this.future, error, stackTrace);
      }
    },
    _cancelAndValue_closure: {
      "^": "Closure:4;future,value",
      call$0: [function() {
        return this.future._complete$1(this.value);
      }, null, null, 0, 0, null, "call"]
    },
    _ForwardingStream: {
      "^": "Stream;",
      get$isBroadcast: function() {
        return this._async$_source.get$isBroadcast();
      },
      listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
        return this._createSubscription$4(onData, onError, onDone, true === cancelOnError);
      },
      listen$3$onDone$onError: function(onData, onDone, onError) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
      },
      _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
        return P._ForwardingStreamSubscription$(this, onData, onError, onDone, cancelOnError, H.getRuntimeTypeArgument(this, "_ForwardingStream", 0), H.getRuntimeTypeArgument(this, "_ForwardingStream", 1));
      },
      _handleData$2: function(data, sink) {
        sink._async$_add$1(0, data);
      },
      _handleError$3: function(error, stackTrace, sink) {
        sink._addError$2(error, stackTrace);
      },
      $asStream: function($S, $T) {
        return [$T];
      }
    },
    _ForwardingStreamSubscription: {
      "^": "_BufferingStreamSubscription;_stream,_subscription,_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
      _async$_add$1: function(_, data) {
        if ((this._state & 2) !== 0)
          return;
        this.super$_BufferingStreamSubscription$_add(this, data);
      },
      _addError$2: function(error, stackTrace) {
        if ((this._state & 2) !== 0)
          return;
        this.super$_BufferingStreamSubscription$_addError(error, stackTrace);
      },
      _onPause$0: [function() {
        var t1 = this._subscription;
        if (t1 == null)
          return;
        t1.pause$0(0);
      }, "call$0", "get$_onPause", 0, 0, 7],
      _onResume$0: [function() {
        var t1 = this._subscription;
        if (t1 == null)
          return;
        t1.resume$0(0);
      }, "call$0", "get$_onResume", 0, 0, 7],
      _onCancel$0: function() {
        var t1 = this._subscription;
        if (t1 != null) {
          this._subscription = null;
          return t1.cancel$0(0);
        }
        return;
      },
      _handleData$1: [function(data) {
        this._stream._handleData$2(data, this);
      }, "call$1", "get$_handleData", 2, 0, function() {
        return H.computeSignature(function(S, T) {
          return {func: 1, v: true, args: [S]};
        }, this.$receiver, "_ForwardingStreamSubscription");
      }, 7, []],
      _handleError$2: [function(error, stackTrace) {
        this._stream._handleError$3(error, stackTrace, this);
      }, "call$2", "get$_handleError", 4, 0, 28, 2, [], 4, []],
      _handleDone$0: [function() {
        this._close$0();
      }, "call$0", "get$_handleDone", 0, 0, 7],
      _ForwardingStreamSubscription$5: function(_stream, onData, onError, onDone, cancelOnError, $S, $T) {
        var t1, t2;
        t1 = this.get$_handleData();
        t2 = this.get$_handleError();
        this._subscription = this._stream._async$_source.listen$3$onDone$onError(t1, this.get$_handleDone(), t2);
      },
      $as_BufferingStreamSubscription: function($S, $T) {
        return [$T];
      },
      static: {
        _ForwardingStreamSubscription$: function(_stream, onData, onError, onDone, cancelOnError, $S, $T) {
          var t1 = $.Zone__current;
          t1 = H.setRuntimeTypeInfo(new P._ForwardingStreamSubscription(_stream, null, null, null, null, t1, cancelOnError ? 1 : 0, null, null), [$S, $T]);
          t1._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, $T);
          t1._ForwardingStreamSubscription$5(_stream, onData, onError, onDone, cancelOnError, $S, $T);
          return t1;
        }
      }
    },
    _WhereStream: {
      "^": "_ForwardingStream;_test,_async$_source",
      _handleData$2: function(inputEvent, sink) {
        var satisfies, e, s, exception, t1;
        satisfies = null;
        try {
          satisfies = this._test.call$1(inputEvent);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          P._addErrorWithReplacement(sink, e, s);
          return;
        }
        if (satisfies === true)
          J._async$_add$1$x(sink, inputEvent);
      },
      $as_ForwardingStream: function($T) {
        return [$T, $T];
      },
      $asStream: null
    },
    _MapStream: {
      "^": "_ForwardingStream;_transform,_async$_source",
      _handleData$2: function(inputEvent, sink) {
        var outputEvent, e, s, exception, t1;
        outputEvent = null;
        try {
          outputEvent = this._transform.call$1(inputEvent);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          P._addErrorWithReplacement(sink, e, s);
          return;
        }
        J._async$_add$1$x(sink, outputEvent);
      }
    },
    _HandleErrorStream: {
      "^": "_ForwardingStream;_transform,_test,_async$_source",
      _handleError$3: function(error, stackTrace, sink) {
        var matches, e, s, exception, t1, t2;
        matches = true;
        if (matches === true)
          try {
            P._invokeErrorHandler(this._transform, error, stackTrace);
          } catch (exception) {
            t1 = H.unwrapException(exception);
            e = t1;
            s = H.getTraceFromException(exception);
            t1 = e;
            t2 = error;
            if (t1 == null ? t2 == null : t1 === t2)
              sink._addError$2(error, stackTrace);
            else
              P._addErrorWithReplacement(sink, e, s);
            return;
          }
        else
          sink._addError$2(error, stackTrace);
      },
      $as_ForwardingStream: function($T) {
        return [$T, $T];
      },
      $asStream: null
    },
    AsyncError: {
      "^": "Object;error>,stackTrace<",
      toString$0: function(_) {
        return H.S(this.error);
      },
      $isError: 1
    },
    _Zone: {
      "^": "Object;"
    },
    _rootHandleUncaughtError_closure: {
      "^": "Closure:4;_box_0,stackTrace",
      call$0: function() {
        var t1, t2, error;
        t1 = this._box_0;
        t2 = t1.error;
        if (t2 == null) {
          error = new P.NullThrownError();
          t1.error = error;
          t1 = error;
        } else
          t1 = t2;
        t2 = this.stackTrace;
        if (t2 == null)
          throw H.wrapException(t1);
        error = H.wrapException(t1);
        error.stack = J.toString$0$(t2);
        throw error;
      }
    },
    _RootZone: {
      "^": "_Zone;",
      get$parent: function(_) {
        return;
      },
      runGuarded$1: function(f) {
        var e, s, t1, exception;
        try {
          if (C.C__RootZone === $.Zone__current) {
            t1 = f.call$0();
            return t1;
          }
          t1 = P._rootRun(null, null, this, f);
          return t1;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          return P._rootHandleUncaughtError(null, null, this, e, s);
        }
      },
      runUnaryGuarded$2: function(f, arg) {
        var e, s, t1, exception;
        try {
          if (C.C__RootZone === $.Zone__current) {
            t1 = f.call$1(arg);
            return t1;
          }
          t1 = P._rootRunUnary(null, null, this, f, arg);
          return t1;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          return P._rootHandleUncaughtError(null, null, this, e, s);
        }
      },
      runBinaryGuarded$3: function(f, arg1, arg2) {
        var e, s, t1, exception;
        try {
          if (C.C__RootZone === $.Zone__current) {
            t1 = f.call$2(arg1, arg2);
            return t1;
          }
          t1 = P._rootRunBinary(null, null, this, f, arg1, arg2);
          return t1;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          return P._rootHandleUncaughtError(null, null, this, e, s);
        }
      },
      bindCallback$2$runGuarded: function(f, runGuarded) {
        if (runGuarded)
          return new P._RootZone_bindCallback_closure(this, f);
        else
          return new P._RootZone_bindCallback_closure0(this, f);
      },
      bindUnaryCallback$2$runGuarded: function(f, runGuarded) {
        return new P._RootZone_bindUnaryCallback_closure(this, f);
      },
      $index: function(_, key) {
        return;
      },
      run$1: function(_, f) {
        if ($.Zone__current === C.C__RootZone)
          return f.call$0();
        return P._rootRun(null, null, this, f);
      },
      runUnary$2: function(f, arg) {
        if ($.Zone__current === C.C__RootZone)
          return f.call$1(arg);
        return P._rootRunUnary(null, null, this, f, arg);
      },
      runBinary$3: function(f, arg1, arg2) {
        if ($.Zone__current === C.C__RootZone)
          return f.call$2(arg1, arg2);
        return P._rootRunBinary(null, null, this, f, arg1, arg2);
      }
    },
    _RootZone_bindCallback_closure: {
      "^": "Closure:4;$this,f",
      call$0: function() {
        return this.$this.runGuarded$1(this.f);
      }
    },
    _RootZone_bindCallback_closure0: {
      "^": "Closure:4;$this,f",
      call$0: function() {
        return this.$this.run$1(0, this.f);
      }
    },
    _RootZone_bindUnaryCallback_closure: {
      "^": "Closure:1;$this,f",
      call$1: [function(arg) {
        return this.$this.runUnaryGuarded$2(this.f, arg);
      }, null, null, 2, 0, null, 27, [], "call"]
    }
  }], ["dart.collection", "dart:collection",, P, {
    "^": "",
    _HashMap__getTableEntry: function(table, key) {
      var entry = table[key];
      return entry === table ? null : entry;
    },
    _HashMap__setTableEntry: function(table, key, value) {
      if (value == null)
        table[key] = table;
      else
        table[key] = value;
    },
    _HashMap__newHashTable: function() {
      var table = Object.create(null);
      P._HashMap__setTableEntry(table, "<non-identifier-key>", table);
      delete table["<non-identifier-key>"];
      return table;
    },
    LinkedHashMap_LinkedHashMap$_empty: function($K, $V) {
      return H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [$K, $V]);
    },
    LinkedHashMap__makeEmpty: function() {
      return H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [null, null]);
    },
    LinkedHashMap__makeLiteral: function(keyValuePairs) {
      return H.fillLiteralMap(keyValuePairs, H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [null, null]));
    },
    IterableBase_iterableToShortString: function(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (P._isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = [];
      t1 = $.$get$_toStringVisiting();
      t1.push(iterable);
      try {
        P._iterablePartsToStrings(iterable, parts);
      } finally {
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      }
      t1 = P.StringBuffer__writeAll(leftDelimiter, parts, ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    IterableBase_iterableToFullString: function(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1, t2;
      if (P._isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new P.StringBuffer(leftDelimiter);
      t1 = $.$get$_toStringVisiting();
      t1.push(iterable);
      try {
        t2 = buffer;
        t2.set$_contents(P.StringBuffer__writeAll(t2.get$_contents(), iterable, ", "));
      } finally {
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      }
      t1 = buffer;
      t1.set$_contents(t1.get$_contents() + rightDelimiter);
      t1 = buffer.get$_contents();
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _isToStringVisiting: function(o) {
      var i, t1;
      for (i = 0; t1 = $.$get$_toStringVisiting(), i < t1.length; ++i)
        if (o === t1[i])
          return true;
      return false;
    },
    _iterablePartsToStrings: function(iterable, parts) {
      var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision;
      it = iterable.get$iterator(iterable);
      $length = 0;
      count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = H.S(it.get$current());
        parts.push(next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        ultimateString = parts.pop();
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current();
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            parts.push(H.S(penultimate));
            return;
          }
          ultimateString = H.S(penultimate);
          if (0 >= parts.length)
            return H.ioore(parts, -1);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current();
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current();
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                if (0 >= parts.length)
                  return H.ioore(parts, -1);
                $length -= parts.pop().length + 2;
                --count;
              }
              parts.push("...");
              return;
            }
          }
          penultimateString = H.S(penultimate);
          ultimateString = H.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        parts.push(elision);
      parts.push(penultimateString);
      parts.push(ultimateString);
    },
    LinkedHashMap_LinkedHashMap: function(equals, hashCode, isValidKey, $K, $V) {
      return H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [$K, $V]);
    },
    LinkedHashMap_LinkedHashMap$from: function(other, $K, $V) {
      var result = P.LinkedHashMap_LinkedHashMap(null, null, null, $K, $V);
      other.forEach$1(0, new P.closure1(result));
      return result;
    },
    LinkedHashSet_LinkedHashSet: function(equals, hashCode, isValidKey, $E) {
      return H.setRuntimeTypeInfo(new P._LinkedHashSet(0, null, null, null, null, null, 0), [$E]);
    },
    LinkedHashSet_LinkedHashSet$from: function(elements, $E) {
      var result, t1;
      result = P.LinkedHashSet_LinkedHashSet(null, null, null, $E);
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        result.add$1(0, t1.get$current());
      return result;
    },
    ListMixin__filter: function(source, test, retainMatching) {
      var retained, t1, $length, i, element;
      retained = [];
      t1 = J.getInterceptor$asx(source);
      $length = t1.get$length(source);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        element = t1.$index(source, i);
        if (J.$eq$(test.call$1(element), false))
          retained.push(element);
        if ($length !== t1.get$length(source))
          throw H.wrapException(new P.ConcurrentModificationError(source));
      }
      if (retained.length !== t1.get$length(source)) {
        t1.setRange$3(source, 0, retained.length, retained);
        t1.set$length(source, retained.length);
      }
    },
    Maps_mapToString: function(m) {
      var t1, result, t2;
      t1 = {};
      if (P._isToStringVisiting(m))
        return "{...}";
      result = new P.StringBuffer("");
      try {
        $.$get$_toStringVisiting().push(m);
        t2 = result;
        t2.set$_contents(t2.get$_contents() + "{");
        t1.first = true;
        J.forEach$1$ax(m, new P.Maps_mapToString_closure(t1, result));
        t1 = result;
        t1.set$_contents(t1.get$_contents() + "}");
      } finally {
        t1 = $.$get$_toStringVisiting();
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      }
      t1 = result.get$_contents();
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _HashMap: {
      "^": "Object;",
      get$length: function(_) {
        return this._collection$_length;
      },
      get$isEmpty: function(_) {
        return this._collection$_length === 0;
      },
      get$isNotEmpty: function(_) {
        return this._collection$_length !== 0;
      },
      get$keys: function(_) {
        return H.setRuntimeTypeInfo(new P._HashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
      },
      containsKey$1: function(_, key) {
        var strings, nums;
        if (typeof key === "string" && key !== "__proto__") {
          strings = this._collection$_strings;
          return strings == null ? false : strings[key] != null;
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._collection$_nums;
          return nums == null ? false : nums[key] != null;
        } else
          return this._containsKey$1(key);
      },
      _containsKey$1: function(key) {
        var rest = this._collection$_rest;
        if (rest == null)
          return false;
        return this._findBucketIndex$2(rest[H.objectHashCode(key) & 0x3ffffff], key) >= 0;
      },
      $index: function(_, key) {
        var strings, t1, entry, nums;
        if (typeof key === "string" && key !== "__proto__") {
          strings = this._collection$_strings;
          if (strings == null)
            t1 = null;
          else {
            entry = strings[key];
            t1 = entry === strings ? null : entry;
          }
          return t1;
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._collection$_nums;
          if (nums == null)
            t1 = null;
          else {
            entry = nums[key];
            t1 = entry === nums ? null : entry;
          }
          return t1;
        } else
          return this._get$1(0, key);
      },
      _get$1: function(_, key) {
        var rest, bucket, index;
        rest = this._collection$_rest;
        if (rest == null)
          return;
        bucket = rest[H.objectHashCode(key) & 0x3ffffff];
        index = this._findBucketIndex$2(bucket, key);
        return index < 0 ? null : bucket[index + 1];
      },
      $indexSet: function(_, key, value) {
        var strings, nums, rest, hash, bucket, index;
        if (typeof key === "string" && key !== "__proto__") {
          strings = this._collection$_strings;
          if (strings == null) {
            strings = P._HashMap__newHashTable();
            this._collection$_strings = strings;
          }
          this._collection$_addHashTableEntry$3(strings, key, value);
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._collection$_nums;
          if (nums == null) {
            nums = P._HashMap__newHashTable();
            this._collection$_nums = nums;
          }
          this._collection$_addHashTableEntry$3(nums, key, value);
        } else {
          rest = this._collection$_rest;
          if (rest == null) {
            rest = P._HashMap__newHashTable();
            this._collection$_rest = rest;
          }
          hash = H.objectHashCode(key) & 0x3ffffff;
          bucket = rest[hash];
          if (bucket == null) {
            P._HashMap__setTableEntry(rest, hash, [key, value]);
            ++this._collection$_length;
            this._collection$_keys = null;
          } else {
            index = this._findBucketIndex$2(bucket, key);
            if (index >= 0)
              bucket[index + 1] = value;
            else {
              bucket.push(key, value);
              ++this._collection$_length;
              this._collection$_keys = null;
            }
          }
        }
      },
      remove$1: function(_, key) {
        if (typeof key === "string" && key !== "__proto__")
          return this._removeHashTableEntry$2(this._collection$_strings, key);
        else if (typeof key === "number" && (key & 0x3ffffff) === key)
          return this._removeHashTableEntry$2(this._collection$_nums, key);
        else
          return this._collection$_remove$1(0, key);
      },
      _collection$_remove$1: function(_, key) {
        var rest, bucket, index;
        rest = this._collection$_rest;
        if (rest == null)
          return;
        bucket = rest[H.objectHashCode(key) & 0x3ffffff];
        index = this._findBucketIndex$2(bucket, key);
        if (index < 0)
          return;
        --this._collection$_length;
        this._collection$_keys = null;
        return bucket.splice(index, 2)[1];
      },
      clear$0: function(_) {
        if (this._collection$_length > 0) {
          this._collection$_keys = null;
          this._collection$_rest = null;
          this._collection$_nums = null;
          this._collection$_strings = null;
          this._collection$_length = 0;
        }
      },
      forEach$1: function(_, action) {
        var keys, $length, i, key;
        keys = this._collection$_computeKeys$0();
        for ($length = keys.length, i = 0; i < $length; ++i) {
          key = keys[i];
          action.call$2(key, this.$index(0, key));
          if (keys !== this._collection$_keys)
            throw H.wrapException(new P.ConcurrentModificationError(this));
        }
      },
      _collection$_computeKeys$0: function() {
        var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
        t1 = this._collection$_keys;
        if (t1 != null)
          return t1;
        result = new Array(this._collection$_length);
        result.fixed$length = Array;
        strings = this._collection$_strings;
        if (strings != null) {
          names = Object.getOwnPropertyNames(strings);
          entries = names.length;
          for (index = 0, i = 0; i < entries; ++i) {
            result[index] = names[i];
            ++index;
          }
        } else
          index = 0;
        nums = this._collection$_nums;
        if (nums != null) {
          names = Object.getOwnPropertyNames(nums);
          entries = names.length;
          for (i = 0; i < entries; ++i) {
            result[index] = +names[i];
            ++index;
          }
        }
        rest = this._collection$_rest;
        if (rest != null) {
          names = Object.getOwnPropertyNames(rest);
          entries = names.length;
          for (i = 0; i < entries; ++i) {
            bucket = rest[names[i]];
            $length = bucket.length;
            for (i0 = 0; i0 < $length; i0 += 2) {
              result[index] = bucket[i0];
              ++index;
            }
          }
        }
        this._collection$_keys = result;
        return result;
      },
      _collection$_addHashTableEntry$3: function(table, key, value) {
        if (table[key] == null) {
          ++this._collection$_length;
          this._collection$_keys = null;
        }
        P._HashMap__setTableEntry(table, key, value);
      },
      _removeHashTableEntry$2: function(table, key) {
        var value;
        if (table != null && table[key] != null) {
          value = P._HashMap__getTableEntry(table, key);
          delete table[key];
          --this._collection$_length;
          this._collection$_keys = null;
          return value;
        } else
          return;
      },
      $isMap: 1,
      $asMap: null
    },
    _IdentityHashMap: {
      "^": "_HashMap;_collection$_length,_collection$_strings,_collection$_nums,_collection$_rest,_collection$_keys",
      _findBucketIndex$2: function(bucket, key) {
        var $length, i, t1;
        if (bucket == null)
          return -1;
        $length = bucket.length;
        for (i = 0; i < $length; i += 2) {
          t1 = bucket[i];
          if (t1 == null ? key == null : t1 === key)
            return i;
        }
        return -1;
      }
    },
    _HashMapKeyIterable: {
      "^": "Iterable;_map",
      get$length: function(_) {
        return this._map._collection$_length;
      },
      get$isEmpty: function(_) {
        return this._map._collection$_length === 0;
      },
      get$iterator: function(_) {
        var t1 = this._map;
        t1 = new P._HashMapKeyIterator(t1, t1._collection$_computeKeys$0(), 0, null);
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        return t1;
      },
      contains$1: function(_, element) {
        return this._map.containsKey$1(0, element);
      },
      forEach$1: function(_, f) {
        var t1, keys, $length, i;
        t1 = this._map;
        keys = t1._collection$_computeKeys$0();
        for ($length = keys.length, i = 0; i < $length; ++i) {
          f.call$1(keys[i]);
          if (keys !== t1._collection$_keys)
            throw H.wrapException(new P.ConcurrentModificationError(t1));
        }
      },
      $isEfficientLength: 1
    },
    _HashMapKeyIterator: {
      "^": "Object;_map,_collection$_keys,_offset,_collection$_current",
      get$current: function() {
        return this._collection$_current;
      },
      moveNext$0: function() {
        var keys, offset, t1;
        keys = this._collection$_keys;
        offset = this._offset;
        t1 = this._map;
        if (keys !== t1._collection$_keys)
          throw H.wrapException(new P.ConcurrentModificationError(t1));
        else if (offset >= keys.length) {
          this._collection$_current = null;
          return false;
        } else {
          this._collection$_current = keys[offset];
          this._offset = offset + 1;
          return true;
        }
      }
    },
    _LinkedIdentityHashMap: {
      "^": "JsLinkedHashMap;__js_helper$_length,_strings,_nums,_rest,_first,_last,_modifications",
      internalComputeHashCode$1: function(key) {
        return H.objectHashCode(key) & 0x3ffffff;
      },
      internalFindBucketIndex$2: function(bucket, key) {
        var $length, i, t1;
        if (bucket == null)
          return -1;
        $length = bucket.length;
        for (i = 0; i < $length; ++i) {
          t1 = bucket[i].get$hashMapCellKey();
          if (t1 == null ? key == null : t1 === key)
            return i;
        }
        return -1;
      },
      static: {
        _LinkedIdentityHashMap__LinkedIdentityHashMap$es6: function($K, $V) {
          return H.setRuntimeTypeInfo(new P._LinkedIdentityHashMap(0, null, null, null, null, null, 0), [$K, $V]);
        }
      }
    },
    _LinkedHashSet: {
      "^": "_HashSetBase;_collection$_length,_collection$_strings,_collection$_nums,_collection$_rest,_collection$_first,_collection$_last,_collection$_modifications",
      get$iterator: function(_) {
        var t1 = H.setRuntimeTypeInfo(new P._LinkedHashSetIterator(this, this._collection$_modifications, null, null), [null]);
        t1._cell = t1._set._collection$_first;
        return t1;
      },
      get$length: function(_) {
        return this._collection$_length;
      },
      get$isEmpty: function(_) {
        return this._collection$_length === 0;
      },
      get$isNotEmpty: function(_) {
        return this._collection$_length !== 0;
      },
      contains$1: function(_, object) {
        var strings, nums;
        if (typeof object === "string" && object !== "__proto__") {
          strings = this._collection$_strings;
          if (strings == null)
            return false;
          return strings[object] != null;
        } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
          nums = this._collection$_nums;
          if (nums == null)
            return false;
          return nums[object] != null;
        } else
          return this._contains$1(object);
      },
      _contains$1: function(object) {
        var rest = this._collection$_rest;
        if (rest == null)
          return false;
        return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
      },
      lookup$1: function(object) {
        var t1;
        if (!(typeof object === "string" && object !== "__proto__"))
          t1 = typeof object === "number" && (object & 0x3ffffff) === object;
        else
          t1 = true;
        if (t1)
          return this.contains$1(0, object) ? object : null;
        else
          return this._lookup$1(object);
      },
      _lookup$1: function(object) {
        var rest, bucket, index;
        rest = this._collection$_rest;
        if (rest == null)
          return;
        bucket = rest[this._computeHashCode$1(object)];
        index = this._findBucketIndex$2(bucket, object);
        if (index < 0)
          return;
        return J.$index$asx(bucket, index).get$_element();
      },
      forEach$1: function(_, action) {
        var cell, modifications;
        cell = this._collection$_first;
        modifications = this._collection$_modifications;
        for (; cell != null;) {
          action.call$1(cell.get$_element());
          if (modifications !== this._collection$_modifications)
            throw H.wrapException(new P.ConcurrentModificationError(this));
          cell = cell.get$_collection$_next();
        }
      },
      get$last: function(_) {
        var t1 = this._collection$_last;
        if (t1 == null)
          throw H.wrapException(new P.StateError("No elements"));
        return t1._element;
      },
      add$1: function(_, element) {
        var strings, table, nums;
        if (typeof element === "string" && element !== "__proto__") {
          strings = this._collection$_strings;
          if (strings == null) {
            table = Object.create(null);
            table["<non-identifier-key>"] = table;
            delete table["<non-identifier-key>"];
            this._collection$_strings = table;
            strings = table;
          }
          return this._collection$_addHashTableEntry$2(strings, element);
        } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
          nums = this._collection$_nums;
          if (nums == null) {
            table = Object.create(null);
            table["<non-identifier-key>"] = table;
            delete table["<non-identifier-key>"];
            this._collection$_nums = table;
            nums = table;
          }
          return this._collection$_addHashTableEntry$2(nums, element);
        } else
          return this._add$1(0, element);
      },
      _add$1: function(_, element) {
        var rest, hash, bucket;
        rest = this._collection$_rest;
        if (rest == null) {
          rest = P._LinkedHashSet__newHashTable();
          this._collection$_rest = rest;
        }
        hash = this._computeHashCode$1(element);
        bucket = rest[hash];
        if (bucket == null)
          rest[hash] = [this._collection$_newLinkedCell$1(element)];
        else {
          if (this._findBucketIndex$2(bucket, element) >= 0)
            return false;
          bucket.push(this._collection$_newLinkedCell$1(element));
        }
        return true;
      },
      remove$1: function(_, object) {
        if (typeof object === "string" && object !== "__proto__")
          return this._removeHashTableEntry$2(this._collection$_strings, object);
        else if (typeof object === "number" && (object & 0x3ffffff) === object)
          return this._removeHashTableEntry$2(this._collection$_nums, object);
        else
          return this._collection$_remove$1(0, object);
      },
      _collection$_remove$1: function(_, object) {
        var rest, bucket, index;
        rest = this._collection$_rest;
        if (rest == null)
          return false;
        bucket = rest[this._computeHashCode$1(object)];
        index = this._findBucketIndex$2(bucket, object);
        if (index < 0)
          return false;
        this._unlinkCell$1(bucket.splice(index, 1)[0]);
        return true;
      },
      removeWhere$1: function(_, test) {
        this._filterWhere$2(test, true);
      },
      _filterWhere$2: function(test, removeMatching) {
        var cell, element, next, modifications, t1;
        cell = this._collection$_first;
        for (; cell != null; cell = next) {
          element = cell.get$_element();
          next = cell.get$_collection$_next();
          modifications = this._collection$_modifications;
          t1 = test.call$1(element);
          if (modifications !== this._collection$_modifications)
            throw H.wrapException(new P.ConcurrentModificationError(this));
          if (true === t1)
            this.remove$1(0, element);
        }
      },
      clear$0: function(_) {
        if (this._collection$_length > 0) {
          this._collection$_last = null;
          this._collection$_first = null;
          this._collection$_rest = null;
          this._collection$_nums = null;
          this._collection$_strings = null;
          this._collection$_length = 0;
          this._collection$_modifications = this._collection$_modifications + 1 & 67108863;
        }
      },
      _collection$_addHashTableEntry$2: function(table, element) {
        if (table[element] != null)
          return false;
        table[element] = this._collection$_newLinkedCell$1(element);
        return true;
      },
      _removeHashTableEntry$2: function(table, element) {
        var cell;
        if (table == null)
          return false;
        cell = table[element];
        if (cell == null)
          return false;
        this._unlinkCell$1(cell);
        delete table[element];
        return true;
      },
      _collection$_newLinkedCell$1: function(element) {
        var cell, last;
        cell = new P._LinkedHashSetCell(element, null, null);
        if (this._collection$_first == null) {
          this._collection$_last = cell;
          this._collection$_first = cell;
        } else {
          last = this._collection$_last;
          cell._collection$_previous = last;
          last._collection$_next = cell;
          this._collection$_last = cell;
        }
        ++this._collection$_length;
        this._collection$_modifications = this._collection$_modifications + 1 & 67108863;
        return cell;
      },
      _unlinkCell$1: function(cell) {
        var previous, next;
        previous = cell.get$_collection$_previous();
        next = cell.get$_collection$_next();
        if (previous == null)
          this._collection$_first = next;
        else
          previous._collection$_next = next;
        if (next == null)
          this._collection$_last = previous;
        else
          next.set$_collection$_previous(previous);
        --this._collection$_length;
        this._collection$_modifications = this._collection$_modifications + 1 & 67108863;
      },
      _computeHashCode$1: function(element) {
        return J.get$hashCode$(element) & 0x3ffffff;
      },
      _findBucketIndex$2: function(bucket, element) {
        var $length, i;
        if (bucket == null)
          return -1;
        $length = bucket.length;
        for (i = 0; i < $length; ++i)
          if (J.$eq$(bucket[i].get$_element(), element))
            return i;
        return -1;
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null,
      static: {
        _LinkedHashSet__newHashTable: function() {
          var table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          return table;
        }
      }
    },
    _LinkedHashSetCell: {
      "^": "Object;_element<,_collection$_next<,_collection$_previous@"
    },
    _LinkedHashSetIterator: {
      "^": "Object;_set,_collection$_modifications,_cell,_collection$_current",
      get$current: function() {
        return this._collection$_current;
      },
      moveNext$0: function() {
        var t1 = this._set;
        if (this._collection$_modifications !== t1._collection$_modifications)
          throw H.wrapException(new P.ConcurrentModificationError(t1));
        else {
          t1 = this._cell;
          if (t1 == null) {
            this._collection$_current = null;
            return false;
          } else {
            this._collection$_current = t1.get$_element();
            this._cell = this._cell.get$_collection$_next();
            return true;
          }
        }
      }
    },
    UnmodifiableListView: {
      "^": "UnmodifiableListBase;_collection$_source",
      get$length: function(_) {
        return J.get$length$asx(this._collection$_source);
      },
      $index: function(_, index) {
        return J.elementAt$1$ax(this._collection$_source, index);
      }
    },
    _HashSetBase: {
      "^": "SetBase;"
    },
    IterableBase: {
      "^": "Iterable;"
    },
    closure1: {
      "^": "Closure:9;result",
      call$2: function(k, v) {
        this.result.$indexSet(0, k, v);
      }
    },
    ListBase: {
      "^": "Object_ListMixin;"
    },
    Object_ListMixin: {
      "^": "Object+ListMixin;",
      $isList: 1,
      $asList: null,
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    ListMixin: {
      "^": "Object;",
      get$iterator: function(receiver) {
        return H.setRuntimeTypeInfo(new H.ListIterator(receiver, this.get$length(receiver), 0, null), [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      },
      elementAt$1: function(receiver, index) {
        return this.$index(receiver, index);
      },
      forEach$1: function(receiver, action) {
        var $length, i;
        $length = this.get$length(receiver);
        if (typeof $length !== "number")
          return H.iae($length);
        i = 0;
        for (; i < $length; ++i) {
          action.call$1(this.$index(receiver, i));
          if ($length !== this.get$length(receiver))
            throw H.wrapException(new P.ConcurrentModificationError(receiver));
        }
      },
      get$isEmpty: function(receiver) {
        return J.$eq$(this.get$length(receiver), 0);
      },
      get$isNotEmpty: function(receiver) {
        return !this.get$isEmpty(receiver);
      },
      get$first: function(receiver) {
        if (J.$eq$(this.get$length(receiver), 0))
          throw H.wrapException(H.IterableElementError_noElement());
        return this.$index(receiver, 0);
      },
      get$last: function(receiver) {
        if (J.$eq$(this.get$length(receiver), 0))
          throw H.wrapException(H.IterableElementError_noElement());
        return this.$index(receiver, J.$sub$n(this.get$length(receiver), 1));
      },
      contains$1: function(receiver, element) {
        var $length, t1, i, t2;
        $length = this.get$length(receiver);
        t1 = J.getInterceptor($length);
        i = 0;
        while (true) {
          t2 = this.get$length(receiver);
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(i < t2))
            break;
          if (J.$eq$(this.$index(receiver, i), element))
            return true;
          if (!t1.$eq($length, this.get$length(receiver)))
            throw H.wrapException(new P.ConcurrentModificationError(receiver));
          ++i;
        }
        return false;
      },
      firstWhere$2$orElse: function(receiver, test, orElse) {
        var $length, i, element;
        $length = this.get$length(receiver);
        if (typeof $length !== "number")
          return H.iae($length);
        i = 0;
        for (; i < $length; ++i) {
          element = this.$index(receiver, i);
          if (test.call$1(element) === true)
            return element;
          if ($length !== this.get$length(receiver))
            throw H.wrapException(new P.ConcurrentModificationError(receiver));
        }
        return orElse.call$0();
      },
      singleWhere$1: function(receiver, test) {
        var $length, match, matchFound, i, element;
        $length = this.get$length(receiver);
        if (typeof $length !== "number")
          return H.iae($length);
        match = null;
        matchFound = false;
        i = 0;
        for (; i < $length; ++i) {
          element = this.$index(receiver, i);
          if (test.call$1(element) === true) {
            if (matchFound)
              throw H.wrapException(H.IterableElementError_tooMany());
            match = element;
            matchFound = true;
          }
          if ($length !== this.get$length(receiver))
            throw H.wrapException(new P.ConcurrentModificationError(receiver));
        }
        if (matchFound)
          return match;
        throw H.wrapException(H.IterableElementError_noElement());
      },
      join$1: function(receiver, separator) {
        var t1;
        if (J.$eq$(this.get$length(receiver), 0))
          return "";
        t1 = P.StringBuffer__writeAll("", receiver, separator);
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      where$1: function(receiver, test) {
        return H.setRuntimeTypeInfo(new H.WhereIterable(receiver, test), [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      },
      map$1: function(receiver, f) {
        return H.setRuntimeTypeInfo(new H.MappedListIterable(receiver, f), [null, null]);
      },
      skip$1: function(receiver, count) {
        return H.SubListIterable$(receiver, count, null, H.getRuntimeTypeArgument(receiver, "ListMixin", 0));
      },
      toList$1$growable: function(receiver, growable) {
        var result, i, t1;
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
        C.JSArray_methods.set$length(result, this.get$length(receiver));
        i = 0;
        while (true) {
          t1 = this.get$length(receiver);
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(i < t1))
            break;
          t1 = this.$index(receiver, i);
          if (i >= result.length)
            return H.ioore(result, i);
          result[i] = t1;
          ++i;
        }
        return result;
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      add$1: function(receiver, element) {
        var t1 = this.get$length(receiver);
        this.set$length(receiver, J.$add$ns(t1, 1));
        this.$indexSet(receiver, t1, element);
      },
      addAll$1: function(receiver, iterable) {
        var i, t1, _i, element, t2;
        i = this.get$length(receiver);
        for (t1 = iterable.length, _i = 0; _i < iterable.length; iterable.length === t1 || (0, H.throwConcurrentModificationError)(iterable), ++_i) {
          element = iterable[_i];
          t2 = J.getInterceptor$ns(i);
          this.set$length(receiver, t2.$add(i, 1));
          this.$indexSet(receiver, i, element);
          i = t2.$add(i, 1);
        }
      },
      remove$1: function(receiver, element) {
        var i, t1;
        i = 0;
        while (true) {
          t1 = this.get$length(receiver);
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(i < t1))
            break;
          if (J.$eq$(this.$index(receiver, i), element)) {
            this.setRange$4(receiver, i, J.$sub$n(this.get$length(receiver), 1), receiver, i + 1);
            this.set$length(receiver, J.$sub$n(this.get$length(receiver), 1));
            return true;
          }
          ++i;
        }
        return false;
      },
      removeWhere$1: function(receiver, test) {
        P.ListMixin__filter(receiver, test, false);
      },
      clear$0: function(receiver) {
        this.set$length(receiver, 0);
      },
      sublist$2: function(receiver, start, end) {
        var listLength, $length, result, i, t1;
        listLength = this.get$length(receiver);
        P.RangeError_checkValidRange(start, listLength, listLength, null, null, null);
        $length = J.$sub$n(listLength, start);
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
        C.JSArray_methods.set$length(result, $length);
        if (typeof $length !== "number")
          return H.iae($length);
        i = 0;
        for (; i < $length; ++i) {
          t1 = this.$index(receiver, start + i);
          if (i >= result.length)
            return H.ioore(result, i);
          result[i] = t1;
        }
        return result;
      },
      sublist$1: function($receiver, start) {
        return this.sublist$2($receiver, start, null);
      },
      getRange$2: function(receiver, start, end) {
        P.RangeError_checkValidRange(start, end, this.get$length(receiver), null, null, null);
        return H.SubListIterable$(receiver, start, end, H.getRuntimeTypeArgument(receiver, "ListMixin", 0));
      },
      fillRange$3: function(receiver, start, end, fill) {
        var i;
        P.RangeError_checkValidRange(start, end, this.get$length(receiver), null, null, null);
        for (i = start; i < end; ++i)
          this.$indexSet(receiver, i, fill);
      },
      setRange$4: ["super$ListMixin$setRange", function(receiver, start, end, iterable, skipCount) {
        var $length, t1, t2, t3, i, t4;
        P.RangeError_checkValidRange(start, end, this.get$length(receiver), null, null, null);
        $length = J.$sub$n(end, start);
        t1 = J.getInterceptor($length);
        if (t1.$eq($length, 0))
          return;
        t2 = J.getInterceptor$n(skipCount);
        if (t2.$lt(skipCount, 0))
          H.throwExpression(P.RangeError$range(skipCount, 0, null, "skipCount", null));
        t3 = J.getInterceptor$asx(iterable);
        if (J.$gt$n(t2.$add(skipCount, $length), t3.get$length(iterable)))
          throw H.wrapException(H.IterableElementError_tooFew());
        if (t2.$lt(skipCount, start))
          for (i = t1.$sub($length, 1), t1 = J.getInterceptor$ns(start); t4 = J.getInterceptor$n(i), t4.$ge(i, 0); i = t4.$sub(i, 1))
            this.$indexSet(receiver, t1.$add(start, i), t3.$index(iterable, t2.$add(skipCount, i)));
        else {
          if (typeof $length !== "number")
            return H.iae($length);
          t1 = J.getInterceptor$ns(start);
          i = 0;
          for (; i < $length; ++i)
            this.$indexSet(receiver, t1.$add(start, i), t3.$index(iterable, t2.$add(skipCount, i)));
        }
      }, function($receiver, start, end, iterable) {
        return this.setRange$4($receiver, start, end, iterable, 0);
      }, "setRange$3", null, null, "get$setRange", 6, 2, null, 28],
      replaceRange$3: function(receiver, start, end, newContents) {
        var removeLength, insertLength, t1, t2, delta, insertEnd, newLength;
        P.RangeError_checkValidRange(start, end, this.get$length(receiver), null, null, null);
        newContents = C.JSString_methods.toList$0(newContents);
        removeLength = J.$sub$n(end, start);
        insertLength = newContents.length;
        t1 = J.getInterceptor$n(removeLength);
        t2 = J.getInterceptor$ns(start);
        if (t1.$ge(removeLength, insertLength)) {
          delta = t1.$sub(removeLength, insertLength);
          insertEnd = t2.$add(start, insertLength);
          newLength = J.$sub$n(this.get$length(receiver), delta);
          this.setRange$3(receiver, start, insertEnd, newContents);
          if (!J.$eq$(delta, 0)) {
            this.setRange$4(receiver, insertEnd, newLength, receiver, end);
            this.set$length(receiver, newLength);
          }
        } else {
          if (typeof removeLength !== "number")
            return H.iae(removeLength);
          newLength = J.$add$ns(this.get$length(receiver), insertLength - removeLength);
          insertEnd = t2.$add(start, insertLength);
          this.set$length(receiver, newLength);
          this.setRange$4(receiver, insertEnd, newLength, receiver, end);
          this.setRange$3(receiver, start, insertEnd, newContents);
        }
      },
      indexOf$2: function(receiver, element, startIndex) {
        var t1, i;
        t1 = this.get$length(receiver);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (startIndex >= t1)
          return -1;
        if (startIndex < 0)
          startIndex = 0;
        i = startIndex;
        while (true) {
          t1 = this.get$length(receiver);
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(i < t1))
            break;
          if (J.$eq$(this.$index(receiver, i), element))
            return i;
          ++i;
        }
        return -1;
      },
      indexOf$1: function($receiver, element) {
        return this.indexOf$2($receiver, element, 0);
      },
      toString$0: function(receiver) {
        return P.IterableBase_iterableToFullString(receiver, "[", "]");
      },
      $isList: 1,
      $asList: null,
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    _UnmodifiableMapMixin: {
      "^": "Object;",
      $indexSet: function(_, key, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot modify unmodifiable map"));
      },
      clear$0: function(_) {
        throw H.wrapException(new P.UnsupportedError("Cannot modify unmodifiable map"));
      },
      remove$1: function(_, key) {
        throw H.wrapException(new P.UnsupportedError("Cannot modify unmodifiable map"));
      },
      $isMap: 1,
      $asMap: null
    },
    MapView: {
      "^": "Object;",
      $index: function(_, key) {
        return this._map.$index(0, key);
      },
      $indexSet: function(_, key, value) {
        this._map.$indexSet(0, key, value);
      },
      clear$0: function(_) {
        this._map.clear$0(0);
      },
      forEach$1: function(_, action) {
        this._map.forEach$1(0, action);
      },
      get$isEmpty: function(_) {
        var t1 = this._map;
        return t1.get$isEmpty(t1);
      },
      get$isNotEmpty: function(_) {
        var t1 = this._map;
        return t1.get$isNotEmpty(t1);
      },
      get$length: function(_) {
        var t1 = this._map;
        return t1.get$length(t1);
      },
      get$keys: function(_) {
        var t1 = this._map;
        return t1.get$keys(t1);
      },
      remove$1: function(_, key) {
        return this._map.remove$1(0, key);
      },
      toString$0: function(_) {
        return this._map.toString$0(0);
      },
      $isMap: 1,
      $asMap: null
    },
    UnmodifiableMapView: {
      "^": "MapView+_UnmodifiableMapMixin;_map",
      $isMap: 1,
      $asMap: null
    },
    Maps_mapToString_closure: {
      "^": "Closure:9;_box_0,result",
      call$2: function(k, v) {
        var t1, t2;
        t1 = this._box_0;
        if (!t1.first)
          this.result._contents += ", ";
        t1.first = false;
        t1 = this.result;
        t2 = t1._contents += H.S(k);
        t1._contents = t2 + ": ";
        t1._contents += H.S(v);
      }
    },
    ListQueue: {
      "^": "ListIterable;_collection$_table,_head,_tail,_modificationCount",
      get$iterator: function(_) {
        var t1 = new P._ListQueueIterator(this, this._tail, this._modificationCount, this._head, null);
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        return t1;
      },
      forEach$1: function(_, action) {
        var modificationCount, i, t1;
        modificationCount = this._modificationCount;
        for (i = this._head; i !== this._tail; i = (i + 1 & this._collection$_table.length - 1) >>> 0) {
          t1 = this._collection$_table;
          if (i < 0 || i >= t1.length)
            return H.ioore(t1, i);
          action.call$1(t1[i]);
          if (modificationCount !== this._modificationCount)
            H.throwExpression(new P.ConcurrentModificationError(this));
        }
      },
      get$isEmpty: function(_) {
        return this._head === this._tail;
      },
      get$length: function(_) {
        return (this._tail - this._head & this._collection$_table.length - 1) >>> 0;
      },
      get$last: function(_) {
        var t1, t2, t3;
        t1 = this._head;
        t2 = this._tail;
        if (t1 === t2)
          throw H.wrapException(H.IterableElementError_noElement());
        t1 = this._collection$_table;
        t3 = t1.length;
        t2 = (t2 - 1 & t3 - 1) >>> 0;
        if (t2 < 0 || t2 >= t3)
          return H.ioore(t1, t2);
        return t1[t2];
      },
      elementAt$1: function(_, index) {
        var $length, t1, t2, t3;
        $length = (this._tail - this._head & this._collection$_table.length - 1) >>> 0;
        if (typeof index !== "number")
          return H.iae(index);
        if (0 > index || index >= $length)
          H.throwExpression(P.IndexError$(index, this, "index", null, $length));
        t1 = this._collection$_table;
        t2 = t1.length;
        t3 = (this._head + index & t2 - 1) >>> 0;
        if (t3 < 0 || t3 >= t2)
          return H.ioore(t1, t3);
        return t1[t3];
      },
      toList$1$growable: function(_, growable) {
        var list = H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(this, 0)]);
        C.JSArray_methods.set$length(list, this.get$length(this));
        this._writeToList$1(list);
        return list;
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      add$1: function(_, value) {
        this._add$1(0, value);
      },
      remove$1: function(_, value) {
        var i, t1;
        for (i = this._head; i !== this._tail; i = (i + 1 & this._collection$_table.length - 1) >>> 0) {
          t1 = this._collection$_table;
          if (i < 0 || i >= t1.length)
            return H.ioore(t1, i);
          if (J.$eq$(t1[i], value)) {
            this._collection$_remove$1(0, i);
            ++this._modificationCount;
            return true;
          }
        }
        return false;
      },
      _filterWhere$2: function(test, removeMatching) {
        var modificationCount, i, t1, t2;
        modificationCount = this._modificationCount;
        i = this._head;
        for (; i !== this._tail;) {
          t1 = this._collection$_table;
          if (i < 0 || i >= t1.length)
            return H.ioore(t1, i);
          t1 = test.call$1(t1[i]);
          t2 = this._modificationCount;
          if (modificationCount !== t2)
            H.throwExpression(new P.ConcurrentModificationError(this));
          if (true === t1) {
            i = this._collection$_remove$1(0, i);
            modificationCount = ++this._modificationCount;
          } else
            i = (i + 1 & this._collection$_table.length - 1) >>> 0;
        }
      },
      removeWhere$1: function(_, test) {
        this._filterWhere$2(test, true);
      },
      clear$0: function(_) {
        var i, t1, t2, t3, t4;
        i = this._head;
        t1 = this._tail;
        if (i !== t1) {
          for (t2 = this._collection$_table, t3 = t2.length, t4 = t3 - 1; i !== t1; i = (i + 1 & t4) >>> 0) {
            if (i < 0 || i >= t3)
              return H.ioore(t2, i);
            t2[i] = null;
          }
          this._tail = 0;
          this._head = 0;
          ++this._modificationCount;
        }
      },
      toString$0: function(_) {
        return P.IterableBase_iterableToFullString(this, "{", "}");
      },
      removeFirst$0: function() {
        var t1, t2, t3, result;
        t1 = this._head;
        if (t1 === this._tail)
          throw H.wrapException(H.IterableElementError_noElement());
        ++this._modificationCount;
        t2 = this._collection$_table;
        t3 = t2.length;
        if (t1 >= t3)
          return H.ioore(t2, t1);
        result = t2[t1];
        t2[t1] = null;
        this._head = (t1 + 1 & t3 - 1) >>> 0;
        return result;
      },
      _add$1: function(_, element) {
        var t1, t2, t3;
        t1 = this._collection$_table;
        t2 = this._tail;
        t3 = t1.length;
        if (t2 < 0 || t2 >= t3)
          return H.ioore(t1, t2);
        t1[t2] = element;
        t3 = (t2 + 1 & t3 - 1) >>> 0;
        this._tail = t3;
        if (this._head === t3)
          this._grow$0();
        ++this._modificationCount;
      },
      _collection$_remove$1: function(_, offset) {
        var t1, t2, mask, t3, t4, i, prevOffset, nextOffset;
        t1 = this._collection$_table;
        t2 = t1.length;
        mask = t2 - 1;
        t3 = this._head;
        t4 = this._tail;
        if ((offset - t3 & mask) >>> 0 < (t4 - offset & mask) >>> 0) {
          for (i = offset; i !== t3; i = prevOffset) {
            prevOffset = (i - 1 & mask) >>> 0;
            if (prevOffset < 0 || prevOffset >= t2)
              return H.ioore(t1, prevOffset);
            t4 = t1[prevOffset];
            if (i < 0 || i >= t2)
              return H.ioore(t1, i);
            t1[i] = t4;
          }
          if (t3 >= t2)
            return H.ioore(t1, t3);
          t1[t3] = null;
          this._head = (t3 + 1 & mask) >>> 0;
          return (offset + 1 & mask) >>> 0;
        } else {
          t3 = (t4 - 1 & mask) >>> 0;
          this._tail = t3;
          for (i = offset; i !== t3; i = nextOffset) {
            nextOffset = (i + 1 & mask) >>> 0;
            if (nextOffset < 0 || nextOffset >= t2)
              return H.ioore(t1, nextOffset);
            t4 = t1[nextOffset];
            if (i < 0 || i >= t2)
              return H.ioore(t1, i);
            t1[i] = t4;
          }
          if (t3 < 0 || t3 >= t2)
            return H.ioore(t1, t3);
          t1[t3] = null;
          return offset;
        }
      },
      _grow$0: function() {
        var t1, newTable, t2, split;
        t1 = new Array(this._collection$_table.length * 2);
        t1.fixed$length = Array;
        newTable = H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(this, 0)]);
        t1 = this._collection$_table;
        t2 = this._head;
        split = t1.length - t2;
        C.JSArray_methods.setRange$4(newTable, 0, split, t1, t2);
        C.JSArray_methods.setRange$4(newTable, split, split + this._head, this._collection$_table, 0);
        this._head = 0;
        this._tail = this._collection$_table.length;
        this._collection$_table = newTable;
      },
      _writeToList$1: function(target) {
        var t1, t2, t3, $length, firstPartSize;
        t1 = this._head;
        t2 = this._tail;
        t3 = this._collection$_table;
        if (t1 <= t2) {
          $length = t2 - t1;
          C.JSArray_methods.setRange$4(target, 0, $length, t3, t1);
          return $length;
        } else {
          firstPartSize = t3.length - t1;
          C.JSArray_methods.setRange$4(target, 0, firstPartSize, t3, t1);
          C.JSArray_methods.setRange$4(target, firstPartSize, firstPartSize + this._tail, this._collection$_table, 0);
          return this._tail + firstPartSize;
        }
      },
      ListQueue$1: function(initialCapacity, $E) {
        var t1 = new Array(8);
        t1.fixed$length = Array;
        this._collection$_table = H.setRuntimeTypeInfo(t1, [$E]);
      },
      $isEfficientLength: 1,
      $asIterable: null,
      static: {
        ListQueue$: function(initialCapacity, $E) {
          var t1 = H.setRuntimeTypeInfo(new P.ListQueue(null, 0, 0, 0), [$E]);
          t1.ListQueue$1(initialCapacity, $E);
          return t1;
        }
      }
    },
    _ListQueueIterator: {
      "^": "Object;_queue,_end,_modificationCount,_collection$_position,_collection$_current",
      get$current: function() {
        return this._collection$_current;
      },
      moveNext$0: function() {
        var t1, t2, t3;
        t1 = this._queue;
        if (this._modificationCount !== t1._modificationCount)
          H.throwExpression(new P.ConcurrentModificationError(t1));
        t2 = this._collection$_position;
        if (t2 === this._end) {
          this._collection$_current = null;
          return false;
        }
        t1 = t1._collection$_table;
        t3 = t1.length;
        if (t2 >= t3)
          return H.ioore(t1, t2);
        this._collection$_current = t1[t2];
        this._collection$_position = (t2 + 1 & t3 - 1) >>> 0;
        return true;
      }
    },
    SetMixin: {
      "^": "Object;",
      get$isEmpty: function(_) {
        return this._collection$_length === 0;
      },
      get$isNotEmpty: function(_) {
        return this._collection$_length !== 0;
      },
      clear$0: function(_) {
        this.removeAll$1(this.toList$0(0));
      },
      addAll$1: function(_, elements) {
        var t1;
        for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
          this.add$1(0, t1.get$current());
      },
      removeAll$1: function(elements) {
        var t1, _i;
        for (t1 = elements.length, _i = 0; _i < elements.length; elements.length === t1 || (0, H.throwConcurrentModificationError)(elements), ++_i)
          this.remove$1(0, elements[_i]);
      },
      removeWhere$1: function(_, test) {
        var toRemove, t1, element;
        toRemove = [];
        for (t1 = H.setRuntimeTypeInfo(new P._LinkedHashSetIterator(this, this._collection$_modifications, null, null), [null]), t1._cell = t1._set._collection$_first; t1.moveNext$0();) {
          element = t1._collection$_current;
          if (test.call$1(element) === true)
            toRemove.push(element);
        }
        this.removeAll$1(toRemove);
      },
      toList$1$growable: function(_, growable) {
        var result, t1, i, element, i0;
        result = H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(this, 0)]);
        C.JSArray_methods.set$length(result, this._collection$_length);
        for (t1 = H.setRuntimeTypeInfo(new P._LinkedHashSetIterator(this, this._collection$_modifications, null, null), [null]), t1._cell = t1._set._collection$_first, i = 0; t1.moveNext$0(); i = i0) {
          element = t1._collection$_current;
          i0 = i + 1;
          if (i >= result.length)
            return H.ioore(result, i);
          result[i] = element;
        }
        return result;
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      map$1: function(_, f) {
        return H.setRuntimeTypeInfo(new H.EfficientLengthMappedIterable(this, f), [H.getTypeArgumentByIndex(this, 0), null]);
      },
      toString$0: function(_) {
        return P.IterableBase_iterableToFullString(this, "{", "}");
      },
      where$1: function(_, f) {
        var t1 = new H.WhereIterable(this, f);
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        return t1;
      },
      forEach$1: function(_, f) {
        var t1;
        for (t1 = H.setRuntimeTypeInfo(new P._LinkedHashSetIterator(this, this._collection$_modifications, null, null), [null]), t1._cell = t1._set._collection$_first; t1.moveNext$0();)
          f.call$1(t1._collection$_current);
      },
      join$1: function(_, separator) {
        var iterator, buffer, t1;
        iterator = H.setRuntimeTypeInfo(new P._LinkedHashSetIterator(this, this._collection$_modifications, null, null), [null]);
        iterator._cell = iterator._set._collection$_first;
        if (!iterator.moveNext$0())
          return "";
        buffer = new P.StringBuffer("");
        if (separator === "") {
          do
            buffer._contents += H.S(iterator._collection$_current);
          while (iterator.moveNext$0());
        } else {
          buffer._contents = H.S(iterator._collection$_current);
          for (; iterator.moveNext$0();) {
            buffer._contents += separator;
            buffer._contents += H.S(iterator._collection$_current);
          }
        }
        t1 = buffer._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      get$last: function(_) {
        var it, result;
        it = H.setRuntimeTypeInfo(new P._LinkedHashSetIterator(this, this._collection$_modifications, null, null), [null]);
        it._cell = it._set._collection$_first;
        if (!it.moveNext$0())
          throw H.wrapException(H.IterableElementError_noElement());
        do
          result = it._collection$_current;
        while (it.moveNext$0());
        return result;
      },
      firstWhere$2$orElse: function(_, test, orElse) {
        var t1, element;
        for (t1 = H.setRuntimeTypeInfo(new P._LinkedHashSetIterator(this, this._collection$_modifications, null, null), [null]), t1._cell = t1._set._collection$_first; t1.moveNext$0();) {
          element = t1._collection$_current;
          if (test.call$1(element) === true)
            return element;
        }
        return orElse.call$0();
      },
      singleWhere$1: function(_, test) {
        var t1, result, foundMatching, element;
        for (t1 = H.setRuntimeTypeInfo(new P._LinkedHashSetIterator(this, this._collection$_modifications, null, null), [null]), t1._cell = t1._set._collection$_first, result = null, foundMatching = false; t1.moveNext$0();) {
          element = t1._collection$_current;
          if (test.call$1(element) === true) {
            if (foundMatching)
              throw H.wrapException(H.IterableElementError_tooMany());
            result = element;
            foundMatching = true;
          }
        }
        if (foundMatching)
          return result;
        throw H.wrapException(H.IterableElementError_noElement());
      },
      elementAt$1: function(_, index) {
        var t1, elementIndex, element;
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(P.ArgumentError$notNull("index"));
        if (index < 0)
          H.throwExpression(P.RangeError$range(index, 0, null, "index", null));
        for (t1 = H.setRuntimeTypeInfo(new P._LinkedHashSetIterator(this, this._collection$_modifications, null, null), [null]), t1._cell = t1._set._collection$_first, elementIndex = 0; t1.moveNext$0();) {
          element = t1._collection$_current;
          if (index === elementIndex)
            return element;
          ++elementIndex;
        }
        throw H.wrapException(P.IndexError$(index, this, "index", null, elementIndex));
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    SetBase: {
      "^": "SetMixin;"
    }
  }], ["dart.convert", "dart:convert",, P, {
    "^": "",
    _convertJsonToDartLazy: function(object) {
      var i;
      if (object == null)
        return;
      if (typeof object != "object")
        return object;
      if (Object.getPrototypeOf(object) !== Array.prototype)
        return new P._JsonMap(object, Object.create(null), null);
      for (i = 0; i < object.length; ++i)
        object[i] = P._convertJsonToDartLazy(object[i]);
      return object;
    },
    _parseJson: function(source, reviver) {
      var parsed, e, t1, exception;
      t1 = source;
      if (typeof t1 !== "string")
        throw H.wrapException(H.argumentErrorValue(source));
      parsed = null;
      try {
        parsed = JSON.parse(source);
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        throw H.wrapException(new P.FormatException(String(e), null, null));
      }
      return P._convertJsonToDartLazy(parsed);
    },
    _defaultToEncodable: [function(object) {
      return object.toJson$0();
    }, "call$1", "convert___defaultToEncodable$closure", 2, 0, 1, 14, []],
    _JsonMap: {
      "^": "Object;_original,_processed,_data",
      $index: function(_, key) {
        var t1, result;
        t1 = this._processed;
        if (t1 == null)
          return this._data.$index(0, key);
        else if (typeof key !== "string")
          return;
        else {
          result = t1[key];
          return typeof result == "undefined" ? this._process$1(key) : result;
        }
      },
      get$length: function(_) {
        var t1;
        if (this._processed == null) {
          t1 = this._data;
          t1 = t1.get$length(t1);
        } else
          t1 = this._computeKeys$0().length;
        return t1;
      },
      get$isEmpty: function(_) {
        var t1;
        if (this._processed == null) {
          t1 = this._data;
          t1 = t1.get$length(t1);
        } else
          t1 = this._computeKeys$0().length;
        return t1 === 0;
      },
      get$isNotEmpty: function(_) {
        var t1;
        if (this._processed == null) {
          t1 = this._data;
          t1 = t1.get$length(t1);
        } else
          t1 = this._computeKeys$0().length;
        return t1 > 0;
      },
      get$keys: function(_) {
        var t1;
        if (this._processed == null) {
          t1 = this._data;
          return t1.get$keys(t1);
        }
        return new P._JsonMapKeyIterable(this);
      },
      $indexSet: function(_, key, value) {
        var processed, original;
        if (this._processed == null)
          this._data.$indexSet(0, key, value);
        else if (this.containsKey$1(0, key)) {
          processed = this._processed;
          processed[key] = value;
          original = this._original;
          if (original == null ? processed != null : original !== processed)
            original[key] = null;
        } else
          this._upgrade$0().$indexSet(0, key, value);
      },
      containsKey$1: function(_, key) {
        if (this._processed == null)
          return this._data.containsKey$1(0, key);
        if (typeof key !== "string")
          return false;
        return Object.prototype.hasOwnProperty.call(this._original, key);
      },
      remove$1: function(_, key) {
        if (this._processed != null && !this.containsKey$1(0, key))
          return;
        return this._upgrade$0().remove$1(0, key);
      },
      clear$0: function(_) {
        var t1;
        if (this._processed == null)
          this._data.clear$0(0);
        else {
          t1 = this._data;
          if (t1 != null)
            J.clear$0$ax(t1);
          this._processed = null;
          this._original = null;
          this._data = P.LinkedHashMap__makeEmpty();
        }
      },
      forEach$1: function(_, f) {
        var keys, i, key, value;
        if (this._processed == null)
          return this._data.forEach$1(0, f);
        keys = this._computeKeys$0();
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          value = this._processed[key];
          if (typeof value == "undefined") {
            value = P._convertJsonToDartLazy(this._original[key]);
            this._processed[key] = value;
          }
          f.call$2(key, value);
          if (keys !== this._data)
            throw H.wrapException(new P.ConcurrentModificationError(this));
        }
      },
      toString$0: function(_) {
        return P.Maps_mapToString(this);
      },
      _computeKeys$0: function() {
        var keys = this._data;
        if (keys == null) {
          keys = Object.keys(this._original);
          this._data = keys;
        }
        return keys;
      },
      _upgrade$0: function() {
        var result, keys, i, t1, key;
        if (this._processed == null)
          return this._data;
        result = P.LinkedHashMap__makeEmpty();
        keys = this._computeKeys$0();
        for (i = 0; t1 = keys.length, i < t1; ++i) {
          key = keys[i];
          result.$indexSet(0, key, this.$index(0, key));
        }
        if (t1 === 0)
          keys.push(null);
        else
          C.JSArray_methods.set$length(keys, 0);
        this._processed = null;
        this._original = null;
        this._data = result;
        return result;
      },
      _process$1: function(key) {
        var result;
        if (!Object.prototype.hasOwnProperty.call(this._original, key))
          return;
        result = P._convertJsonToDartLazy(this._original[key]);
        return this._processed[key] = result;
      },
      $isMap: 1,
      $asMap: Isolate.functionThatReturnsNull
    },
    _JsonMapKeyIterable: {
      "^": "ListIterable;_convert$_parent",
      get$length: function(_) {
        var t1 = this._convert$_parent;
        if (t1._processed == null) {
          t1 = t1._data;
          t1 = t1.get$length(t1);
        } else
          t1 = t1._computeKeys$0().length;
        return t1;
      },
      elementAt$1: function(_, index) {
        var t1 = this._convert$_parent;
        if (t1._processed == null)
          t1 = t1.get$keys(t1).elementAt$1(0, index);
        else {
          t1 = t1._computeKeys$0();
          if (index >>> 0 !== index || index >= t1.length)
            return H.ioore(t1, index);
          t1 = t1[index];
        }
        return t1;
      },
      get$iterator: function(_) {
        var t1 = this._convert$_parent;
        if (t1._processed == null) {
          t1 = t1.get$keys(t1);
          t1 = t1.get$iterator(t1);
        } else {
          t1 = t1._computeKeys$0();
          t1 = H.setRuntimeTypeInfo(new J.ArrayIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]);
        }
        return t1;
      },
      contains$1: function(_, key) {
        return this._convert$_parent.containsKey$1(0, key);
      },
      $asListIterable: Isolate.functionThatReturnsNull,
      $asIterable: Isolate.functionThatReturnsNull
    },
    Codec: {
      "^": "Object;"
    },
    Converter: {
      "^": "Object;"
    },
    Encoding: {
      "^": "Codec;",
      $asCodec: function() {
        return [P.String, [P.List, P.$int]];
      }
    },
    HtmlEscapeMode: {
      "^": "Object;_convert$_name,escapeLtGt,escapeQuot,escapeApos,escapeSlash",
      toString$0: function(_) {
        return this._convert$_name;
      }
    },
    HtmlEscape: {
      "^": "Converter;mode>",
      _convert$3: function(text, start, end) {
        var t1, i, result, replacement, t2;
        if (typeof end !== "number")
          return H.iae(end);
        t1 = J.getInterceptor$asx(text);
        i = start;
        result = null;
        for (; i < end; ++i) {
          switch (t1.$index(text, i)) {
            case "&":
              replacement = "&amp;";
              break;
            case '"':
              replacement = "&quot;";
              break;
            case "'":
              replacement = "&#39;";
              break;
            case "<":
              replacement = "&lt;";
              break;
            case ">":
              replacement = "&gt;";
              break;
            case "/":
              replacement = "&#47;";
              break;
            default:
              replacement = null;
          }
          if (replacement != null) {
            if (result == null)
              result = new P.StringBuffer("");
            if (i > start) {
              t2 = t1.substring$2(text, start, i);
              result._contents = result._contents + t2;
            }
            result._contents = result._contents + replacement;
            start = i + 1;
          }
        }
        if (result == null)
          return;
        if (end > start)
          result._contents += t1.substring$2(text, start, end);
        t1 = result._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      $asConverter: function() {
        return [P.String, P.String];
      }
    },
    JsonUnsupportedObjectError: {
      "^": "Error;unsupportedObject,cause",
      toString$0: function(_) {
        if (this.cause != null)
          return "Converting object to an encodable object failed.";
        else
          return "Converting object did not return an encodable object.";
      }
    },
    JsonCyclicError: {
      "^": "JsonUnsupportedObjectError;unsupportedObject,cause",
      toString$0: function(_) {
        return "Cyclic error in JSON stringify";
      }
    },
    JsonCodec: {
      "^": "Codec;_reviver,_toEncodable",
      decode$2$reviver: function(source, reviver) {
        return P._parseJson(source, this.get$decoder()._reviver);
      },
      decode$1: function(source) {
        return this.decode$2$reviver(source, null);
      },
      encode$2$toEncodable: function(value, toEncodable) {
        var t1 = this.get$encoder();
        return P._JsonStringStringifier_stringify(value, t1._toEncodable, t1.indent);
      },
      encode$1: function(value) {
        return this.encode$2$toEncodable(value, null);
      },
      get$encoder: function() {
        return C.JsonEncoder_null_null;
      },
      get$decoder: function() {
        return C.JsonDecoder_null;
      },
      $asCodec: function() {
        return [P.Object, P.String];
      }
    },
    JsonEncoder: {
      "^": "Converter;indent,_toEncodable",
      $asConverter: function() {
        return [P.Object, P.String];
      }
    },
    JsonDecoder: {
      "^": "Converter;_reviver",
      $asConverter: function() {
        return [P.String, P.Object];
      }
    },
    _JsonStringifier: {
      "^": "Object;",
      writeStringContent$1: function(s) {
        var t1, $length, t2, offset, i, charCode, t3;
        t1 = J.getInterceptor$asx(s);
        $length = t1.get$length(s);
        if (typeof $length !== "number")
          return H.iae($length);
        t2 = this._sink;
        offset = 0;
        i = 0;
        for (; i < $length; ++i) {
          charCode = t1.codeUnitAt$1(s, i);
          if (charCode > 92)
            continue;
          if (charCode < 32) {
            if (i > offset)
              t2._contents += t1.substring$2(s, offset, i);
            offset = i + 1;
            t2._contents += H.Primitives_stringFromCharCode(92);
            switch (charCode) {
              case 8:
                t2._contents += H.Primitives_stringFromCharCode(98);
                break;
              case 9:
                t2._contents += H.Primitives_stringFromCharCode(116);
                break;
              case 10:
                t2._contents += H.Primitives_stringFromCharCode(110);
                break;
              case 12:
                t2._contents += H.Primitives_stringFromCharCode(102);
                break;
              case 13:
                t2._contents += H.Primitives_stringFromCharCode(114);
                break;
              default:
                t2._contents += H.Primitives_stringFromCharCode(117);
                t2._contents += H.Primitives_stringFromCharCode(48);
                t2._contents += H.Primitives_stringFromCharCode(48);
                t3 = charCode >>> 4 & 15;
                t2._contents += H.Primitives_stringFromCharCode(t3 < 10 ? 48 + t3 : 87 + t3);
                t3 = charCode & 15;
                t2._contents += H.Primitives_stringFromCharCode(t3 < 10 ? 48 + t3 : 87 + t3);
                break;
            }
          } else if (charCode === 34 || charCode === 92) {
            if (i > offset)
              t2._contents += t1.substring$2(s, offset, i);
            offset = i + 1;
            t2._contents += H.Primitives_stringFromCharCode(92);
            t2._contents += H.Primitives_stringFromCharCode(charCode);
          }
        }
        if (offset === 0)
          t2._contents += H.S(s);
        else if (offset < $length)
          t2._contents += t1.substring$2(s, offset, $length);
      },
      _checkCycle$1: function(object) {
        var t1, t2, i, t3;
        for (t1 = this._seen, t2 = t1.length, i = 0; i < t2; ++i) {
          t3 = t1[i];
          if (object == null ? t3 == null : object === t3)
            throw H.wrapException(new P.JsonCyclicError(object, null));
        }
        t1.push(object);
      },
      writeObject$1: function(object) {
        var customJson, e, t1, exception;
        if (this.writeJsonValue$1(object))
          return;
        this._checkCycle$1(object);
        try {
          customJson = this._toEncodable.call$1(object);
          if (!this.writeJsonValue$1(customJson))
            throw H.wrapException(new P.JsonUnsupportedObjectError(object, null));
          t1 = this._seen;
          if (0 >= t1.length)
            return H.ioore(t1, -1);
          t1.pop();
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          throw H.wrapException(new P.JsonUnsupportedObjectError(object, e));
        }
      },
      writeJsonValue$1: function(object) {
        var t1, success;
        if (typeof object === "number") {
          if (!isFinite(object))
            return false;
          this._sink._contents += C.JSNumber_methods.toString$0(object);
          return true;
        } else if (object === true) {
          this._sink._contents += "true";
          return true;
        } else if (object === false) {
          this._sink._contents += "false";
          return true;
        } else if (object == null) {
          this._sink._contents += "null";
          return true;
        } else if (typeof object === "string") {
          t1 = this._sink;
          t1._contents += '"';
          this.writeStringContent$1(object);
          t1._contents += '"';
          return true;
        } else {
          t1 = J.getInterceptor(object);
          if (!!t1.$isList) {
            this._checkCycle$1(object);
            this.writeList$1(object);
            t1 = this._seen;
            if (0 >= t1.length)
              return H.ioore(t1, -1);
            t1.pop();
            return true;
          } else if (!!t1.$isMap) {
            this._checkCycle$1(object);
            success = this.writeMap$1(object);
            t1 = this._seen;
            if (0 >= t1.length)
              return H.ioore(t1, -1);
            t1.pop();
            return success;
          } else
            return false;
        }
      },
      writeList$1: function(list) {
        var t1, t2, i, t3;
        t1 = this._sink;
        t1._contents += "[";
        t2 = J.getInterceptor$asx(list);
        if (J.$gt$n(t2.get$length(list), 0)) {
          this.writeObject$1(t2.$index(list, 0));
          i = 1;
          while (true) {
            t3 = t2.get$length(list);
            if (typeof t3 !== "number")
              return H.iae(t3);
            if (!(i < t3))
              break;
            t1._contents += ",";
            this.writeObject$1(t2.$index(list, i));
            ++i;
          }
        }
        t1._contents += "]";
      },
      writeMap$1: function(map) {
        var t1, t2, t3, keyValueList, separator, i;
        t1 = {};
        t2 = J.getInterceptor$asx(map);
        if (t2.get$isEmpty(map)) {
          this._sink._contents += "{}";
          return true;
        }
        t3 = t2.get$length(map);
        if (typeof t3 !== "number")
          return t3.$mul();
        t3 *= 2;
        keyValueList = new Array(t3);
        t1.i = 0;
        t1.allStringKeys = true;
        t2.forEach$1(map, new P._JsonStringifier_writeMap_closure(t1, keyValueList));
        if (!t1.allStringKeys)
          return false;
        t1 = this._sink;
        t1._contents += "{";
        for (separator = '"', i = 0; i < t3; i += 2, separator = ',"') {
          t1._contents += separator;
          this.writeStringContent$1(keyValueList[i]);
          t1._contents += '":';
          t2 = i + 1;
          if (t2 >= t3)
            return H.ioore(keyValueList, t2);
          this.writeObject$1(keyValueList[t2]);
        }
        t1._contents += "}";
        return true;
      }
    },
    _JsonStringifier_writeMap_closure: {
      "^": "Closure:9;_box_0,keyValueList",
      call$2: function(key, value) {
        var t1, t2, t3, i, t4;
        if (typeof key !== "string")
          this._box_0.allStringKeys = false;
        t1 = this.keyValueList;
        t2 = this._box_0;
        t3 = t2.i;
        i = t3 + 1;
        t2.i = i;
        t4 = t1.length;
        if (t3 >= t4)
          return H.ioore(t1, t3);
        t1[t3] = key;
        t2.i = i + 1;
        if (i >= t4)
          return H.ioore(t1, i);
        t1[i] = value;
      }
    },
    _JsonStringStringifier: {
      "^": "_JsonStringifier;_sink,_seen,_toEncodable",
      static: {
        _JsonStringStringifier_stringify: function(object, toEncodable, indent) {
          var output, t1, stringifier;
          output = new P.StringBuffer("");
          t1 = P.convert___defaultToEncodable$closure();
          stringifier = new P._JsonStringStringifier(output, [], t1);
          stringifier.writeObject$1(object);
          t1 = output._contents;
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        }
      }
    },
    Utf8Codec: {
      "^": "Encoding;_allowMalformed",
      get$name: function(_) {
        return "utf-8";
      },
      get$encoder: function() {
        return C.C_Utf8Encoder;
      }
    },
    Utf8Encoder: {
      "^": "Converter;",
      convert$3: function(string, start, end) {
        var t1, stringLength, t2, $length, t3, encoder;
        t1 = J.getInterceptor$asx(string);
        stringLength = t1.get$length(string);
        P.RangeError_checkValidRange(start, end, stringLength, null, null, null);
        t2 = J.getInterceptor$n(stringLength);
        $length = t2.$sub(stringLength, start);
        t3 = J.getInterceptor($length);
        if (t3.$eq($length, 0))
          return new Uint8Array(H._checkLength(0));
        t3 = new Uint8Array(H._checkLength(t3.$mul($length, 3)));
        encoder = new P._Utf8Encoder(0, 0, t3);
        if (encoder._fillBuffer$3(string, start, stringLength) !== stringLength)
          encoder._writeSurrogate$2(t1.codeUnitAt$1(string, t2.$sub(stringLength, 1)), 0);
        return C.NativeUint8List_methods.sublist$2(t3, 0, encoder._bufferIndex);
      },
      convert$1: function(string) {
        return this.convert$3(string, 0, null);
      },
      $asConverter: function() {
        return [P.String, [P.List, P.$int]];
      }
    },
    _Utf8Encoder: {
      "^": "Object;_carry,_bufferIndex,_buffer",
      _writeSurrogate$2: function(leadingSurrogate, nextCodeUnit) {
        var t1, t2, rune, t3, t4;
        t1 = this._buffer;
        t2 = this._bufferIndex;
        if ((nextCodeUnit & 64512) === 56320) {
          rune = 65536 + ((leadingSurrogate & 1023) << 10 >>> 0) | nextCodeUnit & 1023;
          t3 = t2 + 1;
          this._bufferIndex = t3;
          t4 = t1.length;
          if (t2 >= t4)
            return H.ioore(t1, t2);
          t1[t2] = (240 | rune >>> 18) >>> 0;
          t2 = t3 + 1;
          this._bufferIndex = t2;
          if (t3 >= t4)
            return H.ioore(t1, t3);
          t1[t3] = 128 | rune >>> 12 & 63;
          t3 = t2 + 1;
          this._bufferIndex = t3;
          if (t2 >= t4)
            return H.ioore(t1, t2);
          t1[t2] = 128 | rune >>> 6 & 63;
          this._bufferIndex = t3 + 1;
          if (t3 >= t4)
            return H.ioore(t1, t3);
          t1[t3] = 128 | rune & 63;
          return true;
        } else {
          t3 = t2 + 1;
          this._bufferIndex = t3;
          t4 = t1.length;
          if (t2 >= t4)
            return H.ioore(t1, t2);
          t1[t2] = 224 | leadingSurrogate >>> 12;
          t2 = t3 + 1;
          this._bufferIndex = t2;
          if (t3 >= t4)
            return H.ioore(t1, t3);
          t1[t3] = 128 | leadingSurrogate >>> 6 & 63;
          this._bufferIndex = t2 + 1;
          if (t2 >= t4)
            return H.ioore(t1, t2);
          t1[t2] = 128 | leadingSurrogate & 63;
          return false;
        }
      },
      _fillBuffer$3: function(str, start, end) {
        var t1, t2, t3, stringIndex, codeUnit, t4, stringIndex0, t5;
        if (start !== end && (J.codeUnitAt$1$s(str, J.$sub$n(end, 1)) & 64512) === 55296)
          end = J.$sub$n(end, 1);
        if (typeof end !== "number")
          return H.iae(end);
        t1 = this._buffer;
        t2 = t1.length;
        t3 = J.getInterceptor$s(str);
        stringIndex = start;
        for (; stringIndex < end; ++stringIndex) {
          codeUnit = t3.codeUnitAt$1(str, stringIndex);
          if (codeUnit <= 127) {
            t4 = this._bufferIndex;
            if (t4 >= t2)
              break;
            this._bufferIndex = t4 + 1;
            t1[t4] = codeUnit;
          } else if ((codeUnit & 64512) === 55296) {
            if (this._bufferIndex + 3 >= t2)
              break;
            stringIndex0 = stringIndex + 1;
            if (this._writeSurrogate$2(codeUnit, t3.codeUnitAt$1(str, stringIndex0)))
              stringIndex = stringIndex0;
          } else if (codeUnit <= 2047) {
            t4 = this._bufferIndex;
            t5 = t4 + 1;
            if (t5 >= t2)
              break;
            this._bufferIndex = t5;
            if (t4 >= t2)
              return H.ioore(t1, t4);
            t1[t4] = 192 | codeUnit >>> 6;
            this._bufferIndex = t5 + 1;
            t1[t5] = 128 | codeUnit & 63;
          } else {
            t4 = this._bufferIndex;
            if (t4 + 2 >= t2)
              break;
            t5 = t4 + 1;
            this._bufferIndex = t5;
            if (t4 >= t2)
              return H.ioore(t1, t4);
            t1[t4] = 224 | codeUnit >>> 12;
            t4 = t5 + 1;
            this._bufferIndex = t4;
            if (t5 >= t2)
              return H.ioore(t1, t5);
            t1[t5] = 128 | codeUnit >>> 6 & 63;
            this._bufferIndex = t4 + 1;
            if (t4 >= t2)
              return H.ioore(t1, t4);
            t1[t4] = 128 | codeUnit & 63;
          }
        }
        return stringIndex;
      }
    }
  }], ["dart.core", "dart:core",, P, {
    "^": "",
    String__stringFromIterable: function(charCodes, start, end) {
      var t1, it, i, list;
      if (start < 0)
        throw H.wrapException(P.RangeError$range(start, 0, J.get$length$asx(charCodes), null, null));
      t1 = end == null;
      if (!t1 && end < start)
        throw H.wrapException(P.RangeError$range(end, start, J.get$length$asx(charCodes), null, null));
      it = J.get$iterator$ax(charCodes);
      for (i = 0; i < start; ++i)
        if (!it.moveNext$0())
          throw H.wrapException(P.RangeError$range(start, 0, i, null, null));
      list = [];
      if (t1)
        for (; it.moveNext$0();)
          list.push(it.get$current());
      else
        for (i = start; i < end; ++i) {
          if (!it.moveNext$0())
            throw H.wrapException(P.RangeError$range(end, start, i, null, null));
          list.push(it.get$current());
        }
      return H.Primitives_stringFromCharCodes(list);
    },
    Error_safeToString: function(object) {
      if (typeof object === "number" || typeof object === "boolean" || null == object)
        return J.toString$0$(object);
      if (typeof object === "string")
        return JSON.stringify(object);
      return P.Error__objectToString(object);
    },
    Error__objectToString: function(object) {
      var t1 = J.getInterceptor(object);
      if (!!t1.$isClosure)
        return t1.toString$0(object);
      return H.Primitives_objectToHumanReadableString(object);
    },
    Exception_Exception: function(message) {
      return new P._Exception(message);
    },
    List_List$from: function(elements, growable, $E) {
      var list, t1;
      list = H.setRuntimeTypeInfo([], [$E]);
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        list.push(t1.get$current());
      if (growable)
        return list;
      list.fixed$length = Array;
      return list;
    },
    List_List$generate: function($length, generator, growable, $E) {
      var result, i, t1;
      result = H.setRuntimeTypeInfo([], [$E]);
      C.JSArray_methods.set$length(result, $length);
      for (i = 0; i < $length; ++i) {
        t1 = generator.call$1(i);
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t1;
      }
      return result;
    },
    print: function(object) {
      var line = H.S(object);
      H.printString(line);
    },
    RegExp_RegExp: function(source, caseSensitive, multiLine) {
      return new H.JSSyntaxRegExp(source, H.JSSyntaxRegExp_makeNative(source, false, true, false), null, null);
    },
    String_String$fromCharCodes: function(charCodes, start, end) {
      var len;
      if (charCodes.constructor === Array) {
        len = charCodes.length;
        end = P.RangeError_checkValidRange(start, end, len, null, null, null);
        return H.Primitives_stringFromCharCodes(start > 0 || J.$lt$n(end, len) ? C.JSArray_methods.sublist$2(charCodes, start, end) : charCodes);
      }
      return P.String__stringFromIterable(charCodes, start, end);
    },
    Uri_base: function() {
      var uri = H.Primitives_currentUri();
      if (uri != null)
        return P.Uri_parse(uri, 0, null);
      throw H.wrapException(new P.UnsupportedError("'Uri.base' is not supported"));
    },
    Uri_parse: function(uri, start, end) {
      var t1, t2, t3, delta, indices, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, t4, t5, isSimple, scheme, t6, t7, t8, schemeAuth, t9;
      end = J.get$length$asx(uri);
      t1 = start + 5;
      t2 = J.getInterceptor$n(end);
      if (t2.$ge(end, t1)) {
        t3 = J.getInterceptor$s(uri);
        delta = ((t3.codeUnitAt$1(uri, start + 4) ^ 58) * 3 | t3.codeUnitAt$1(uri, start) ^ 100 | t3.codeUnitAt$1(uri, start + 1) ^ 97 | t3.codeUnitAt$1(uri, start + 2) ^ 116 | t3.codeUnitAt$1(uri, start + 3) ^ 97) >>> 0;
        if (delta === 0)
          return P.UriData__parse(start > 0 || t2.$lt(end, t3.get$length(uri)) ? t3.substring$2(uri, start, end) : uri, 5, null).get$uri();
        else if (delta === 32)
          return P.UriData__parse(t3.substring$2(uri, t1, end), 0, null).get$uri();
      }
      t3 = new Array(8);
      t3.fixed$length = Array;
      indices = H.setRuntimeTypeInfo(t3, [P.$int]);
      indices[0] = 0;
      t3 = start - 1;
      indices[1] = t3;
      indices[2] = t3;
      indices[7] = t3;
      indices[3] = start;
      indices[4] = start;
      indices[5] = end;
      indices[6] = end;
      if (P._scan(uri, start, end, 0, indices) >= 14)
        indices[7] = end;
      schemeEnd = indices[1];
      t3 = J.getInterceptor$n(schemeEnd);
      if (t3.$ge(schemeEnd, start))
        if (P._scan(uri, start, schemeEnd, 20, indices) === 20)
          indices[7] = schemeEnd;
      hostStart = J.$add$ns(indices[2], 1);
      portStart = indices[3];
      pathStart = indices[4];
      queryStart = indices[5];
      fragmentStart = indices[6];
      t4 = J.getInterceptor$n(fragmentStart);
      if (t4.$lt(fragmentStart, queryStart))
        queryStart = fragmentStart;
      t5 = J.getInterceptor$n(pathStart);
      if (t5.$lt(pathStart, hostStart) || t5.$le(pathStart, schemeEnd))
        pathStart = queryStart;
      if (J.$lt$n(portStart, hostStart))
        portStart = pathStart;
      isSimple = J.$lt$n(indices[7], start);
      if (isSimple) {
        t5 = J.getInterceptor$n(hostStart);
        if (t5.$gt(hostStart, t3.$add(schemeEnd, 3))) {
          scheme = null;
          isSimple = false;
        } else {
          t6 = J.getInterceptor$n(portStart);
          if (t6.$gt(portStart, start) && J.$eq$(t6.$add(portStart, 1), pathStart)) {
            scheme = null;
            isSimple = false;
          } else {
            t7 = J.getInterceptor$n(queryStart);
            if (!(t7.$lt(queryStart, end) && t7.$eq(queryStart, J.$add$ns(pathStart, 2)) && J.startsWith$2$s(uri, "..", pathStart)))
              t8 = t7.$gt(queryStart, J.$add$ns(pathStart, 2)) && J.startsWith$2$s(uri, "/..", t7.$sub(queryStart, 3));
            else
              t8 = true;
            if (t8) {
              scheme = null;
              isSimple = false;
            } else {
              if (t3.$eq(schemeEnd, start + 4)) {
                t1 = J.getInterceptor$s(uri);
                if (t1.startsWith$2(uri, "file", start)) {
                  if (t5.$le(hostStart, start)) {
                    if (!t1.startsWith$2(uri, "/", pathStart)) {
                      schemeAuth = "file:///";
                      delta = 3;
                    } else {
                      schemeAuth = "file://";
                      delta = 2;
                    }
                    uri = schemeAuth + t1.substring$2(uri, pathStart, end);
                    schemeEnd = t3.$sub(schemeEnd, start);
                    t1 = delta - start;
                    queryStart = t7.$add(queryStart, t1);
                    fragmentStart = t4.$add(fragmentStart, t1);
                    end = uri.length;
                    start = 0;
                    hostStart = 7;
                    portStart = 7;
                    pathStart = 7;
                  } else {
                    t8 = J.getInterceptor(pathStart);
                    if (t8.$eq(pathStart, queryStart))
                      if (start === 0 && t2.$eq(end, t1.get$length(uri))) {
                        uri = t1.replaceRange$3(uri, pathStart, queryStart, "/");
                        queryStart = t7.$add(queryStart, 1);
                        fragmentStart = t4.$add(fragmentStart, 1);
                        end = t2.$add(end, 1);
                      } else {
                        uri = t1.substring$2(uri, start, pathStart) + "/" + t1.substring$2(uri, queryStart, end);
                        schemeEnd = t3.$sub(schemeEnd, start);
                        hostStart = t5.$sub(hostStart, start);
                        portStart = t6.$sub(portStart, start);
                        pathStart = t8.$sub(pathStart, start);
                        t1 = 1 - start;
                        queryStart = t7.$add(queryStart, t1);
                        fragmentStart = t4.$add(fragmentStart, t1);
                        end = uri.length;
                        start = 0;
                      }
                  }
                  scheme = "file";
                } else if (t1.startsWith$2(uri, "http", start)) {
                  if (t6.$gt(portStart, start) && J.$eq$(t6.$add(portStart, 3), pathStart) && t1.startsWith$2(uri, "80", t6.$add(portStart, 1))) {
                    t8 = start === 0 && t2.$eq(end, t1.get$length(uri));
                    t9 = J.getInterceptor$n(pathStart);
                    if (t8) {
                      uri = t1.replaceRange$3(uri, portStart, pathStart, "");
                      pathStart = t9.$sub(pathStart, 3);
                      queryStart = t7.$sub(queryStart, 3);
                      fragmentStart = t4.$sub(fragmentStart, 3);
                      end = t2.$sub(end, 3);
                    } else {
                      uri = t1.substring$2(uri, start, portStart) + t1.substring$2(uri, pathStart, end);
                      schemeEnd = t3.$sub(schemeEnd, start);
                      hostStart = t5.$sub(hostStart, start);
                      portStart = t6.$sub(portStart, start);
                      t1 = 3 + start;
                      pathStart = t9.$sub(pathStart, t1);
                      queryStart = t7.$sub(queryStart, t1);
                      fragmentStart = t4.$sub(fragmentStart, t1);
                      end = uri.length;
                      start = 0;
                    }
                  }
                  scheme = "http";
                } else
                  scheme = null;
              } else if (t3.$eq(schemeEnd, t1) && J.startsWith$2$s(uri, "https", start)) {
                if (t6.$gt(portStart, start) && J.$eq$(t6.$add(portStart, 4), pathStart) && J.startsWith$2$s(uri, "443", t6.$add(portStart, 1))) {
                  t1 = start === 0 && t2.$eq(end, J.get$length$asx(uri));
                  t8 = J.getInterceptor$asx(uri);
                  t9 = J.getInterceptor$n(pathStart);
                  if (t1) {
                    uri = t8.replaceRange$3(uri, portStart, pathStart, "");
                    pathStart = t9.$sub(pathStart, 4);
                    queryStart = t7.$sub(queryStart, 4);
                    fragmentStart = t4.$sub(fragmentStart, 4);
                    end = t2.$sub(end, 3);
                  } else {
                    uri = t8.substring$2(uri, start, portStart) + t8.substring$2(uri, pathStart, end);
                    schemeEnd = t3.$sub(schemeEnd, start);
                    hostStart = t5.$sub(hostStart, start);
                    portStart = t6.$sub(portStart, start);
                    t1 = 4 + start;
                    pathStart = t9.$sub(pathStart, t1);
                    queryStart = t7.$sub(queryStart, t1);
                    fragmentStart = t4.$sub(fragmentStart, t1);
                    end = uri.length;
                    start = 0;
                  }
                }
                scheme = "https";
              } else
                scheme = null;
              isSimple = true;
            }
          }
        }
      } else
        scheme = null;
      if (isSimple) {
        if (start > 0 || J.$lt$n(end, J.get$length$asx(uri))) {
          uri = J.substring$2$s(uri, start, end);
          schemeEnd = J.$sub$n(schemeEnd, start);
          hostStart = J.$sub$n(hostStart, start);
          portStart = J.$sub$n(portStart, start);
          pathStart = J.$sub$n(pathStart, start);
          queryStart = J.$sub$n(queryStart, start);
          fragmentStart = J.$sub$n(fragmentStart, start);
        }
        return new P._SimpleUri(uri, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme, null);
      }
      return P._Uri__Uri$notSimple(uri, start, end, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme);
    },
    Uri__parseIPv4Address: function(host, start, end) {
      var t1, t2, result, t3, i, partStart, partIndex, t4, $char, part, partIndex0;
      t1 = new P.Uri__parseIPv4Address_error(host);
      t2 = H._checkLength(4);
      result = new Uint8Array(t2);
      for (t3 = J.getInterceptor$s(host), i = start, partStart = i, partIndex = 0; t4 = J.getInterceptor$n(i), t4.$lt(i, end); i = t4.$add(i, 1)) {
        $char = t3.codeUnitAt$1(host, i);
        if ($char !== 46) {
          if (($char ^ 48) > 9)
            t1.call$2("invalid character", i);
        } else {
          if (partIndex === 3)
            t1.call$2("IPv4 address should contain exactly 4 parts", i);
          part = H.Primitives_parseInt(t3.substring$2(host, partStart, i), null, null);
          if (J.$gt$n(part, 255))
            t1.call$2("each part must be in the range 0..255", partStart);
          partIndex0 = partIndex + 1;
          if (partIndex >= t2)
            return H.ioore(result, partIndex);
          result[partIndex] = part;
          partStart = t4.$add(i, 1);
          partIndex = partIndex0;
        }
      }
      if (partIndex !== 3)
        t1.call$2("IPv4 address should contain exactly 4 parts", end);
      part = H.Primitives_parseInt(t3.substring$2(host, partStart, end), null, null);
      if (J.$gt$n(part, 255))
        t1.call$2("each part must be in the range 0..255", partStart);
      if (partIndex >= t2)
        return H.ioore(result, partIndex);
      result[partIndex] = part;
      return result;
    },
    Uri_parseIPv6Address: function(host, start, end) {
      var t1, t2, t3, parts, i, partStart, wildcardSeen, seenDot, t4, $char, atEnd, isLastWildcard, last, bytes, index, value, wildCardLength, j;
      if (end == null)
        end = J.get$length$asx(host);
      t1 = new P.Uri_parseIPv6Address_error(host);
      t2 = new P.Uri_parseIPv6Address_parseHex(host, t1);
      t3 = J.getInterceptor$asx(host);
      if (J.$lt$n(t3.get$length(host), 2))
        t1.call$1("address is too short");
      parts = [];
      for (i = start, partStart = i, wildcardSeen = false, seenDot = false; t4 = J.getInterceptor$n(i), t4.$lt(i, end); i = J.$add$ns(i, 1)) {
        $char = t3.codeUnitAt$1(host, i);
        if ($char === 58) {
          if (t4.$eq(i, start)) {
            i = t4.$add(i, 1);
            if (t3.codeUnitAt$1(host, i) !== 58)
              t1.call$2("invalid start colon.", i);
            partStart = i;
          }
          t4 = J.getInterceptor(i);
          if (t4.$eq(i, partStart)) {
            if (wildcardSeen)
              t1.call$2("only one wildcard `::` is allowed", i);
            parts.push(-1);
            wildcardSeen = true;
          } else
            parts.push(t2.call$2(partStart, i));
          partStart = t4.$add(i, 1);
        } else if ($char === 46)
          seenDot = true;
      }
      if (parts.length === 0)
        t1.call$1("too few parts");
      atEnd = J.$eq$(partStart, end);
      isLastWildcard = J.$eq$(C.JSArray_methods.get$last(parts), -1);
      if (atEnd && !isLastWildcard)
        t1.call$2("expected a part after last `:`", end);
      if (!atEnd)
        if (!seenDot)
          parts.push(t2.call$2(partStart, end));
        else {
          last = P.Uri__parseIPv4Address(host, partStart, end);
          t2 = J.$shl$n(last[0], 8);
          t3 = last[1];
          if (typeof t3 !== "number")
            return H.iae(t3);
          parts.push((t2 | t3) >>> 0);
          t3 = J.$shl$n(last[2], 8);
          t2 = last[3];
          if (typeof t2 !== "number")
            return H.iae(t2);
          parts.push((t3 | t2) >>> 0);
        }
      if (wildcardSeen) {
        if (parts.length > 7)
          t1.call$1("an address with a wildcard must have less than 7 parts");
      } else if (parts.length !== 8)
        t1.call$1("an address without a wildcard must contain exactly 8 parts");
      bytes = new Uint8Array(16);
      for (i = 0, index = 0; i < parts.length; ++i) {
        value = parts[i];
        t1 = J.getInterceptor(value);
        if (t1.$eq(value, -1)) {
          wildCardLength = 9 - parts.length;
          for (j = 0; j < wildCardLength; ++j) {
            if (index < 0 || index >= 16)
              return H.ioore(bytes, index);
            bytes[index] = 0;
            t1 = index + 1;
            if (t1 >= 16)
              return H.ioore(bytes, t1);
            bytes[t1] = 0;
            index += 2;
          }
        } else {
          t2 = t1.$shr(value, 8);
          if (index < 0 || index >= 16)
            return H.ioore(bytes, index);
          bytes[index] = t2;
          t2 = index + 1;
          t1 = t1.$and(value, 255);
          if (t2 >= 16)
            return H.ioore(bytes, t2);
          bytes[t2] = t1;
          index += 2;
        }
      }
      return bytes;
    },
    _createTables: function() {
      var tables, t1, t2, t3, b;
      tables = P.List_List$generate(22, new P._createTables_closure(), true, P.Uint8List);
      t1 = new P._createTables_build(tables);
      t2 = new P._createTables_setChars();
      t3 = new P._createTables_setRange();
      b = t1.call$2(0, 225);
      t2.call$3(b, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=", 1);
      t2.call$3(b, ".", 14);
      t2.call$3(b, ":", 34);
      t2.call$3(b, "/", 3);
      t2.call$3(b, "?", 172);
      t2.call$3(b, "#", 205);
      b = t1.call$2(14, 225);
      t2.call$3(b, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=", 1);
      t2.call$3(b, ".", 15);
      t2.call$3(b, ":", 34);
      t2.call$3(b, "/", 234);
      t2.call$3(b, "?", 172);
      t2.call$3(b, "#", 205);
      b = t1.call$2(15, 225);
      t2.call$3(b, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=", 1);
      t2.call$3(b, "%", 225);
      t2.call$3(b, ":", 34);
      t2.call$3(b, "/", 9);
      t2.call$3(b, "?", 172);
      t2.call$3(b, "#", 205);
      b = t1.call$2(1, 225);
      t2.call$3(b, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=", 1);
      t2.call$3(b, ":", 34);
      t2.call$3(b, "/", 10);
      t2.call$3(b, "?", 172);
      t2.call$3(b, "#", 205);
      b = t1.call$2(2, 235);
      t2.call$3(b, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=", 139);
      t2.call$3(b, "/", 131);
      t2.call$3(b, ".", 146);
      t2.call$3(b, "?", 172);
      t2.call$3(b, "#", 205);
      b = t1.call$2(3, 235);
      t2.call$3(b, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=", 11);
      t2.call$3(b, "/", 68);
      t2.call$3(b, ".", 18);
      t2.call$3(b, "?", 172);
      t2.call$3(b, "#", 205);
      b = t1.call$2(4, 229);
      t2.call$3(b, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=", 5);
      t3.call$3(b, "AZ", 229);
      t2.call$3(b, ":", 102);
      t2.call$3(b, "@", 68);
      t2.call$3(b, "[", 232);
      t2.call$3(b, "/", 138);
      t2.call$3(b, "?", 172);
      t2.call$3(b, "#", 205);
      b = t1.call$2(5, 229);
      t2.call$3(b, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=", 5);
      t3.call$3(b, "AZ", 229);
      t2.call$3(b, ":", 102);
      t2.call$3(b, "@", 68);
      t2.call$3(b, "/", 138);
      t2.call$3(b, "?", 172);
      t2.call$3(b, "#", 205);
      b = t1.call$2(6, 231);
      t3.call$3(b, "19", 7);
      t2.call$3(b, "@", 68);
      t2.call$3(b, "/", 138);
      t2.call$3(b, "?", 172);
      t2.call$3(b, "#", 205);
      b = t1.call$2(7, 231);
      t3.call$3(b, "09", 7);
      t2.call$3(b, "@", 68);
      t2.call$3(b, "/", 138);
      t2.call$3(b, "?", 172);
      t2.call$3(b, "#", 205);
      t2.call$3(t1.call$2(8, 8), "]", 5);
      b = t1.call$2(9, 235);
      t2.call$3(b, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=", 11);
      t2.call$3(b, ".", 16);
      t2.call$3(b, "/", 234);
      t2.call$3(b, "?", 172);
      t2.call$3(b, "#", 205);
      b = t1.call$2(16, 235);
      t2.call$3(b, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=", 11);
      t2.call$3(b, ".", 17);
      t2.call$3(b, "/", 234);
      t2.call$3(b, "?", 172);
      t2.call$3(b, "#", 205);
      b = t1.call$2(17, 235);
      t2.call$3(b, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=", 11);
      t2.call$3(b, "/", 9);
      t2.call$3(b, "?", 172);
      t2.call$3(b, "#", 205);
      b = t1.call$2(10, 235);
      t2.call$3(b, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=", 11);
      t2.call$3(b, ".", 18);
      t2.call$3(b, "/", 234);
      t2.call$3(b, "?", 172);
      t2.call$3(b, "#", 205);
      b = t1.call$2(18, 235);
      t2.call$3(b, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=", 11);
      t2.call$3(b, ".", 19);
      t2.call$3(b, "/", 234);
      t2.call$3(b, "?", 172);
      t2.call$3(b, "#", 205);
      b = t1.call$2(19, 235);
      t2.call$3(b, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=", 11);
      t2.call$3(b, "/", 234);
      t2.call$3(b, "?", 172);
      t2.call$3(b, "#", 205);
      b = t1.call$2(11, 235);
      t2.call$3(b, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=", 11);
      t2.call$3(b, "/", 10);
      t2.call$3(b, "?", 172);
      t2.call$3(b, "#", 205);
      b = t1.call$2(12, 236);
      t2.call$3(b, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=", 12);
      t2.call$3(b, "?", 12);
      t2.call$3(b, "#", 205);
      b = t1.call$2(13, 237);
      t2.call$3(b, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=", 13);
      t2.call$3(b, "?", 13);
      t3.call$3(t1.call$2(20, 245), "az", 21);
      b = t1.call$2(21, 245);
      t3.call$3(b, "az", 21);
      t3.call$3(b, "09", 21);
      t2.call$3(b, "+-.", 21);
      return tables;
    },
    _scan: function(uri, start, end, state, indices) {
      var tables, t1, i, table, $char, transition, t2;
      tables = $.$get$_scannerTables();
      if (typeof end !== "number")
        return H.iae(end);
      t1 = J.getInterceptor$s(uri);
      i = start;
      for (; i < end; ++i) {
        if (state < 0 || state >= tables.length)
          return H.ioore(tables, state);
        table = tables[state];
        $char = t1.codeUnitAt$1(uri, i) ^ 96;
        transition = J.$index$asx(table, $char > 95 ? 31 : $char);
        t2 = J.getInterceptor$n(transition);
        state = t2.$and(transition, 31);
        t2 = t2.$shr(transition, 5);
        if (t2 >= 8)
          return H.ioore(indices, t2);
        indices[t2] = i;
      }
      return state;
    },
    NoSuchMethodError_toString_closure: {
      "^": "Closure:27;_box_0,sb",
      call$2: function(key, value) {
        var t1, t2, t3;
        t1 = this.sb;
        t2 = this._box_0;
        t1._contents += t2.comma;
        t3 = t1._contents += H.S(key.get$__internal$_name());
        t1._contents = t3 + ": ";
        t1._contents += H.S(P.Error_safeToString(value));
        t2.comma = ", ";
      }
    },
    Deprecated: {
      "^": "Object;expires",
      toString$0: function(_) {
        return "Deprecated feature. Will be removed " + H.S(this.expires);
      }
    },
    _Override: {
      "^": "Object;"
    },
    bool: {
      "^": "Object;",
      toString$0: function(_) {
        return this ? "true" : "false";
      }
    },
    "+bool": 0,
    DateTime: {
      "^": "Object;_value,isUtc",
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (!(other instanceof P.DateTime))
          return false;
        return this._value === other._value && this.isUtc === other.isUtc;
      },
      get$hashCode: function(_) {
        var t1 = this._value;
        return (t1 ^ C.JSNumber_methods._shrOtherPositive$1(t1, 30)) & 1073741823;
      },
      toUtc$0: function() {
        if (this.isUtc)
          return this;
        return P.DateTime$_withValue(this._value, true);
      },
      toString$0: function(_) {
        var y, m, d, h, min, sec, ms;
        y = P.DateTime__fourDigits(H.Primitives_getYear(this));
        m = P.DateTime__twoDigits(H.Primitives_getMonth(this));
        d = P.DateTime__twoDigits(H.Primitives_getDay(this));
        h = P.DateTime__twoDigits(H.Primitives_getHours(this));
        min = P.DateTime__twoDigits(H.Primitives_getMinutes(this));
        sec = P.DateTime__twoDigits(H.Primitives_getSeconds(this));
        ms = P.DateTime__threeDigits(H.Primitives_getMilliseconds(this));
        if (this.isUtc)
          return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + "Z";
        else
          return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms;
      },
      toIso8601String$0: function() {
        var y, m, d, h, min, sec, ms;
        y = H.Primitives_getYear(this) >= -9999 && H.Primitives_getYear(this) <= 9999 ? P.DateTime__fourDigits(H.Primitives_getYear(this)) : P.DateTime__sixDigits(H.Primitives_getYear(this));
        m = P.DateTime__twoDigits(H.Primitives_getMonth(this));
        d = P.DateTime__twoDigits(H.Primitives_getDay(this));
        h = P.DateTime__twoDigits(H.Primitives_getHours(this));
        min = P.DateTime__twoDigits(H.Primitives_getMinutes(this));
        sec = P.DateTime__twoDigits(H.Primitives_getSeconds(this));
        ms = P.DateTime__threeDigits(H.Primitives_getMilliseconds(this));
        if (this.isUtc)
          return y + "-" + m + "-" + d + "T" + h + ":" + min + ":" + sec + "." + ms + "Z";
        else
          return y + "-" + m + "-" + d + "T" + h + ":" + min + ":" + sec + "." + ms;
      },
      add$1: function(_, duration) {
        return P.DateTime$_withValue(this._value + duration.get$inMilliseconds(), this.isUtc);
      },
      get$millisecondsSinceEpoch: function() {
        return this._value;
      },
      get$timeZoneOffset: function() {
        if (this.isUtc)
          return P.Duration$(0, 0, 0, 0, 0, 0);
        return P.Duration$(0, 0, 0, 0, -H.Primitives_lazyAsJsDate(this).getTimezoneOffset(), 0);
      },
      get$year: function() {
        return H.Primitives_getYear(this);
      },
      DateTime$_withValue$2$isUtc: function(_value, isUtc) {
        var t1 = this._value;
        if (!(Math.abs(t1) > 864e13)) {
          Math.abs(t1) === 864e13;
          t1 = false;
        } else
          t1 = true;
        if (t1)
          throw H.wrapException(P.ArgumentError$(this.get$millisecondsSinceEpoch()));
      },
      static: {
        DateTime$: function(year, month, day, hour, minute, second, millisecond, microsecond) {
          return new P.DateTime(H.checkInt(H.Primitives_valueFromDecomposedDate(year, month, day, hour, minute, second, millisecond + C.JSDouble_methods.round$0(microsecond / 1000), false)), false);
        },
        DateTime_parse: function(formattedString) {
          var match, t1, t2, years, month, day, hour, minute, second, milliAndMicroseconds, t3, millisecond, microsecond, sign, hourDifference, minuteDifference, isUtc, value;
          match = new H.JSSyntaxRegExp("^([+-]?\\d{4,6})-?(\\d\\d)-?(\\d\\d)(?:[ T](\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:\\.(\\d{1,6}))?)?)?( ?[zZ]| ?([-+])(\\d\\d)(?::?(\\d\\d))?)?)?$", H.JSSyntaxRegExp_makeNative("^([+-]?\\d{4,6})-?(\\d\\d)-?(\\d\\d)(?:[ T](\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:\\.(\\d{1,6}))?)?)?( ?[zZ]| ?([-+])(\\d\\d)(?::?(\\d\\d))?)?)?$", false, true, false), null, null).firstMatch$1(formattedString);
          if (match != null) {
            t1 = new P.DateTime_parse_parseIntOrZero();
            t2 = match._match;
            if (1 >= t2.length)
              return H.ioore(t2, 1);
            years = H.Primitives_parseInt(t2[1], null, null);
            if (2 >= t2.length)
              return H.ioore(t2, 2);
            month = H.Primitives_parseInt(t2[2], null, null);
            if (3 >= t2.length)
              return H.ioore(t2, 3);
            day = H.Primitives_parseInt(t2[3], null, null);
            if (4 >= t2.length)
              return H.ioore(t2, 4);
            hour = t1.call$1(t2[4]);
            if (5 >= t2.length)
              return H.ioore(t2, 5);
            minute = t1.call$1(t2[5]);
            if (6 >= t2.length)
              return H.ioore(t2, 6);
            second = t1.call$1(t2[6]);
            if (7 >= t2.length)
              return H.ioore(t2, 7);
            milliAndMicroseconds = new P.DateTime_parse_parseMilliAndMicroseconds().call$1(t2[7]);
            t3 = J.getInterceptor$n(milliAndMicroseconds);
            millisecond = t3.$tdiv(milliAndMicroseconds, 1000);
            microsecond = t3.remainder$1(milliAndMicroseconds, 1000);
            t3 = t2.length;
            if (8 >= t3)
              return H.ioore(t2, 8);
            if (t2[8] != null) {
              if (9 >= t3)
                return H.ioore(t2, 9);
              t3 = t2[9];
              if (t3 != null) {
                sign = J.$eq$(t3, "-") ? -1 : 1;
                if (10 >= t2.length)
                  return H.ioore(t2, 10);
                hourDifference = H.Primitives_parseInt(t2[10], null, null);
                if (11 >= t2.length)
                  return H.ioore(t2, 11);
                minuteDifference = t1.call$1(t2[11]);
                if (typeof hourDifference !== "number")
                  return H.iae(hourDifference);
                minuteDifference = J.$add$ns(minuteDifference, 60 * hourDifference);
                if (typeof minuteDifference !== "number")
                  return H.iae(minuteDifference);
                minute = J.$sub$n(minute, sign * minuteDifference);
              }
              isUtc = true;
            } else
              isUtc = false;
            value = H.Primitives_valueFromDecomposedDate(years, month, day, hour, minute, second, millisecond + C.JSDouble_methods.round$0(microsecond / 1000), isUtc);
            if (value == null)
              throw H.wrapException(new P.FormatException("Time out of range", formattedString, null));
            return P.DateTime$_withValue(value, isUtc);
          } else
            throw H.wrapException(new P.FormatException("Invalid date format", formattedString, null));
        },
        DateTime$_withValue: function(_value, isUtc) {
          var t1 = new P.DateTime(_value, isUtc);
          t1.DateTime$_withValue$2$isUtc(_value, isUtc);
          return t1;
        },
        DateTime__fourDigits: function(n) {
          var absN, sign;
          absN = Math.abs(n);
          sign = n < 0 ? "-" : "";
          if (absN >= 1000)
            return "" + n;
          if (absN >= 100)
            return sign + "0" + H.S(absN);
          if (absN >= 10)
            return sign + "00" + H.S(absN);
          return sign + "000" + H.S(absN);
        },
        DateTime__sixDigits: function(n) {
          var absN, sign;
          absN = Math.abs(n);
          sign = n < 0 ? "-" : "+";
          if (absN >= 100000)
            return sign + H.S(absN);
          return sign + "0" + H.S(absN);
        },
        DateTime__threeDigits: function(n) {
          if (n >= 100)
            return "" + n;
          if (n >= 10)
            return "0" + n;
          return "00" + n;
        },
        DateTime__twoDigits: function(n) {
          if (n >= 10)
            return "" + n;
          return "0" + n;
        }
      }
    },
    DateTime_parse_parseIntOrZero: {
      "^": "Closure:40;",
      call$1: function(matched) {
        if (matched == null)
          return 0;
        return H.Primitives_parseInt(matched, null, null);
      }
    },
    DateTime_parse_parseMilliAndMicroseconds: {
      "^": "Closure:40;",
      call$1: function(matched) {
        var t1, result, i, t2;
        if (matched == null)
          return 0;
        t1 = J.getInterceptor$asx(matched);
        t1.get$length(matched);
        for (result = 0, i = 0; i < 6; ++i) {
          result *= 10;
          t2 = t1.get$length(matched);
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (i < t2)
            result += t1.codeUnitAt$1(matched, i) ^ 48;
        }
        return result;
      }
    },
    $double: {
      "^": "num;"
    },
    "+double": 0,
    Duration: {
      "^": "Object;_duration<",
      $add: function(_, other) {
        return new P.Duration(this._duration + other.get$_duration());
      },
      $sub: function(_, other) {
        return new P.Duration(this._duration - other.get$_duration());
      },
      $mul: function(_, factor) {
        return new P.Duration(C.JSNumber_methods.round$0(this._duration * factor));
      },
      $tdiv: function(_, quotient) {
        if (quotient === 0)
          throw H.wrapException(new P.IntegerDivisionByZeroException());
        return new P.Duration(C.JSNumber_methods.$tdiv(this._duration, quotient));
      },
      $lt: function(_, other) {
        return this._duration < other.get$_duration();
      },
      $gt: function(_, other) {
        return this._duration > other.get$_duration();
      },
      $le: function(_, other) {
        return this._duration <= other.get$_duration();
      },
      $ge: function(_, other) {
        return this._duration >= other.get$_duration();
      },
      get$inMilliseconds: function() {
        return C.JSNumber_methods._tdivFast$1(this._duration, 1000);
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (!(other instanceof P.Duration))
          return false;
        return this._duration === other._duration;
      },
      get$hashCode: function(_) {
        return this._duration & 0x1FFFFFFF;
      },
      toString$0: function(_) {
        var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
        t1 = new P.Duration_toString_twoDigits();
        t2 = this._duration;
        if (t2 < 0)
          return "-" + new P.Duration(-t2).toString$0(0);
        twoDigitMinutes = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods._tdivFast$1(t2, 60000000), 60));
        twoDigitSeconds = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods._tdivFast$1(t2, 1000000), 60));
        sixDigitUs = new P.Duration_toString_sixDigits().call$1(C.JSNumber_methods.remainder$1(t2, 1000000));
        return H.S(C.JSNumber_methods._tdivFast$1(t2, 3600000000)) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
      },
      $negate: function(_) {
        return new P.Duration(-this._duration);
      },
      static: {
        Duration$: function(days, hours, microseconds, milliseconds, minutes, seconds) {
          if (typeof days !== "number")
            return H.iae(days);
          return new P.Duration(864e8 * days + 3600000000 * hours + 60000000 * minutes + 1000000 * seconds + 1000 * milliseconds + microseconds);
        }
      }
    },
    Duration_toString_sixDigits: {
      "^": "Closure:13;",
      call$1: function(n) {
        if (n >= 100000)
          return H.S(n);
        if (n >= 10000)
          return "0" + H.S(n);
        if (n >= 1000)
          return "00" + H.S(n);
        if (n >= 100)
          return "000" + H.S(n);
        if (n >= 10)
          return "0000" + H.S(n);
        return "00000" + H.S(n);
      }
    },
    Duration_toString_twoDigits: {
      "^": "Closure:13;",
      call$1: function(n) {
        if (n >= 10)
          return "" + n;
        return "0" + n;
      }
    },
    Error: {
      "^": "Object;",
      get$stackTrace: function() {
        return H.getTraceFromException(this.$thrownJsError);
      }
    },
    NullThrownError: {
      "^": "Error;",
      toString$0: function(_) {
        return "Throw of null.";
      }
    },
    ArgumentError: {
      "^": "Error;_hasValue,invalidValue,name>,message",
      get$_errorName: function() {
        return "Invalid argument" + (!this._hasValue ? "(s)" : "");
      },
      get$_errorExplanation: function() {
        return "";
      },
      toString$0: function(_) {
        var t1, nameString, message, prefix, explanation, errorValue;
        t1 = this.name;
        nameString = t1 != null ? " (" + H.S(t1) + ")" : "";
        t1 = this.message;
        message = t1 == null ? "" : ": " + H.S(t1);
        prefix = this.get$_errorName() + nameString + message;
        if (!this._hasValue)
          return prefix;
        explanation = this.get$_errorExplanation();
        errorValue = P.Error_safeToString(this.invalidValue);
        return prefix + explanation + ": " + H.S(errorValue);
      },
      static: {
        ArgumentError$: function(message) {
          return new P.ArgumentError(false, null, null, message);
        },
        ArgumentError$value: function(value, $name, message) {
          return new P.ArgumentError(true, value, $name, message);
        },
        ArgumentError$notNull: function($name) {
          return new P.ArgumentError(false, null, $name, "Must not be null");
        }
      }
    },
    RangeError: {
      "^": "ArgumentError;start,end,_hasValue,invalidValue,name,message",
      get$_errorName: function() {
        return "RangeError";
      },
      get$_errorExplanation: function() {
        var t1, explanation, t2, t3;
        t1 = this.start;
        if (t1 == null) {
          t1 = this.end;
          explanation = t1 != null ? ": Not less than or equal to " + H.S(t1) : "";
        } else {
          t2 = this.end;
          if (t2 == null)
            explanation = ": Not greater than or equal to " + H.S(t1);
          else {
            t3 = J.getInterceptor$n(t2);
            if (t3.$gt(t2, t1))
              explanation = ": Not in range " + H.S(t1) + ".." + H.S(t2) + ", inclusive";
            else
              explanation = t3.$lt(t2, t1) ? ": Valid value range is empty" : ": Only valid value is " + H.S(t1);
          }
        }
        return explanation;
      },
      static: {
        RangeError$value: function(value, $name, message) {
          return new P.RangeError(null, null, true, value, $name, "Value not in range");
        },
        RangeError$range: function(invalidValue, minValue, maxValue, $name, message) {
          return new P.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
        },
        RangeError_checkValidRange: function(start, end, $length, startName, endName, message) {
          var t1;
          if (typeof start !== "number")
            return H.iae(start);
          if (!(0 > start)) {
            if (typeof $length !== "number")
              return H.iae($length);
            t1 = start > $length;
          } else
            t1 = true;
          if (t1)
            throw H.wrapException(P.RangeError$range(start, 0, $length, "start", message));
          if (end != null) {
            if (typeof end !== "number")
              return H.iae(end);
            if (!(start > end)) {
              if (typeof $length !== "number")
                return H.iae($length);
              t1 = end > $length;
            } else
              t1 = true;
            if (t1)
              throw H.wrapException(P.RangeError$range(end, start, $length, "end", message));
            return end;
          }
          return $length;
        }
      }
    },
    IndexError: {
      "^": "ArgumentError;indexable,length>,_hasValue,invalidValue,name,message",
      get$_errorName: function() {
        return "RangeError";
      },
      get$_errorExplanation: function() {
        if (J.$lt$n(this.invalidValue, 0))
          return ": index must not be negative";
        var t1 = this.length;
        if (J.$eq$(t1, 0))
          return ": no indices are valid";
        return ": index should be less than " + H.S(t1);
      },
      static: {
        IndexError$: function(invalidValue, indexable, $name, message, $length) {
          var t1 = $length != null ? $length : J.get$length$asx(indexable);
          return new P.IndexError(indexable, t1, true, invalidValue, $name, "Index out of range");
        }
      }
    },
    NoSuchMethodError: {
      "^": "Error;_core$_receiver,_memberName,_core$_arguments,_namedArguments,_existingArgumentNames",
      toString$0: function(_) {
        var t1, sb, t2, t3, _i, argument, memberName, receiverText, actualParameters;
        t1 = {};
        sb = new P.StringBuffer("");
        t1.comma = "";
        for (t2 = this._core$_arguments, t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
          argument = t2[_i];
          sb._contents += t1.comma;
          sb._contents += H.S(P.Error_safeToString(argument));
          t1.comma = ", ";
        }
        t2 = this._namedArguments;
        if (t2 != null)
          t2.forEach$1(0, new P.NoSuchMethodError_toString_closure(t1, sb));
        memberName = this._memberName.__internal$_name;
        receiverText = P.Error_safeToString(this._core$_receiver);
        actualParameters = H.S(sb);
        return "NoSuchMethodError: method not found: '" + H.S(memberName) + "'\nReceiver: " + H.S(receiverText) + "\nArguments: [" + actualParameters + "]";
      },
      static: {
        NoSuchMethodError$: function(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames) {
          return new P.NoSuchMethodError(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames);
        }
      }
    },
    UnsupportedError: {
      "^": "Error;message",
      toString$0: function(_) {
        return "Unsupported operation: " + this.message;
      }
    },
    UnimplementedError: {
      "^": "Error;message",
      toString$0: function(_) {
        var t1 = this.message;
        return t1 != null ? "UnimplementedError: " + H.S(t1) : "UnimplementedError";
      }
    },
    StateError: {
      "^": "Error;message",
      toString$0: function(_) {
        return "Bad state: " + this.message;
      }
    },
    ConcurrentModificationError: {
      "^": "Error;modifiedObject",
      toString$0: function(_) {
        var t1 = this.modifiedObject;
        if (t1 == null)
          return "Concurrent modification during iteration.";
        return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
      }
    },
    OutOfMemoryError: {
      "^": "Object;",
      toString$0: function(_) {
        return "Out of Memory";
      },
      get$stackTrace: function() {
        return;
      },
      $isError: 1
    },
    StackOverflowError: {
      "^": "Object;",
      toString$0: function(_) {
        return "Stack Overflow";
      },
      get$stackTrace: function() {
        return;
      },
      $isError: 1
    },
    CyclicInitializationError: {
      "^": "Error;variableName",
      toString$0: function(_) {
        return "Reading static variable '" + this.variableName + "' during its initialization";
      }
    },
    _Exception: {
      "^": "Object;message",
      toString$0: function(_) {
        var t1 = this.message;
        if (t1 == null)
          return "Exception";
        return "Exception: " + H.S(t1);
      }
    },
    FormatException: {
      "^": "Object;message,source,offset",
      toString$0: function(_) {
        var t1, report, offset, source, lineNum, lineStart, lastWasCR, i, $char, lineEnd, t2, end, start, prefix, postfix, slice;
        t1 = this.message;
        report = t1 != null && "" !== t1 ? "FormatException: " + H.S(t1) : "FormatException";
        offset = this.offset;
        source = this.source;
        if (typeof source !== "string")
          return offset != null ? report + (" (at offset " + H.S(offset) + ")") : report;
        if (offset != null) {
          t1 = J.getInterceptor$n(offset);
          t1 = t1.$lt(offset, 0) || t1.$gt(offset, J.get$length$asx(source));
        } else
          t1 = false;
        if (t1)
          offset = null;
        if (offset == null) {
          t1 = J.getInterceptor$asx(source);
          if (J.$gt$n(t1.get$length(source), 78))
            source = t1.substring$2(source, 0, 75) + "...";
          return report + "\n" + H.S(source);
        }
        if (typeof offset !== "number")
          return H.iae(offset);
        t1 = J.getInterceptor$asx(source);
        lineNum = 1;
        lineStart = 0;
        lastWasCR = null;
        i = 0;
        for (; i < offset; ++i) {
          $char = t1.codeUnitAt$1(source, i);
          if ($char === 10) {
            if (lineStart !== i || lastWasCR !== true)
              ++lineNum;
            lineStart = i + 1;
            lastWasCR = false;
          } else if ($char === 13) {
            ++lineNum;
            lineStart = i + 1;
            lastWasCR = true;
          }
        }
        report = lineNum > 1 ? report + (" (at line " + lineNum + ", character " + H.S(offset - lineStart + 1) + ")\n") : report + (" (at character " + H.S(offset + 1) + ")\n");
        lineEnd = t1.get$length(source);
        i = offset;
        while (true) {
          t2 = t1.get$length(source);
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(i < t2))
            break;
          $char = t1.codeUnitAt$1(source, i);
          if ($char === 10 || $char === 13) {
            lineEnd = i;
            break;
          }
          ++i;
        }
        t2 = J.getInterceptor$n(lineEnd);
        if (J.$gt$n(t2.$sub(lineEnd, lineStart), 78))
          if (offset - lineStart < 75) {
            end = lineStart + 75;
            start = lineStart;
            prefix = "";
            postfix = "...";
          } else {
            if (J.$lt$n(t2.$sub(lineEnd, offset), 75)) {
              start = t2.$sub(lineEnd, 75);
              end = lineEnd;
              postfix = "";
            } else {
              start = offset - 36;
              end = offset + 36;
              postfix = "...";
            }
            prefix = "...";
          }
        else {
          end = lineEnd;
          start = lineStart;
          prefix = "";
          postfix = "";
        }
        slice = t1.substring$2(source, start, end);
        if (typeof start !== "number")
          return H.iae(start);
        return report + prefix + slice + postfix + "\n" + C.JSString_methods.$mul(" ", offset - start + prefix.length) + "^\n";
      }
    },
    IntegerDivisionByZeroException: {
      "^": "Object;",
      toString$0: function(_) {
        return "IntegerDivisionByZeroException";
      }
    },
    Expando: {
      "^": "Object;name>,_jsWeakMapOrKey",
      toString$0: function(_) {
        return "Expando:" + H.S(this.name);
      },
      $index: function(_, object) {
        var t1, values;
        t1 = this._jsWeakMapOrKey;
        if (typeof t1 !== "string") {
          if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
            H.throwExpression(P.ArgumentError$value(object, "Expandos are not allowed on strings, numbers, booleans or null", null));
          return t1.get(object);
        }
        values = H.Primitives_getProperty(object, "expando$values");
        return values == null ? null : H.Primitives_getProperty(values, t1);
      },
      $indexSet: function(_, object, value) {
        var t1 = this._jsWeakMapOrKey;
        if (typeof t1 !== "string")
          t1.set(object, value);
        else
          P.Expando__setOnObject(t1, object, value);
      },
      static: {
        Expando__setOnObject: function(key, object, value) {
          var values = H.Primitives_getProperty(object, "expando$values");
          if (values == null) {
            values = new P.Object();
            H.Primitives_setProperty(object, "expando$values", values);
          }
          H.Primitives_setProperty(values, key, value);
        },
        Expando$: function($name, $T) {
          var t1;
          if (typeof WeakMap == "function")
            t1 = new WeakMap();
          else {
            t1 = $.Expando__keyCount;
            $.Expando__keyCount = t1 + 1;
            t1 = "expando$key$" + t1;
          }
          return H.setRuntimeTypeInfo(new P.Expando($name, t1), [$T]);
        }
      }
    },
    Function: {
      "^": "Object;"
    },
    $int: {
      "^": "num;"
    },
    "+int": 0,
    Invocation: {
      "^": "Object;"
    },
    Iterable: {
      "^": "Object;",
      map$1: function(_, f) {
        return H.MappedIterable_MappedIterable(this, f, H.getRuntimeTypeArgument(this, "Iterable", 0), null);
      },
      where$1: ["super$Iterable$where", function(_, test) {
        return H.setRuntimeTypeInfo(new H.WhereIterable(this, test), [H.getRuntimeTypeArgument(this, "Iterable", 0)]);
      }],
      contains$1: function(_, element) {
        var t1;
        for (t1 = this.get$iterator(this); t1.moveNext$0();)
          if (J.$eq$(t1.get$current(), element))
            return true;
        return false;
      },
      forEach$1: function(_, f) {
        var t1;
        for (t1 = this.get$iterator(this); t1.moveNext$0();)
          f.call$1(t1.get$current());
      },
      toList$1$growable: function(_, growable) {
        return P.List_List$from(this, true, H.getRuntimeTypeArgument(this, "Iterable", 0));
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      get$length: function(_) {
        var it, count;
        it = this.get$iterator(this);
        for (count = 0; it.moveNext$0();)
          ++count;
        return count;
      },
      get$isEmpty: function(_) {
        return !this.get$iterator(this).moveNext$0();
      },
      get$isNotEmpty: function(_) {
        return !this.get$isEmpty(this);
      },
      get$first: function(_) {
        var it = this.get$iterator(this);
        if (!it.moveNext$0())
          throw H.wrapException(H.IterableElementError_noElement());
        return it.get$current();
      },
      get$last: function(_) {
        var it, result;
        it = this.get$iterator(this);
        if (!it.moveNext$0())
          throw H.wrapException(H.IterableElementError_noElement());
        do
          result = it.get$current();
        while (it.moveNext$0());
        return result;
      },
      get$single: function(_) {
        var it, result;
        it = this.get$iterator(this);
        if (!it.moveNext$0())
          throw H.wrapException(H.IterableElementError_noElement());
        result = it.get$current();
        if (it.moveNext$0())
          throw H.wrapException(H.IterableElementError_tooMany());
        return result;
      },
      firstWhere$2$orElse: function(_, test, orElse) {
        var t1, element;
        for (t1 = this.get$iterator(this); t1.moveNext$0();) {
          element = t1.get$current();
          if (test.call$1(element) === true)
            return element;
        }
        return orElse.call$0();
      },
      singleWhere$1: function(_, test) {
        var t1, result, foundMatching, element;
        for (t1 = this.get$iterator(this), result = null, foundMatching = false; t1.moveNext$0();) {
          element = t1.get$current();
          if (test.call$1(element) === true) {
            if (foundMatching)
              throw H.wrapException(H.IterableElementError_tooMany());
            result = element;
            foundMatching = true;
          }
        }
        if (foundMatching)
          return result;
        throw H.wrapException(H.IterableElementError_noElement());
      },
      elementAt$1: function(_, index) {
        var t1, elementIndex, element;
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(P.ArgumentError$notNull("index"));
        if (index < 0)
          H.throwExpression(P.RangeError$range(index, 0, null, "index", null));
        for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
          element = t1.get$current();
          if (index === elementIndex)
            return element;
          ++elementIndex;
        }
        throw H.wrapException(P.IndexError$(index, this, "index", null, elementIndex));
      },
      toString$0: function(_) {
        return P.IterableBase_iterableToShortString(this, "(", ")");
      },
      $asIterable: null
    },
    Iterator: {
      "^": "Object;"
    },
    List: {
      "^": "Object;",
      $asList: null,
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    "+List": 0,
    Map: {
      "^": "Object;",
      $asMap: null
    },
    Null: {
      "^": "Object;",
      toString$0: function(_) {
        return "null";
      }
    },
    "+Null": 0,
    num: {
      "^": "Object;"
    },
    "+num": 0,
    Object: {
      "^": ";",
      $eq: [function(_, other) {
        return this === other;
      }, null, "get$==", 2, 0, 164, 29, [], "=="],
      get$hashCode: [function(_) {
        return H.Primitives_objectHashCode(this);
      }, null, null, 1, 0, 166, "hashCode"],
      toString$0: ["super$Object$toString", function(_) {
        return H.Primitives_objectToHumanReadableString(this);
      }, "call$0", "get$toString", 0, 0, 23, "toString"],
      noSuchMethod$1: [function(_, invocation) {
        throw H.wrapException(P.NoSuchMethodError$(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
      }, "call$1", "get$noSuchMethod", 2, 0, 186, 12, [], "noSuchMethod"],
      get$runtimeType: [function(_) {
        return new H.TypeImpl(H.getRuntimeTypeString(this), null);
      }, null, null, 1, 0, 182, "runtimeType"],
      toString: function() {
        return this.toString$0(this);
      }
    },
    Match: {
      "^": "Object;"
    },
    StackTrace: {
      "^": "Object;"
    },
    String: {
      "^": "Object;"
    },
    "+String": 0,
    StringBuffer: {
      "^": "Object;_contents@",
      get$length: function(_) {
        return this._contents.length;
      },
      get$isEmpty: function(_) {
        return this._contents.length === 0;
      },
      get$isNotEmpty: function(_) {
        return this._contents.length !== 0;
      },
      clear$0: function(_) {
        this._contents = "";
      },
      toString$0: function(_) {
        var t1 = this._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      static: {
        StringBuffer__writeAll: function(string, objects, separator) {
          var iterator = J.get$iterator$ax(objects);
          if (!iterator.moveNext$0())
            return string;
          if (separator.length === 0) {
            do
              string += H.S(iterator.get$current());
            while (iterator.moveNext$0());
          } else {
            string += H.S(iterator.get$current());
            for (; iterator.moveNext$0();)
              string = string + separator + H.S(iterator.get$current());
          }
          return string;
        }
      }
    },
    Symbol: {
      "^": "Object;"
    },
    Type: {
      "^": "Object;"
    },
    Uri__parseIPv4Address_error: {
      "^": "Closure:163;host",
      call$2: function(msg, position) {
        throw H.wrapException(new P.FormatException("Illegal IPv4 address, " + msg, this.host, position));
      }
    },
    Uri_parseIPv6Address_error: {
      "^": "Closure:162;host",
      call$2: function(msg, position) {
        throw H.wrapException(new P.FormatException("Illegal IPv6 address, " + msg, this.host, position));
      },
      call$1: function(msg) {
        return this.call$2(msg, null);
      }
    },
    Uri_parseIPv6Address_parseHex: {
      "^": "Closure:161;host,error",
      call$2: function(start, end) {
        var value, t1;
        if (J.$gt$n(J.$sub$n(end, start), 4))
          this.error.call$2("an IPv6 part can only contain a maximum of 4 hex digits", start);
        value = H.Primitives_parseInt(J.substring$2$s(this.host, start, end), 16, null);
        t1 = J.getInterceptor$n(value);
        if (t1.$lt(value, 0) || t1.$gt(value, 65535))
          this.error.call$2("each part must be in the range of `0x0..0xFFFF`", start);
        return value;
      }
    },
    _Uri: {
      "^": "Object;scheme<,_userInfo,_host,_port,_path,_query,_fragment,_pathSegments,_text,_hashCodeCache,_queryParameters,_queryParameterLists",
      get$userInfo: function() {
        return this._userInfo;
      },
      get$host: function(_) {
        var t1 = this._host;
        if (t1 == null)
          return "";
        if (J.getInterceptor$s(t1).startsWith$1(t1, "["))
          return C.JSString_methods.substring$2(t1, 1, t1.length - 1);
        return t1;
      },
      get$port: function(_) {
        var t1 = this._port;
        if (t1 == null)
          return P._Uri__defaultPort(this.scheme);
        return t1;
      },
      get$path: function(_) {
        return this._path;
      },
      get$query: function(_) {
        var t1 = this._query;
        return t1 == null ? "" : t1;
      },
      get$fragment: function() {
        var t1 = this._fragment;
        return t1 == null ? "" : t1;
      },
      removeFragment$0: function() {
        if (this._fragment == null)
          return this;
        return new P._Uri(this.scheme, this._userInfo, this._host, this._port, this._path, this._query, null, null, null, null, null, null);
      },
      get$hasAuthority: function() {
        return this._host != null;
      },
      get$hasQuery: function() {
        return this._query != null;
      },
      get$hasFragment: function() {
        return this._fragment != null;
      },
      toString$0: function(_) {
        var t1 = this._text;
        if (t1 == null) {
          t1 = this._initializeText$0();
          this._text = t1;
        }
        return t1;
      },
      _initializeText$0: function() {
        var t1, t2, t3, t4;
        t1 = this.scheme;
        t2 = t1.length !== 0 ? t1 + ":" : "";
        t3 = this._host;
        t4 = t3 == null;
        if (!t4 || C.JSString_methods.startsWith$1(this._path, "//") || t1 === "file") {
          t1 = t2 + "//";
          t2 = this._userInfo;
          if (t2.length !== 0)
            t1 = t1 + t2 + "@";
          if (!t4)
            t1 += H.S(t3);
          t2 = this._port;
          if (t2 != null)
            t1 = t1 + ":" + H.S(t2);
        } else
          t1 = t2;
        t1 += this._path;
        t2 = this._query;
        if (t2 != null)
          t1 = t1 + "?" + H.S(t2);
        t2 = this._fragment;
        if (t2 != null)
          t1 = t1 + "#" + H.S(t2);
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      $eq: function(_, other) {
        var t1, t2, t3;
        if (other == null)
          return false;
        if (this === other)
          return true;
        t1 = J.getInterceptor(other);
        if (!!t1.$isUri) {
          if (this.scheme === other.get$scheme())
            if (this._host != null === other.get$hasAuthority())
              if (this._userInfo === other.get$userInfo()) {
                t2 = this.get$host(this);
                t3 = t1.get$host(other);
                if (t2 == null ? t3 == null : t2 === t3)
                  if (J.$eq$(this.get$port(this), t1.get$port(other)))
                    if (this._path === t1.get$path(other)) {
                      t2 = this._query;
                      t3 = t2 == null;
                      if (!t3 === other.get$hasQuery()) {
                        if (t3)
                          t2 = "";
                        if (t2 === t1.get$query(other)) {
                          t1 = this._fragment;
                          t2 = t1 == null;
                          if (!t2 === other.get$hasFragment()) {
                            if (t2)
                              t1 = "";
                            t1 = t1 === other.get$fragment();
                          } else
                            t1 = false;
                        } else
                          t1 = false;
                      } else
                        t1 = false;
                    } else
                      t1 = false;
                  else
                    t1 = false;
                else
                  t1 = false;
              } else
                t1 = false;
            else
              t1 = false;
          else
            t1 = false;
          return t1;
        }
        return false;
      },
      get$hashCode: function(_) {
        var t1 = this._hashCodeCache;
        if (t1 == null) {
          t1 = this._text;
          if (t1 == null) {
            t1 = this._initializeText$0();
            this._text = t1;
          }
          t1 = J.get$hashCode$(t1);
          this._hashCodeCache = t1;
        }
        return t1;
      },
      $isUri: 1,
      static: {
        _Uri__Uri$notSimple: function(uri, start, end, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme) {
          var t1, userInfoStart, userInfo, host, port, path, query;
          if (scheme == null) {
            t1 = J.getInterceptor$n(schemeEnd);
            if (t1.$gt(schemeEnd, start))
              scheme = P._Uri__makeScheme(uri, start, schemeEnd);
            else {
              if (t1.$eq(schemeEnd, start))
                P._Uri__fail(uri, start, "Invalid empty scheme");
              scheme = "";
            }
          }
          t1 = J.getInterceptor$n(hostStart);
          if (t1.$gt(hostStart, start)) {
            userInfoStart = J.$add$ns(schemeEnd, 3);
            userInfo = J.$lt$n(userInfoStart, hostStart) ? P._Uri__makeUserInfo(uri, userInfoStart, t1.$sub(hostStart, 1)) : "";
            host = P._Uri__makeHost(uri, hostStart, portStart, false);
            t1 = J.getInterceptor$ns(portStart);
            port = J.$lt$n(t1.$add(portStart, 1), pathStart) ? P._Uri__makePort(H.Primitives_parseInt(J.substring$2$s(uri, t1.$add(portStart, 1), pathStart), null, new P.closure2(uri, portStart)), scheme) : null;
          } else {
            userInfo = "";
            host = null;
            port = null;
          }
          path = P._Uri__makePath(uri, pathStart, queryStart, null, scheme, host != null);
          t1 = J.getInterceptor$n(queryStart);
          query = t1.$lt(queryStart, fragmentStart) ? P._Uri__makeQuery(uri, t1.$add(queryStart, 1), fragmentStart, null) : null;
          t1 = J.getInterceptor$n(fragmentStart);
          return new P._Uri(scheme, userInfo, host, port, path, query, t1.$lt(fragmentStart, end) ? P._Uri__makeFragment(uri, t1.$add(fragmentStart, 1), end) : null, null, null, null, null, null);
        },
        _Uri__Uri: function(fragment, host, path, pathSegments, port, query, queryParameters, scheme, userInfo) {
          var isFile, t1, t2;
          scheme = P._Uri__makeScheme(scheme, 0, scheme.length);
          userInfo = P._Uri__makeUserInfo(userInfo, 0, 0);
          host = P._Uri__makeHost(host, 0, host.length, false);
          query = P._Uri__makeQuery(query, 0, 0, queryParameters);
          fragment = P._Uri__makeFragment(fragment, 0, 0);
          port = P._Uri__makePort(port, scheme);
          isFile = scheme === "file";
          if (host == null)
            t1 = userInfo.length !== 0 || port != null || isFile;
          else
            t1 = false;
          if (t1)
            host = "";
          t1 = host == null;
          t2 = path.length;
          path = P._Uri__makePath(path, 0, t2, pathSegments, scheme, !t1);
          return new P._Uri(scheme, userInfo, host, port, scheme.length === 0 && t1 && !C.JSString_methods.startsWith$1(path, "/") ? P._Uri__normalizeRelativePath(path) : P._Uri__removeDotSegments(path), query, fragment, null, null, null, null, null);
        },
        _Uri__defaultPort: function(scheme) {
          if (scheme === "http")
            return 80;
          if (scheme === "https")
            return 443;
          return 0;
        },
        _Uri__fail: function(uri, index, message) {
          throw H.wrapException(new P.FormatException(message, uri, index));
        },
        _Uri__makePort: function(port, scheme) {
          if (port != null && J.$eq$(port, P._Uri__defaultPort(scheme)))
            return;
          return port;
        },
        _Uri__makeHost: function(host, start, end, strictIPv6) {
          var t1, t2, t3, i;
          if (host == null)
            return;
          t1 = J.getInterceptor(start);
          if (t1.$eq(start, end))
            return "";
          t2 = J.getInterceptor$s(host);
          if (t2.codeUnitAt$1(host, start) === 91) {
            t3 = J.getInterceptor$n(end);
            if (t2.codeUnitAt$1(host, t3.$sub(end, 1)) !== 93)
              P._Uri__fail(host, start, "Missing end `]` to match `[` in host");
            P.Uri_parseIPv6Address(host, t1.$add(start, 1), t3.$sub(end, 1));
            return t2.substring$2(host, start, end).toLowerCase();
          }
          for (i = start; t1 = J.getInterceptor$n(i), t1.$lt(i, end); i = t1.$add(i, 1))
            if (t2.codeUnitAt$1(host, i) === 58) {
              P.Uri_parseIPv6Address(host, start, end);
              return "[" + H.S(host) + "]";
            }
          return P._Uri__normalizeRegName(host, start, end);
        },
        _Uri__normalizeRegName: function(host, start, end) {
          var t1, index, sectionStart, buffer, isNormalized, t2, $char, replacement, t3, slice, sourceLength, tail;
          for (t1 = J.getInterceptor$s(host), index = start, sectionStart = index, buffer = null, isNormalized = true; t2 = J.getInterceptor$n(index), t2.$lt(index, end);) {
            $char = t1.codeUnitAt$1(host, index);
            if ($char === 37) {
              replacement = P._Uri__normalizeEscape(host, index, true);
              t3 = replacement == null;
              if (t3 && isNormalized) {
                index = t2.$add(index, 3);
                continue;
              }
              if (buffer == null)
                buffer = new P.StringBuffer("");
              slice = t1.substring$2(host, sectionStart, index);
              if (!isNormalized)
                slice = slice.toLowerCase();
              buffer._contents = buffer._contents + slice;
              if (t3) {
                replacement = t1.substring$2(host, index, t2.$add(index, 3));
                sourceLength = 3;
              } else if (replacement === "%") {
                replacement = "%25";
                sourceLength = 1;
              } else
                sourceLength = 3;
              buffer._contents += replacement;
              index = t2.$add(index, sourceLength);
              sectionStart = index;
              isNormalized = true;
            } else {
              if ($char < 127) {
                t3 = $char >>> 4;
                if (t3 >= 8)
                  return H.ioore(C.List_qNA, t3);
                t3 = (C.List_qNA[t3] & C.JSInt_methods._shlPositive$1(1, $char & 15)) !== 0;
              } else
                t3 = false;
              if (t3) {
                if (isNormalized && 65 <= $char && 90 >= $char) {
                  if (buffer == null)
                    buffer = new P.StringBuffer("");
                  if (J.$lt$n(sectionStart, index)) {
                    t3 = t1.substring$2(host, sectionStart, index);
                    buffer._contents = buffer._contents + t3;
                    sectionStart = index;
                  }
                  isNormalized = false;
                }
                index = t2.$add(index, 1);
              } else {
                if ($char <= 93) {
                  t3 = $char >>> 4;
                  if (t3 >= 8)
                    return H.ioore(C.List_2Vk, t3);
                  t3 = (C.List_2Vk[t3] & C.JSInt_methods._shlPositive$1(1, $char & 15)) !== 0;
                } else
                  t3 = false;
                if (t3)
                  P._Uri__fail(host, index, "Invalid character");
                else {
                  if (($char & 64512) === 55296 && J.$lt$n(t2.$add(index, 1), end)) {
                    tail = t1.codeUnitAt$1(host, t2.$add(index, 1));
                    if ((tail & 64512) === 56320) {
                      $char = (65536 | ($char & 1023) << 10 | tail & 1023) >>> 0;
                      sourceLength = 2;
                    } else
                      sourceLength = 1;
                  } else
                    sourceLength = 1;
                  if (buffer == null)
                    buffer = new P.StringBuffer("");
                  slice = t1.substring$2(host, sectionStart, index);
                  if (!isNormalized)
                    slice = slice.toLowerCase();
                  buffer._contents = buffer._contents + slice;
                  buffer._contents += P._Uri__escapeChar($char);
                  index = t2.$add(index, sourceLength);
                  sectionStart = index;
                }
              }
            }
          }
          if (buffer == null)
            return t1.substring$2(host, start, end);
          if (J.$lt$n(sectionStart, end)) {
            slice = t1.substring$2(host, sectionStart, end);
            buffer._contents += !isNormalized ? slice.toLowerCase() : slice;
          }
          t1 = buffer._contents;
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        },
        _Uri__makeScheme: function(scheme, start, end) {
          var t1, lowerCase, i, containsUpperCase, codeUnit, t2;
          if (start === end)
            return "";
          t1 = J.getInterceptor$s(scheme);
          lowerCase = t1.codeUnitAt$1(scheme, start) | 32;
          if (!(97 <= lowerCase && lowerCase <= 122))
            P._Uri__fail(scheme, start, "Scheme not starting with alphabetic character");
          if (typeof end !== "number")
            return H.iae(end);
          i = start;
          containsUpperCase = false;
          for (; i < end; ++i) {
            codeUnit = t1.codeUnitAt$1(scheme, i);
            if (codeUnit < 128) {
              t2 = codeUnit >>> 4;
              if (t2 >= 8)
                return H.ioore(C.List_JYB, t2);
              t2 = (C.List_JYB[t2] & C.JSInt_methods._shlPositive$1(1, codeUnit & 15)) !== 0;
            } else
              t2 = false;
            if (!t2)
              P._Uri__fail(scheme, i, "Illegal scheme character");
            if (65 <= codeUnit && codeUnit <= 90)
              containsUpperCase = true;
          }
          scheme = t1.substring$2(scheme, start, end);
          return P._Uri__canonicalizeScheme(containsUpperCase ? scheme.toLowerCase() : scheme);
        },
        _Uri__canonicalizeScheme: function(scheme) {
          if (scheme === "http")
            return "http";
          if (scheme === "file")
            return "file";
          if (scheme === "https")
            return "https";
          if (scheme === "package")
            return "package";
          return scheme;
        },
        _Uri__makeUserInfo: function(userInfo, start, end) {
          if (userInfo == null)
            return "";
          return P._Uri__normalize(userInfo, start, end, C.List_gRj);
        },
        _Uri__makePath: function(path, start, end, pathSegments, scheme, hasAuthority) {
          var isFile, ensureLeadingSlash, t1, result;
          isFile = scheme === "file";
          ensureLeadingSlash = isFile || hasAuthority;
          t1 = path == null;
          if (t1 && true)
            return isFile ? "/" : "";
          t1 = !t1;
          t1;
          result = t1 ? P._Uri__normalize(path, start, end, C.List_qg4) : C.JSNull_methods.map$1(pathSegments, new P._Uri__makePath_closure()).join$1(0, "/");
          if (result.length === 0) {
            if (isFile)
              return "/";
          } else if (ensureLeadingSlash && !C.JSString_methods.startsWith$1(result, "/"))
            result = "/" + result;
          return P._Uri__normalizePath(result, scheme, hasAuthority);
        },
        _Uri__normalizePath: function(path, scheme, hasAuthority) {
          if (scheme.length === 0 && !hasAuthority && !C.JSString_methods.startsWith$1(path, "/"))
            return P._Uri__normalizeRelativePath(path);
          return P._Uri__removeDotSegments(path);
        },
        _Uri__makeQuery: function(query, start, end, queryParameters) {
          var t1, result;
          t1 = {};
          if (query != null) {
            if (queryParameters != null)
              throw H.wrapException(P.ArgumentError$("Both query and queryParameters specified"));
            return P._Uri__normalize(query, start, end, C.List_CVk);
          }
          if (queryParameters == null)
            return;
          result = new P.StringBuffer("");
          t1.separator = "";
          queryParameters.forEach$1(0, new P._Uri__makeQuery_closure(new P._Uri__makeQuery_writeParameter(t1, result)));
          t1 = result._contents;
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        },
        _Uri__makeFragment: function(fragment, start, end) {
          if (fragment == null)
            return;
          return P._Uri__normalize(fragment, start, end, C.List_CVk);
        },
        _Uri__normalizeEscape: function(source, index, lowerCase) {
          var t1, t2, firstDigit, secondDigit, firstDigitValue, secondDigitValue, value, t3;
          t1 = J.getInterceptor$ns(index);
          t2 = J.getInterceptor$asx(source);
          if (J.$ge$n(t1.$add(index, 2), t2.get$length(source)))
            return "%";
          firstDigit = t2.codeUnitAt$1(source, t1.$add(index, 1));
          secondDigit = t2.codeUnitAt$1(source, t1.$add(index, 2));
          firstDigitValue = P._Uri__parseHexDigit(firstDigit);
          secondDigitValue = P._Uri__parseHexDigit(secondDigit);
          if (firstDigitValue < 0 || secondDigitValue < 0)
            return "%";
          value = firstDigitValue * 16 + secondDigitValue;
          if (value < 127) {
            t3 = C.JSInt_methods._shrOtherPositive$1(value, 4);
            if (t3 >= 8)
              return H.ioore(C.List_nxB, t3);
            t3 = (C.List_nxB[t3] & C.JSInt_methods._shlPositive$1(1, value & 15)) !== 0;
          } else
            t3 = false;
          if (t3)
            return H.Primitives_stringFromCharCode(lowerCase && 65 <= value && 90 >= value ? (value | 32) >>> 0 : value);
          if (firstDigit >= 97 || secondDigit >= 97)
            return t2.substring$2(source, index, t1.$add(index, 3)).toUpperCase();
          return;
        },
        _Uri__parseHexDigit: function($char) {
          var digit, lowerCase;
          digit = $char ^ 48;
          if (digit <= 9)
            return digit;
          lowerCase = $char | 32;
          if (97 <= lowerCase && lowerCase <= 102)
            return lowerCase - 87;
          return -1;
        },
        _Uri__escapeChar: function($char) {
          var codeUnits, flag, encodedBytes, t1, index, $byte, t2, t3;
          if ($char < 128) {
            codeUnits = new Array(3);
            codeUnits.fixed$length = Array;
            codeUnits[0] = 37;
            codeUnits[1] = C.JSString_methods.codeUnitAt$1("0123456789ABCDEF", $char >>> 4);
            codeUnits[2] = C.JSString_methods.codeUnitAt$1("0123456789ABCDEF", $char & 15);
          } else {
            if ($char > 2047)
              if ($char > 65535) {
                flag = 240;
                encodedBytes = 4;
              } else {
                flag = 224;
                encodedBytes = 3;
              }
            else {
              flag = 192;
              encodedBytes = 2;
            }
            t1 = 3 * encodedBytes;
            codeUnits = new Array(t1);
            codeUnits.fixed$length = Array;
            for (index = 0; --encodedBytes, encodedBytes >= 0; flag = 128) {
              $byte = C.JSInt_methods._shrReceiverPositive$1($char, 6 * encodedBytes) & 63 | flag;
              if (index >= t1)
                return H.ioore(codeUnits, index);
              codeUnits[index] = 37;
              t2 = index + 1;
              t3 = C.JSString_methods.codeUnitAt$1("0123456789ABCDEF", $byte >>> 4);
              if (t2 >= t1)
                return H.ioore(codeUnits, t2);
              codeUnits[t2] = t3;
              t3 = index + 2;
              t2 = C.JSString_methods.codeUnitAt$1("0123456789ABCDEF", $byte & 15);
              if (t3 >= t1)
                return H.ioore(codeUnits, t3);
              codeUnits[t3] = t2;
              index += 3;
            }
          }
          return P.String_String$fromCharCodes(codeUnits, 0, null);
        },
        _Uri__normalize: function(component, start, end, charTable) {
          var t1, index, sectionStart, buffer, t2, $char, t3, replacement, sourceLength, tail;
          for (t1 = J.getInterceptor$s(component), index = start, sectionStart = index, buffer = null; t2 = J.getInterceptor$n(index), t2.$lt(index, end);) {
            $char = t1.codeUnitAt$1(component, index);
            if ($char < 127) {
              t3 = $char >>> 4;
              if (t3 >= 8)
                return H.ioore(charTable, t3);
              t3 = (charTable[t3] & C.JSInt_methods._shlPositive$1(1, $char & 15)) !== 0;
            } else
              t3 = false;
            if (t3)
              index = t2.$add(index, 1);
            else {
              if ($char === 37) {
                replacement = P._Uri__normalizeEscape(component, index, false);
                if (replacement == null) {
                  index = t2.$add(index, 3);
                  continue;
                }
                if ("%" === replacement) {
                  replacement = "%25";
                  sourceLength = 1;
                } else
                  sourceLength = 3;
              } else {
                if ($char <= 93) {
                  t3 = $char >>> 4;
                  if (t3 >= 8)
                    return H.ioore(C.List_2Vk, t3);
                  t3 = (C.List_2Vk[t3] & C.JSInt_methods._shlPositive$1(1, $char & 15)) !== 0;
                } else
                  t3 = false;
                if (t3) {
                  P._Uri__fail(component, index, "Invalid character");
                  replacement = null;
                  sourceLength = null;
                } else {
                  if (($char & 64512) === 55296)
                    if (J.$lt$n(t2.$add(index, 1), end)) {
                      tail = t1.codeUnitAt$1(component, t2.$add(index, 1));
                      if ((tail & 64512) === 56320) {
                        $char = (65536 | ($char & 1023) << 10 | tail & 1023) >>> 0;
                        sourceLength = 2;
                      } else
                        sourceLength = 1;
                    } else
                      sourceLength = 1;
                  else
                    sourceLength = 1;
                  replacement = P._Uri__escapeChar($char);
                }
              }
              if (buffer == null)
                buffer = new P.StringBuffer("");
              t3 = t1.substring$2(component, sectionStart, index);
              buffer._contents = buffer._contents + t3;
              buffer._contents += H.S(replacement);
              index = t2.$add(index, sourceLength);
              sectionStart = index;
            }
          }
          if (buffer == null)
            return t1.substring$2(component, start, end);
          if (J.$lt$n(sectionStart, end))
            buffer._contents += t1.substring$2(component, sectionStart, end);
          t1 = buffer._contents;
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        },
        _Uri__mayContainDotSegments: function(path) {
          if (C.JSString_methods.startsWith$1(path, "."))
            return true;
          return C.JSString_methods.indexOf$1(path, "/.") !== -1;
        },
        _Uri__removeDotSegments: function(path) {
          var output, t1, t2, appendSlash, _i, segment, t3;
          if (!P._Uri__mayContainDotSegments(path))
            return path;
          output = [];
          for (t1 = path.split("/"), t2 = t1.length, appendSlash = false, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
            segment = t1[_i];
            if (J.$eq$(segment, "..")) {
              t3 = output.length;
              if (t3 !== 0) {
                if (0 >= t3)
                  return H.ioore(output, -1);
                output.pop();
                if (output.length === 0)
                  output.push("");
              }
              appendSlash = true;
            } else if ("." === segment)
              appendSlash = true;
            else {
              output.push(segment);
              appendSlash = false;
            }
          }
          if (appendSlash)
            output.push("");
          return C.JSArray_methods.join$1(output, "/");
        },
        _Uri__normalizeRelativePath: function(path) {
          var output, t1, t2, appendSlash, _i, segment;
          if (!P._Uri__mayContainDotSegments(path))
            return path;
          output = [];
          for (t1 = path.split("/"), t2 = t1.length, appendSlash = false, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
            segment = t1[_i];
            if (".." === segment)
              if (output.length !== 0 && !J.$eq$(C.JSArray_methods.get$last(output), "..")) {
                if (0 >= output.length)
                  return H.ioore(output, -1);
                output.pop();
                appendSlash = true;
              } else {
                output.push("..");
                appendSlash = false;
              }
            else if ("." === segment)
              appendSlash = true;
            else {
              output.push(segment);
              appendSlash = false;
            }
          }
          t1 = output.length;
          if (t1 !== 0)
            if (t1 === 1) {
              if (0 >= t1)
                return H.ioore(output, 0);
              t1 = J.get$isEmpty$asx(output[0]) === true;
            } else
              t1 = false;
          else
            t1 = true;
          if (t1)
            return "./";
          if (appendSlash || J.$eq$(C.JSArray_methods.get$last(output), ".."))
            output.push("");
          return C.JSArray_methods.join$1(output, "/");
        },
        _Uri__uriEncode: function(canonicalTable, text, encoding, spaceToPlus) {
          var result, bytes, t1, i, t2, $byte, t3;
          if (encoding === C.Utf8Codec_false && $.$get$_Uri__needsNoEncoding()._nativeRegExp.test(H.checkString(text)))
            return text;
          result = new P.StringBuffer("");
          bytes = encoding.get$encoder().convert$1(text);
          for (t1 = bytes.length, i = 0, t2 = ""; i < t1; ++i) {
            $byte = bytes[i];
            if ($byte < 128) {
              t3 = $byte >>> 4;
              if (t3 >= 8)
                return H.ioore(canonicalTable, t3);
              t3 = (canonicalTable[t3] & C.JSInt_methods._shlPositive$1(1, $byte & 15)) !== 0;
            } else
              t3 = false;
            if (t3)
              t2 = result._contents += H.Primitives_stringFromCharCode($byte);
            else if (spaceToPlus && $byte === 32) {
              t2 += "+";
              result._contents = t2;
            } else {
              t2 += "%";
              result._contents = t2;
              t2 += "0123456789ABCDEF"[$byte >>> 4 & 15];
              result._contents = t2;
              t2 += "0123456789ABCDEF"[$byte & 15];
              result._contents = t2;
            }
          }
          return t2.charCodeAt(0) == 0 ? t2 : t2;
        }
      }
    },
    closure2: {
      "^": "Closure:1;uri,portStart",
      call$1: function(_) {
        throw H.wrapException(new P.FormatException("Invalid port", this.uri, J.$add$ns(this.portStart, 1)));
      }
    },
    _Uri__makePath_closure: {
      "^": "Closure:1;",
      call$1: function(s) {
        return P._Uri__uriEncode(C.List_qg40, s, C.Utf8Codec_false, false);
      }
    },
    _Uri__makeQuery_writeParameter: {
      "^": "Closure:18;_box_0,result",
      call$2: function(key, value) {
        var t1, t2;
        t1 = this.result;
        t2 = this._box_0;
        t1._contents += t2.separator;
        t2.separator = "&";
        t1._contents += H.S(P._Uri__uriEncode(C.List_nxB, key, C.Utf8Codec_false, true));
        if (value != null && J.get$isNotEmpty$asx(value)) {
          t1._contents += "=";
          t1._contents += H.S(P._Uri__uriEncode(C.List_nxB, value, C.Utf8Codec_false, true));
        }
      }
    },
    _Uri__makeQuery_closure: {
      "^": "Closure:9;writeParameter",
      call$2: function(key, value) {
        var t1, t2;
        if (value == null || typeof value === "string")
          this.writeParameter.call$2(key, value);
        else
          for (t1 = J.get$iterator$ax(value), t2 = this.writeParameter; t1.moveNext$0();)
            t2.call$2(key, t1.get$current());
      }
    },
    UriData: {
      "^": "Object;_text,_separatorIndices,_uriCache",
      get$uri: function() {
        var t1, t2, t3, queryIndex, query, end;
        t1 = this._uriCache;
        if (t1 != null)
          return t1;
        t1 = this._separatorIndices;
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        t2 = this._text;
        t1 = t1[0] + 1;
        t3 = J.getInterceptor$asx(t2);
        queryIndex = t3.indexOf$2(t2, "?", t1);
        if (queryIndex >= 0) {
          query = t3.substring$1(t2, queryIndex + 1);
          end = queryIndex;
        } else {
          query = null;
          end = null;
        }
        t1 = new P._Uri("data", "", null, null, t3.substring$2(t2, t1, end), query, null, null, null, null, null, null);
        this._uriCache = t1;
        return t1;
      },
      toString$0: function(_) {
        var t1, t2;
        t1 = this._separatorIndices;
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        t2 = this._text;
        return t1[0] === -1 ? "data:" + H.S(t2) : t2;
      },
      static: {
        UriData__parse: function(text, start, sourceUri) {
          var indices, t1, i, slashIndex, $char, t2, equalsIndex, lastSeparator;
          indices = [start - 1];
          t1 = J.getInterceptor$asx(text);
          i = start;
          slashIndex = -1;
          $char = null;
          while (true) {
            t2 = t1.get$length(text);
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (!(i < t2))
              break;
            c$0: {
              $char = t1.codeUnitAt$1(text, i);
              if ($char === 44 || $char === 59)
                break;
              if ($char === 47) {
                if (slashIndex < 0) {
                  slashIndex = i;
                  break c$0;
                }
                throw H.wrapException(new P.FormatException("Invalid MIME type", text, i));
              }
            }
            ++i;
          }
          if (slashIndex < 0 && i > start)
            throw H.wrapException(new P.FormatException("Invalid MIME type", text, i));
          for (; $char !== 44;) {
            indices.push(i);
            ++i;
            equalsIndex = -1;
            while (true) {
              t2 = t1.get$length(text);
              if (typeof t2 !== "number")
                return H.iae(t2);
              if (!(i < t2))
                break;
              $char = t1.codeUnitAt$1(text, i);
              if ($char === 61) {
                if (equalsIndex < 0)
                  equalsIndex = i;
              } else if ($char === 59 || $char === 44)
                break;
              ++i;
            }
            if (equalsIndex >= 0)
              indices.push(equalsIndex);
            else {
              lastSeparator = C.JSArray_methods.get$last(indices);
              if ($char !== 44 || i !== lastSeparator + 7 || !t1.startsWith$2(text, "base64", lastSeparator + 1))
                throw H.wrapException(new P.FormatException("Expecting '='", text, i));
              break;
            }
          }
          indices.push(i);
          return new P.UriData(text, indices, sourceUri);
        }
      }
    },
    _createTables_closure: {
      "^": "Closure:1;",
      call$1: function(_) {
        return new Uint8Array(H._checkLength(96));
      }
    },
    _createTables_build: {
      "^": "Closure:124;tables",
      call$2: function(state, defaultTransition) {
        var t1 = this.tables;
        if (state >= t1.length)
          return H.ioore(t1, state);
        t1 = t1[state];
        J.fillRange$3$ax(t1, 0, 96, defaultTransition);
        return t1;
      }
    },
    _createTables_setChars: {
      "^": "Closure:24;",
      call$3: function(target, chars, transition) {
        var t1, t2, i;
        for (t1 = chars.length, t2 = J.getInterceptor$ax(target), i = 0; i < t1; ++i)
          t2.$indexSet(target, C.JSString_methods.codeUnitAt$1(chars, i) ^ 96, transition);
      }
    },
    _createTables_setRange: {
      "^": "Closure:24;",
      call$3: function(target, range, transition) {
        var i, n, t1;
        for (i = C.JSString_methods.codeUnitAt$1(range, 0), n = C.JSString_methods.codeUnitAt$1(range, 1), t1 = J.getInterceptor$ax(target); i <= n; ++i)
          t1.$indexSet(target, (i ^ 96) >>> 0, transition);
      }
    },
    _SimpleUri: {
      "^": "Object;_uri,_schemeEnd,_hostStart,_portStart,_pathStart,_queryStart,_fragmentStart,_schemeCache,_hashCodeCache",
      get$hasAuthority: function() {
        return J.$gt$n(this._hostStart, 0);
      },
      get$hasQuery: function() {
        return J.$lt$n(this._queryStart, this._fragmentStart);
      },
      get$hasFragment: function() {
        return J.$lt$n(this._fragmentStart, J.get$length$asx(this._uri));
      },
      get$scheme: function() {
        var t1, t2, t3;
        t1 = this._schemeEnd;
        t2 = J.getInterceptor$n(t1);
        if (t2.$le(t1, 0))
          return "";
        t3 = this._schemeCache;
        if (t3 != null)
          return t3;
        if (t2.$eq(t1, 4) && J.startsWith$1$s(this._uri, "http")) {
          this._schemeCache = "http";
          t1 = "http";
        } else if (t2.$eq(t1, 5) && J.startsWith$1$s(this._uri, "https")) {
          this._schemeCache = "https";
          t1 = "https";
        } else if (t2.$eq(t1, 4) && J.startsWith$1$s(this._uri, "file")) {
          this._schemeCache = "file";
          t1 = "file";
        } else if (t2.$eq(t1, 7) && J.startsWith$1$s(this._uri, "package")) {
          this._schemeCache = "package";
          t1 = "package";
        } else {
          t1 = J.substring$2$s(this._uri, 0, t1);
          this._schemeCache = t1;
        }
        return t1;
      },
      get$userInfo: function() {
        var t1, t2, t3, t4;
        t1 = this._hostStart;
        t2 = this._schemeEnd;
        t3 = J.getInterceptor$ns(t2);
        t4 = J.getInterceptor$n(t1);
        return t4.$gt(t1, t3.$add(t2, 3)) ? J.substring$2$s(this._uri, t3.$add(t2, 3), t4.$sub(t1, 1)) : "";
      },
      get$host: function(_) {
        var t1 = this._hostStart;
        return J.$gt$n(t1, 0) ? J.substring$2$s(this._uri, t1, this._portStart) : "";
      },
      get$port: function(_) {
        var t1, t2;
        if (J.$gt$n(this._hostStart, 0) && J.$lt$n(J.$add$ns(this._portStart, 1), this._pathStart))
          return H.Primitives_parseInt(J.substring$2$s(this._uri, J.$add$ns(this._portStart, 1), this._pathStart), null, null);
        t1 = this._schemeEnd;
        t2 = J.getInterceptor(t1);
        if (t2.$eq(t1, 4) && J.startsWith$1$s(this._uri, "http"))
          return 80;
        if (t2.$eq(t1, 5) && J.startsWith$1$s(this._uri, "https"))
          return 443;
        return 0;
      },
      get$path: function(_) {
        return J.substring$2$s(this._uri, this._pathStart, this._queryStart);
      },
      get$query: function(_) {
        var t1, t2, t3;
        t1 = this._queryStart;
        t2 = this._fragmentStart;
        t3 = J.getInterceptor$n(t1);
        return t3.$lt(t1, t2) ? J.substring$2$s(this._uri, t3.$add(t1, 1), t2) : "";
      },
      get$fragment: function() {
        var t1, t2, t3, t4;
        t1 = this._fragmentStart;
        t2 = this._uri;
        t3 = J.getInterceptor$asx(t2);
        t4 = J.getInterceptor$n(t1);
        return t4.$lt(t1, t3.get$length(t2)) ? t3.substring$1(t2, t4.$add(t1, 1)) : "";
      },
      removeFragment$0: function() {
        var t1, t2, t3;
        t1 = this._fragmentStart;
        t2 = this._uri;
        t3 = J.getInterceptor$asx(t2);
        if (!J.$lt$n(t1, t3.get$length(t2)))
          return this;
        return new P._SimpleUri(t3.substring$2(t2, 0, t1), this._schemeEnd, this._hostStart, this._portStart, this._pathStart, this._queryStart, t1, this._schemeCache, null);
      },
      get$hashCode: function(_) {
        var t1 = this._hashCodeCache;
        if (t1 == null) {
          t1 = J.get$hashCode$(this._uri);
          this._hashCodeCache = t1;
        }
        return t1;
      },
      $eq: function(_, other) {
        var t1;
        if (other == null)
          return false;
        if (this === other)
          return true;
        t1 = J.getInterceptor(other);
        if (!!t1.$isUri)
          return J.$eq$(this._uri, t1.toString$0(other));
        return false;
      },
      toString$0: function(_) {
        return this._uri;
      },
      $isUri: 1
    }
  }], ["dart.dom.html", "dart:html",, W, {
    "^": "",
    window: function() {
      return window;
    },
    AnchorElement_AnchorElement: function(href) {
      var t1, e;
      t1 = document;
      e = t1.createElement("a");
      if (href != null)
        J.set$href$x(e, href);
      return e;
    },
    CssStyleDeclaration__camelCase: function(hyphenated) {
      return hyphenated.replace(/^-ms-/, "ms-").replace(/-([\da-z])/ig, C.JS_CONST_s8I);
    },
    Element_Element$html: function(html, treeSanitizer, validator) {
      var t1, fragment;
      t1 = document.body;
      fragment = (t1 && C.BodyElement_methods).createFragment$3$treeSanitizer$validator(t1, html, treeSanitizer, validator);
      fragment.toString;
      t1 = new W._ChildNodeListLazy(fragment);
      t1 = t1.where$1(t1, new W.closure());
      return t1.get$single(t1);
    },
    Element__safeTagName: function(element) {
      var result, t1, exception;
      result = "element tag unavailable";
      try {
        t1 = J.get$tagName$x(element);
        if (typeof t1 === "string")
          result = J.get$tagName$x(element);
      } catch (exception) {
        H.unwrapException(exception);
      }
      return result;
    },
    _ElementFactoryProvider_createElement_tag: function(tag, typeExtension) {
      return document.createElement(tag);
    },
    HttpRequest_request: function(url, method, mimeType, onProgress, requestHeaders, responseType, sendData, withCredentials) {
      var completer, xhr, t1;
      completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [W.HttpRequest])), [W.HttpRequest]);
      xhr = new XMLHttpRequest();
      C.HttpRequest_methods.open$3$async(xhr, method, url, true);
      xhr.responseType = responseType;
      requestHeaders.forEach$1(0, new W.HttpRequest_request_closure(xhr));
      t1 = H.setRuntimeTypeInfo(new W._EventStream(xhr, "load", false), [H.getTypeArgumentByIndex(C.EventStreamProvider_load, 0)]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new W.HttpRequest_request_closure0(completer, xhr)), false), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = H.setRuntimeTypeInfo(new W._EventStream(xhr, "error", false), [H.getTypeArgumentByIndex(C.EventStreamProvider_error0, 0)]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(completer.get$completeError()), false), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      xhr.send(sendData);
      return completer.future;
    },
    ImageElement_ImageElement: function(height, src, width) {
      var t1, e;
      t1 = document;
      e = t1.createElement("img");
      if (src != null)
        J.set$src$x(e, src);
      return e;
    },
    InputElement_InputElement: function(type) {
      var e, t1, exception;
      t1 = document;
      e = t1.createElement("input");
      if (type != null)
        try {
          J.set$type$x(e, type);
        } catch (exception) {
          H.unwrapException(exception);
        }
      return e;
    },
    OptionElement_OptionElement$_: function(data, value, defaultSelected, selected) {
      return new Option(data, value, defaultSelected, false);
    },
    _JenkinsSmiHash_combine: function(hash, value) {
      hash = 536870911 & hash + value;
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      return hash ^ hash >>> 6;
    },
    _JenkinsSmiHash_finish: function(hash) {
      hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
    },
    _matchesWithAncestors: function($event, selector) {
      var target, t1;
      target = J.get$target$x($event);
      t1 = J.getInterceptor(target);
      return !!t1.$isElement && t1.matchesWithAncestors$1(target, selector);
    },
    _convertNativeToDart_Window: function(win) {
      if (win == null)
        return;
      return W._DOMWindowCrossFrame__createSafe(win);
    },
    _convertNativeToDart_EventTarget: function(e) {
      var $window;
      if (e == null)
        return;
      if ("postMessage" in e) {
        $window = W._DOMWindowCrossFrame__createSafe(e);
        if (!!J.getInterceptor($window).$isEventTarget)
          return $window;
        return;
      } else
        return e;
    },
    _wrapZone: function(callback) {
      var t1 = $.Zone__current;
      if (t1 === C.C__RootZone)
        return callback;
      return t1.bindUnaryCallback$2$runGuarded(callback, true);
    },
    HtmlElement: {
      "^": "Element;",
      "%": "HTMLAppletElement|HTMLBRElement|HTMLContentElement|HTMLDListElement|HTMLDirectoryElement|HTMLDivElement|HTMLFontElement|HTMLFrameElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLLabelElement|HTMLLegendElement|HTMLMarqueeElement|HTMLModElement|HTMLParagraphElement|HTMLPictureElement|HTMLPreElement|HTMLQuoteElement|HTMLShadowElement|HTMLSpanElement|HTMLTableCaptionElement|HTMLTableColElement|HTMLTitleElement|HTMLUListElement|HTMLUnknownElement|PluginPlaceholderElement;HTMLElement"
    },
    AnchorElement: {
      "^": "HtmlElement;target%,type},hostname=,href},password%,port=,protocol=",
      toString$0: function(receiver) {
        return String(receiver);
      },
      $isInterceptor: 1,
      "%": "HTMLAnchorElement"
    },
    Animation: {
      "^": "EventTarget;startTime%",
      cancel$0: function(receiver) {
        return receiver.cancel();
      },
      pause$0: function(receiver) {
        return receiver.pause();
      },
      "%": "Animation"
    },
    AnimationEffectTiming: {
      "^": "Interceptor;duration%",
      "%": "AnimationEffectTiming"
    },
    ApplicationCache: {
      "^": "EventTarget;status=",
      "%": "ApplicationCache|DOMApplicationCache|OfflineResourceList"
    },
    ApplicationCacheErrorEvent: {
      "^": "Event;reason=,status=,url=",
      "%": "ApplicationCacheErrorEvent"
    },
    AreaElement: {
      "^": "HtmlElement;target%,hostname=,href},password%,port=,protocol=",
      toString$0: function(receiver) {
        return String(receiver);
      },
      $isInterceptor: 1,
      "%": "HTMLAreaElement"
    },
    AudioTrack: {
      "^": "Interceptor;id=,kind=",
      "%": "AudioTrack"
    },
    AudioTrackList: {
      "^": "EventTarget;length=",
      get$onChange: function(receiver) {
        return H.setRuntimeTypeInfo(new W._EventStream(receiver, "change", false), [H.getTypeArgumentByIndex(C.EventStreamProvider_change, 0)]);
      },
      "%": "AudioTrackList"
    },
    AutocompleteErrorEvent: {
      "^": "Event;reason=",
      "%": "AutocompleteErrorEvent"
    },
    BarProp: {
      "^": "Interceptor;visible=",
      "%": "BarProp"
    },
    BaseElement: {
      "^": "HtmlElement;href},target%",
      "%": "HTMLBaseElement"
    },
    Blob: {
      "^": "Interceptor;",
      $isBlob: 1,
      "%": ";Blob"
    },
    BluetoothDevice: {
      "^": "Interceptor;name=",
      "%": "BluetoothDevice"
    },
    Body: {
      "^": "Interceptor;",
      text$0: [function(receiver) {
        return receiver.text();
      }, "call$0", "get$text", 0, 0, 11],
      "%": "Response;Body"
    },
    BodyElement: {
      "^": "HtmlElement;",
      $isBodyElement: 1,
      $isEventTarget: 1,
      $isInterceptor: 1,
      "%": "HTMLBodyElement"
    },
    ButtonElement: {
      "^": "HtmlElement;disabled},name%,type},value%",
      "%": "HTMLButtonElement"
    },
    CacheStorage: {
      "^": "Interceptor;",
      delete$1: [function(receiver, cacheName) {
        return receiver.delete(cacheName);
      }, "call$1", "get$$delete", 2, 0, 25],
      open$1: [function(receiver, cacheName) {
        return receiver.open(cacheName);
      }, "call$1", "get$open", 2, 0, 25],
      "%": "CacheStorage"
    },
    CanvasElement: {
      "^": "HtmlElement;width}",
      "%": "HTMLCanvasElement"
    },
    CharacterData: {
      "^": "Node;length=,previousElementSibling=",
      $isInterceptor: 1,
      "%": "CDATASection|Comment|Text;CharacterData"
    },
    Client: {
      "^": "Interceptor;id=,url=",
      "%": "Client|WindowClient"
    },
    CloseEvent: {
      "^": "Event;code=,reason=",
      "%": "CloseEvent"
    },
    CompositorWorker: {
      "^": "EventTarget;",
      $isEventTarget: 1,
      $isInterceptor: 1,
      "%": "CompositorWorker"
    },
    Credential: {
      "^": "Interceptor;id=,name=",
      "%": ";Credential"
    },
    CssFontFaceRule: {
      "^": "CssRule;style=",
      "%": "CSSFontFaceRule"
    },
    CssKeyframeRule: {
      "^": "CssRule;style=",
      "%": "CSSKeyframeRule|MozCSSKeyframeRule|WebKitCSSKeyframeRule"
    },
    CssKeyframesRule: {
      "^": "CssRule;name%",
      "%": "CSSKeyframesRule|MozCSSKeyframesRule|WebKitCSSKeyframesRule"
    },
    CssPageRule: {
      "^": "CssRule;style=",
      "%": "CSSPageRule"
    },
    CssRule: {
      "^": "Interceptor;",
      $isObject: 1,
      "%": "CSSCharsetRule|CSSGroupingRule|CSSImportRule|CSSMediaRule|CSSSupportsRule;CSSRule"
    },
    CssStyleDeclaration: {
      "^": "Interceptor_CssStyleDeclarationBase;length=",
      getPropertyValue$1: function(receiver, propertyName) {
        var propValue = this._getPropertyValueHelper$1(receiver, propertyName);
        return propValue != null ? propValue : "";
      },
      _getPropertyValueHelper$1: function(receiver, propertyName) {
        if (W.CssStyleDeclaration__camelCase(propertyName) in receiver)
          return receiver.getPropertyValue(propertyName);
        else
          return receiver.getPropertyValue(C.JSString_methods.$add(P.Device_cssPrefix(), propertyName));
      },
      setProperty$3: function(receiver, propertyName, value, priority) {
        var t1 = this._browserPropertyName$1(receiver, propertyName);
        if (value == null)
          value = "";
        if (priority == null)
          priority = "";
        receiver.setProperty(t1, value, priority);
        return;
      },
      _browserPropertyName$1: function(receiver, propertyName) {
        var t1, $name;
        t1 = $.$get$CssStyleDeclaration__propertyCache();
        $name = t1[propertyName];
        if (typeof $name === "string")
          return $name;
        $name = W.CssStyleDeclaration__camelCase(propertyName) in receiver ? propertyName : C.JSString_methods.$add(P.Device_cssPrefix(), propertyName);
        t1[propertyName] = $name;
        return $name;
      },
      set$borderTopWidth: function(receiver, value) {
        receiver.borderTopWidth = value;
      },
      set$bottom: function(receiver, value) {
        receiver.bottom = value;
      },
      get$clear: function(receiver) {
        return receiver.clear;
      },
      get$display: function(receiver) {
        return receiver.display;
      },
      set$display: function(receiver, value) {
        receiver.display = value == null ? "" : value;
      },
      set$left: function(receiver, value) {
        receiver.left = value;
      },
      set$maxHeight: function(receiver, value) {
        receiver.maxHeight = value;
      },
      set$width: function(receiver, value) {
        receiver.width = value;
      },
      clear$0: function($receiver) {
        return this.get$clear($receiver).call$0();
      },
      "%": "CSS2Properties|CSSStyleDeclaration|MSStyleCSSProperties"
    },
    Interceptor_CssStyleDeclarationBase: {
      "^": "Interceptor+CssStyleDeclarationBase;"
    },
    _CssStyleDeclarationSet: {
      "^": "Object_CssStyleDeclarationBase;_elementIterable,_elementCssStyleDeclarationSetIterable",
      getPropertyValue$1: function(_, propertyName) {
        var t1 = this._elementCssStyleDeclarationSetIterable;
        return J.getPropertyValue$1$x(t1.get$first(t1), propertyName);
      },
      setProperty$3: function(_, propertyName, value, priority) {
        this._elementCssStyleDeclarationSetIterable.forEach$1(0, new W._CssStyleDeclarationSet_setProperty_closure(propertyName, value, priority));
      },
      _setAll$2: function(propertyName, value) {
        var t1;
        if (value == null)
          value = "";
        for (t1 = this._elementIterable, t1 = t1.get$iterator(t1); t1.moveNext$0();)
          t1.__internal$_current.style[propertyName] = value;
      },
      set$borderTopWidth: function(_, value) {
        this._setAll$2("borderTopWidth", value);
      },
      set$bottom: function(_, value) {
        this._setAll$2("bottom", value);
      },
      set$display: function(_, value) {
        this._setAll$2("display", value);
      },
      set$left: function(_, value) {
        this._setAll$2("left", value);
      },
      set$maxHeight: function(_, value) {
        this._setAll$2("maxHeight", value);
      },
      set$width: function(_, value) {
        this._setAll$2("width", value);
      },
      _CssStyleDeclarationSet$1: function(_elementIterable) {
        this._elementCssStyleDeclarationSetIterable = H.setRuntimeTypeInfo(new H.MappedListIterable(P.List_List$from(this._elementIterable, true, null), new W._CssStyleDeclarationSet_closure()), [null, null]);
      },
      static: {
        _CssStyleDeclarationSet$: function(_elementIterable) {
          var t1 = new W._CssStyleDeclarationSet(_elementIterable, null);
          t1._CssStyleDeclarationSet$1(_elementIterable);
          return t1;
        }
      }
    },
    Object_CssStyleDeclarationBase: {
      "^": "Object+CssStyleDeclarationBase;"
    },
    _CssStyleDeclarationSet_closure: {
      "^": "Closure:1;",
      call$1: [function(e) {
        return J.get$style$x(e);
      }, null, null, 2, 0, null, 0, [], "call"]
    },
    _CssStyleDeclarationSet_setProperty_closure: {
      "^": "Closure:1;propertyName,value,priority",
      call$1: function(e) {
        return J.setProperty$3$x(e, this.propertyName, this.value, this.priority);
      }
    },
    CssStyleDeclarationBase: {
      "^": "Object;",
      set$borderTopWidth: function(receiver, value) {
        this.setProperty$3(receiver, "border-top-width", value, "");
      },
      set$bottom: function(receiver, value) {
        this.setProperty$3(receiver, "bottom", value, "");
      },
      get$clear: function(receiver) {
        return this.getPropertyValue$1(receiver, "clear");
      },
      get$display: function(receiver) {
        return this.getPropertyValue$1(receiver, "display");
      },
      set$display: function(receiver, value) {
        this.setProperty$3(receiver, "display", value, "");
      },
      set$left: function(receiver, value) {
        this.setProperty$3(receiver, "left", value, "");
      },
      set$maxHeight: function(receiver, value) {
        this.setProperty$3(receiver, "max-height", value, "");
      },
      set$overflowY: function(receiver, value) {
        this.setProperty$3(receiver, "overflow-y", value, "");
      },
      set$src: function(receiver, value) {
        this.setProperty$3(receiver, "src", value, "");
      },
      set$width: function(receiver, value) {
        this.setProperty$3(receiver, "width", value, "");
      },
      clear$0: function($receiver) {
        return this.get$clear($receiver).call$0();
      }
    },
    CssStyleRule: {
      "^": "CssRule;style=",
      "%": "CSSStyleRule"
    },
    CssViewportRule: {
      "^": "CssRule;style=",
      "%": "CSSViewportRule"
    },
    DataListElement: {
      "^": "HtmlElement;options=",
      "%": "HTMLDataListElement"
    },
    DataTransfer: {
      "^": "Interceptor;files=,items=",
      "%": "DataTransfer"
    },
    DataTransferItem: {
      "^": "Interceptor;kind=",
      $isDataTransferItem: 1,
      $isObject: 1,
      "%": "DataTransferItem"
    },
    DataTransferItemList: {
      "^": "Interceptor;length=",
      add$2: function(receiver, data_OR_file, type) {
        return receiver.add(data_OR_file, type);
      },
      add$1: function($receiver, data_OR_file) {
        return $receiver.add(data_OR_file);
      },
      clear$0: function(receiver) {
        return receiver.clear();
      },
      remove$1: function(receiver, index) {
        return receiver.remove(index);
      },
      $index: function(receiver, index) {
        return receiver[index];
      },
      "%": "DataTransferItemList"
    },
    DetailsElement: {
      "^": "HtmlElement;open%",
      "%": "HTMLDetailsElement"
    },
    DeviceLightEvent: {
      "^": "Event;value=",
      "%": "DeviceLightEvent"
    },
    DialogElement: {
      "^": "HtmlElement;open%",
      "%": "HTMLDialogElement"
    },
    Document: {
      "^": "Node;",
      querySelector$1: function(receiver, selectors) {
        return receiver.querySelector(selectors);
      },
      get$onChange: function(receiver) {
        return H.setRuntimeTypeInfo(new W._EventStream(receiver, "change", false), [H.getTypeArgumentByIndex(C.EventStreamProvider_change, 0)]);
      },
      querySelectorAll$1: function(receiver, selectors) {
        return H.setRuntimeTypeInfo(new W._FrozenElementList(receiver.querySelectorAll(selectors)), [null]);
      },
      $isDocument: 1,
      "%": "XMLDocument;Document"
    },
    DocumentFragment: {
      "^": "Node;",
      get$children: function(receiver) {
        if (receiver._docChildren == null)
          receiver._docChildren = new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver));
        return receiver._docChildren;
      },
      set$children: function(receiver, value) {
        var copy, children, t1;
        copy = J.toList$0$ax(value);
        children = this.get$children(receiver);
        t1 = J.getInterceptor$ax(children);
        t1.clear$0(children);
        t1.addAll$1(children, copy);
      },
      querySelectorAll$1: function(receiver, selectors) {
        return H.setRuntimeTypeInfo(new W._FrozenElementList(receiver.querySelectorAll(selectors)), [null]);
      },
      set$innerHtml: function(receiver, value) {
        var t1;
        this._clearChildren$0(receiver);
        t1 = document.body;
        receiver.appendChild((t1 && C.BodyElement_methods).createFragment$3$treeSanitizer$validator(t1, value, null, null));
      },
      appendText$1: function(receiver, text) {
        receiver.appendChild(document.createTextNode(text));
      },
      appendHtml$4$NodeTreeSanitizer$treeSanitizer$validator: function(receiver, text, NodeTreeSanitizer, treeSanitizer, validator) {
        var t1 = document.body;
        receiver.appendChild((t1 && C.BodyElement_methods).createFragment$3$treeSanitizer$validator(t1, text, treeSanitizer, validator));
      },
      appendHtml$1: function($receiver, text) {
        return this.appendHtml$4$NodeTreeSanitizer$treeSanitizer$validator($receiver, text, null, null, null);
      },
      querySelector$1: function(receiver, selectors) {
        return receiver.querySelector(selectors);
      },
      $isInterceptor: 1,
      "%": ";DocumentFragment"
    },
    DomError: {
      "^": "Interceptor;name=",
      "%": ";DOMError"
    },
    DomException: {
      "^": "Interceptor;",
      get$name: function(receiver) {
        var errorName = receiver.name;
        if (P.Device_isWebKit() === true && errorName === "SECURITY_ERR")
          return "SecurityError";
        if (P.Device_isWebKit() === true && errorName === "SYNTAX_ERR")
          return "SyntaxError";
        return errorName;
      },
      toString$0: function(receiver) {
        return String(receiver);
      },
      "%": "DOMException"
    },
    DomIterator: {
      "^": "Interceptor;",
      next$1: [function(receiver, value) {
        return receiver.next(value);
      }, function($receiver) {
        return $receiver.next();
      }, "next$0", "call$1", "call$0", "get$next", 0, 2, 69, 1],
      "%": "Iterator"
    },
    DomRectReadOnly: {
      "^": "Interceptor;",
      toString$0: function(receiver) {
        return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(this.get$width(receiver)) + " x " + H.S(this.get$height(receiver));
      },
      $eq: function(receiver, other) {
        var t1;
        if (other == null)
          return false;
        t1 = J.getInterceptor(other);
        if (!t1.$isRectangle)
          return false;
        return receiver.left === t1.get$left(other) && receiver.top === t1.get$top(other) && this.get$width(receiver) === t1.get$width(other) && this.get$height(receiver) === t1.get$height(other);
      },
      get$hashCode: function(receiver) {
        var t1, t2, t3, t4;
        t1 = receiver.left;
        t2 = receiver.top;
        t3 = this.get$width(receiver);
        t4 = this.get$height(receiver);
        return W._JenkinsSmiHash_finish(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, t1 & 0x1FFFFFFF), t2 & 0x1FFFFFFF), t3 & 0x1FFFFFFF), t4 & 0x1FFFFFFF));
      },
      get$height: function(receiver) {
        return receiver.height;
      },
      get$left: function(receiver) {
        return receiver.left;
      },
      get$top: function(receiver) {
        return receiver.top;
      },
      get$width: function(receiver) {
        return receiver.width;
      },
      $isRectangle: 1,
      $asRectangle: Isolate.functionThatReturnsNull,
      "%": ";DOMRectReadOnly"
    },
    DomSettableTokenList: {
      "^": "DomTokenList;value%",
      "%": "DOMSettableTokenList"
    },
    DomStringList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver.item(index);
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      get$last: function(receiver) {
        var len = receiver.length;
        if (len > 0)
          return receiver[len - 1];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        return this.$index(receiver, index);
      },
      $isList: 1,
      $asList: function() {
        return [P.String];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.String];
      },
      "%": "DOMStringList"
    },
    Interceptor_ListMixin: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [P.String];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.String];
      }
    },
    Interceptor_ListMixin_ImmutableListMixin: {
      "^": "Interceptor_ListMixin+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [P.String];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.String];
      }
    },
    DomTokenList: {
      "^": "Interceptor;length=",
      add$1: function(receiver, tokens) {
        return receiver.add(tokens);
      },
      contains$1: function(receiver, token) {
        return receiver.contains(token);
      },
      remove$1: function(receiver, tokens) {
        return receiver.remove(tokens);
      },
      "%": ";DOMTokenList"
    },
    _ChildrenElementList: {
      "^": "ListBase;_html$_element<,_childElements",
      contains$1: function(_, element) {
        return J.contains$1$asx(this._childElements, element);
      },
      get$isEmpty: function(_) {
        return this._html$_element.firstElementChild == null;
      },
      get$length: function(_) {
        return this._childElements.length;
      },
      $index: function(_, index) {
        var t1 = this._childElements;
        if (index >>> 0 !== index || index >= t1.length)
          return H.ioore(t1, index);
        return t1[index];
      },
      $indexSet: function(_, index, value) {
        var t1 = this._childElements;
        if (index >>> 0 !== index || index >= t1.length)
          return H.ioore(t1, index);
        this._html$_element.replaceChild(value, t1[index]);
      },
      set$length: function(_, newLength) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize element lists"));
      },
      add$1: function(_, value) {
        this._html$_element.appendChild(value);
        return value;
      },
      get$iterator: function(_) {
        var t1 = this.toList$0(this);
        return H.setRuntimeTypeInfo(new J.ArrayIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]);
      },
      addAll$1: function(_, iterable) {
        var t1, t2, _i;
        for (t1 = iterable.length, t2 = this._html$_element, _i = 0; _i < iterable.length; iterable.length === t1 || (0, H.throwConcurrentModificationError)(iterable), ++_i)
          t2.appendChild(iterable[_i]);
      },
      removeWhere$1: function(_, test) {
        this._filter$2(test, false);
      },
      _filter$2: function(test, retainMatching) {
        var t1, removed, t2;
        t1 = J.get$children$x(this._html$_element);
        removed = t1.where$1(t1, test);
        for (t1 = H.setRuntimeTypeInfo(new H.WhereIterator(J.get$iterator$ax(removed._iterable), removed._f), [H.getTypeArgumentByIndex(removed, 0)]), t2 = t1._iterator; t1.moveNext$0();)
          J.remove$0$ax(t2.get$current());
      },
      setRange$4: function(_, start, end, iterable, skipCount) {
        throw H.wrapException(new P.UnimplementedError(null));
      },
      setRange$3: function($receiver, start, end, iterable) {
        return this.setRange$4($receiver, start, end, iterable, 0);
      },
      replaceRange$3: function(_, start, end, iterable) {
        throw H.wrapException(new P.UnimplementedError(null));
      },
      fillRange$3: function(_, start, end, fillValue) {
        throw H.wrapException(new P.UnimplementedError(null));
      },
      remove$1: function(_, object) {
        var t1;
        if (!!J.getInterceptor(object).$isElement) {
          t1 = this._html$_element;
          if (object.parentNode === t1) {
            t1.removeChild(object);
            return true;
          }
        }
        return false;
      },
      clear$0: function(_) {
        J._clearChildren$0$x(this._html$_element);
      },
      get$first: function(_) {
        var result = this._html$_element.firstElementChild;
        if (result == null)
          throw H.wrapException(new P.StateError("No elements"));
        return result;
      },
      get$last: function(_) {
        var result = this._html$_element.lastElementChild;
        if (result == null)
          throw H.wrapException(new P.StateError("No elements"));
        return result;
      },
      $asListBase: function() {
        return [W.Element];
      },
      $asObject_ListMixin: function() {
        return [W.Element];
      },
      $asList: function() {
        return [W.Element];
      },
      $asIterable: function() {
        return [W.Element];
      }
    },
    _FrozenElementList: {
      "^": "ListBase;_nodeList",
      get$length: function(_) {
        return this._nodeList.length;
      },
      $index: function(_, index) {
        var t1 = this._nodeList;
        if (index >>> 0 !== index || index >= t1.length)
          return H.ioore(t1, index);
        return t1[index];
      },
      $indexSet: function(_, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot modify list"));
      },
      set$length: function(_, newLength) {
        throw H.wrapException(new P.UnsupportedError("Cannot modify list"));
      },
      get$first: function(_) {
        return C.NodeList_methods.get$first(this._nodeList);
      },
      get$last: function(_) {
        return C.NodeList_methods.get$last(this._nodeList);
      },
      get$classes: function(_) {
        return W._MultiElementCssClassSet__MultiElementCssClassSet(this);
      },
      get$style: function(_) {
        return W._CssStyleDeclarationSet$(this);
      },
      get$onChange: function(_) {
        return H.setRuntimeTypeInfo(new W._ElementListEventStreamImpl(this, false, "change"), [H.getTypeArgumentByIndex(C.EventStreamProvider_change, 0)]);
      },
      $isList: 1,
      $asList: null,
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    Element: {
      "^": "Node;style=,title%,className},id%,tagName=,previousElementSibling=",
      get$attributes: function(receiver) {
        return new W._ElementAttributeMap(receiver);
      },
      get$children: function(receiver) {
        return new W._ChildrenElementList(receiver, receiver.children);
      },
      set$children: function(receiver, value) {
        var copy, children;
        copy = J.toList$0$ax(value);
        children = this.get$children(receiver);
        children.clear$0(0);
        children.addAll$1(0, copy);
      },
      querySelectorAll$1: function(receiver, selectors) {
        return H.setRuntimeTypeInfo(new W._FrozenElementList(receiver.querySelectorAll(selectors)), [null]);
      },
      get$classes: function(receiver) {
        return new W._ElementCssClassSet(receiver);
      },
      get$dataset: function(receiver) {
        return new W._DataAttributeMap(new W._ElementAttributeMap(receiver));
      },
      getComputedStyle$1: function(receiver, pseudoElement) {
        if (pseudoElement == null)
          pseudoElement = "";
        return window.getComputedStyle(receiver, pseudoElement);
      },
      getComputedStyle$0: function($receiver) {
        return this.getComputedStyle$1($receiver, null);
      },
      appendText$1: function(receiver, text) {
        receiver.appendChild(document.createTextNode(text));
      },
      appendHtml$3$treeSanitizer$validator: function(receiver, text, treeSanitizer, validator) {
        this.insertAdjacentHtml$4$treeSanitizer$validator(receiver, "beforeend", text, treeSanitizer, validator);
      },
      appendHtml$1: function($receiver, text) {
        return this.appendHtml$3$treeSanitizer$validator($receiver, text, null, null);
      },
      toString$0: function(receiver) {
        return receiver.localName;
      },
      scrollIntoView$1: function(receiver, alignment) {
        var hasScrollIntoViewIfNeeded = !!receiver.scrollIntoViewIfNeeded;
        if (hasScrollIntoViewIfNeeded)
          receiver.scrollIntoViewIfNeeded();
        else
          receiver.scrollIntoView();
      },
      scrollIntoView$0: function($receiver) {
        return this.scrollIntoView$1($receiver, null);
      },
      insertAdjacentHtml$4$treeSanitizer$validator: function(receiver, where, html, treeSanitizer, validator) {
        if (treeSanitizer instanceof W._TrustedHtmlTreeSanitizer)
          receiver.insertAdjacentHTML(where, html);
        else
          this._insertAdjacentNode$2(receiver, where, this.createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator));
      },
      insertAdjacentElement$2: function(receiver, where, element) {
        if (!!receiver.insertAdjacentElement)
          receiver.insertAdjacentElement(where, element);
        else
          this._insertAdjacentNode$2(receiver, where, element);
        return element;
      },
      _insertAdjacentNode$2: function(receiver, where, node) {
        var t1, first;
        switch (where.toLowerCase()) {
          case "beforebegin":
            receiver.parentNode.insertBefore(node, receiver);
            break;
          case "afterbegin":
            if (receiver.childNodes.length > 0) {
              t1 = receiver.childNodes;
              if (0 >= t1.length)
                return H.ioore(t1, 0);
              first = t1[0];
            } else
              first = null;
            receiver.insertBefore(node, first);
            break;
          case "beforeend":
            receiver.appendChild(node);
            break;
          case "afterend":
            receiver.parentNode.insertBefore(node, receiver.nextSibling);
            break;
          default:
            throw H.wrapException(P.ArgumentError$("Invalid position " + where));
        }
      },
      matches$1: function(receiver, selectors) {
        if (!!receiver.matches)
          return receiver.matches(selectors);
        else if (!!receiver.webkitMatchesSelector)
          return receiver.webkitMatchesSelector(selectors);
        else if (!!receiver.mozMatchesSelector)
          return receiver.mozMatchesSelector(selectors);
        else if (!!receiver.msMatchesSelector)
          return receiver.msMatchesSelector(selectors);
        else if (!!receiver.oMatchesSelector)
          return receiver.oMatchesSelector(selectors);
        else
          throw H.wrapException(new P.UnsupportedError("Not supported on this platform"));
      },
      matchesWithAncestors$1: function(receiver, selectors) {
        var elem = receiver;
        do {
          if (J.matches$1$x(elem, selectors))
            return true;
          elem = elem.parentElement;
        } while (elem != null);
        return false;
      },
      createFragment$3$treeSanitizer$validator: ["super$Element$createFragment", function(receiver, html, treeSanitizer, validator) {
        var t1, t2, base, contextElement, fragment;
        if (treeSanitizer == null) {
          t1 = $.Element__defaultValidator;
          if (t1 == null) {
            t1 = H.setRuntimeTypeInfo([], [W.NodeValidator]);
            t2 = new W.NodeValidatorBuilder(t1);
            t1.push(W._Html5NodeValidator$(null));
            t1.push(W._TemplatingNodeValidator$());
            $.Element__defaultValidator = t2;
            validator = t2;
          } else
            validator = t1;
          t1 = $.Element__defaultSanitizer;
          if (t1 == null) {
            t1 = new W._ValidatingTreeSanitizer(validator);
            $.Element__defaultSanitizer = t1;
            treeSanitizer = t1;
          } else {
            t1.validator = validator;
            treeSanitizer = t1;
          }
        }
        if ($.Element__parseDocument == null) {
          t1 = document.implementation.createHTMLDocument("");
          $.Element__parseDocument = t1;
          $.Element__parseRange = t1.createRange();
          t1 = $.Element__parseDocument;
          t1.toString;
          base = t1.createElement("base");
          J.set$href$x(base, document.baseURI);
          $.Element__parseDocument.head.appendChild(base);
        }
        t1 = $.Element__parseDocument;
        if (!!this.$isBodyElement)
          contextElement = t1.body;
        else {
          t2 = receiver.tagName;
          t1.toString;
          contextElement = t1.createElement(t2);
          $.Element__parseDocument.body.appendChild(contextElement);
        }
        if ("createContextualFragment" in window.Range.prototype && !C.JSArray_methods.contains$1(C.List_ego, receiver.tagName)) {
          $.Element__parseRange.selectNodeContents(contextElement);
          fragment = $.Element__parseRange.createContextualFragment(html);
        } else {
          contextElement.innerHTML = html;
          fragment = $.Element__parseDocument.createDocumentFragment();
          for (; t1 = contextElement.firstChild, t1 != null;)
            fragment.appendChild(t1);
        }
        t1 = $.Element__parseDocument.body;
        if (contextElement == null ? t1 != null : contextElement !== t1)
          J.remove$0$ax(contextElement);
        treeSanitizer.sanitizeTree$1(fragment);
        document.adoptNode(fragment);
        return fragment;
      }, function($receiver, html, treeSanitizer) {
        return this.createFragment$3$treeSanitizer$validator($receiver, html, treeSanitizer, null);
      }, "createFragment$2$treeSanitizer", null, null, "get$createFragment", 2, 5, null, 1, 1],
      set$innerHtml: function(receiver, html) {
        this.setInnerHtml$1(receiver, html);
      },
      setInnerHtml$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
        receiver.textContent = null;
        if (treeSanitizer instanceof W._TrustedHtmlTreeSanitizer)
          receiver.innerHTML = html;
        else
          receiver.appendChild(this.createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator));
      },
      setInnerHtml$1: function($receiver, html) {
        return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, null, null);
      },
      setInnerHtml$2$treeSanitizer: function($receiver, html, treeSanitizer) {
        return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, treeSanitizer, null);
      },
      get$offsetHeight: function(receiver) {
        return C.JSNumber_methods.round$0(receiver.offsetHeight);
      },
      focus$0: function(receiver) {
        return receiver.focus();
      },
      getBoundingClientRect$0: function(receiver) {
        return receiver.getBoundingClientRect();
      },
      querySelector$1: function(receiver, selectors) {
        return receiver.querySelector(selectors);
      },
      get$onChange: function(receiver) {
        return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "change", false), [H.getTypeArgumentByIndex(C.EventStreamProvider_change, 0)]);
      },
      get$onClick: function(receiver) {
        return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "click", false), [H.getTypeArgumentByIndex(C.EventStreamProvider_click, 0)]);
      },
      get$onKeyDown: function(receiver) {
        return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "keydown", false), [H.getTypeArgumentByIndex(C.EventStreamProvider_keydown, 0)]);
      },
      $isElement: 1,
      $isNode: 1,
      $isObject: 1,
      $isInterceptor: 1,
      $isEventTarget: 1,
      "%": ";Element"
    },
    closure: {
      "^": "Closure:1;",
      call$1: function(e) {
        return !!J.getInterceptor(e).$isElement;
      }
    },
    EmbedElement: {
      "^": "HtmlElement;name%,src},type},width}",
      "%": "HTMLEmbedElement"
    },
    Entry: {
      "^": "Interceptor;name=",
      _remove$2: function(receiver, successCallback, errorCallback) {
        return receiver.remove(H.convertDartClosureToJS(successCallback, 0), H.convertDartClosureToJS(errorCallback, 1));
      },
      remove$0: function(receiver) {
        var completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null])), [null]);
        this._remove$2(receiver, new W.Entry_remove_closure(completer), new W.Entry_remove_closure0(completer));
        return completer.future;
      },
      "%": "DirectoryEntry|Entry|FileEntry"
    },
    Entry_remove_closure: {
      "^": "Closure:4;completer",
      call$0: [function() {
        this.completer.complete$0(0);
      }, null, null, 0, 0, null, "call"]
    },
    Entry_remove_closure0: {
      "^": "Closure:1;completer",
      call$1: [function(error) {
        this.completer.completeError$1(error);
      }, null, null, 2, 0, null, 2, [], "call"]
    },
    ErrorEvent: {
      "^": "Event;error=",
      "%": "ErrorEvent"
    },
    Event: {
      "^": "Interceptor;_html$_selector:_selector}",
      get$currentTarget: function(receiver) {
        return W._convertNativeToDart_EventTarget(receiver.currentTarget);
      },
      get$target: function(receiver) {
        return W._convertNativeToDart_EventTarget(receiver.target);
      },
      preventDefault$0: function(receiver) {
        return receiver.preventDefault();
      },
      stopPropagation$0: function(receiver) {
        return receiver.stopPropagation();
      },
      $isEvent: 1,
      $isObject: 1,
      "%": "AnimationEvent|AnimationPlayerEvent|AudioProcessingEvent|BeforeInstallPromptEvent|BeforeUnloadEvent|ClipboardEvent|CrossOriginConnectEvent|CustomEvent|DefaultSessionStartEvent|DeviceMotionEvent|DeviceOrientationEvent|ExtendableEvent|FetchEvent|FontFaceSetLoadEvent|GamepadEvent|HashChangeEvent|MIDIMessageEvent|MediaEncryptedEvent|MediaKeyMessageEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|NotificationEvent|OfflineAudioCompletionEvent|PageTransitionEvent|PeriodicSyncEvent|PopStateEvent|PushEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|RTCPeerConnectionIceEvent|RelatedEvent|SecurityPolicyViolationEvent|ServicePortConnectEvent|ServiceWorkerMessageEvent|SpeechRecognitionEvent|SyncEvent|TrackEvent|TransitionEvent|WebGLContextEvent|WebKitTransitionEvent;Event|InputEvent"
    },
    EventSource: {
      "^": "EventTarget;url=",
      "%": "EventSource"
    },
    EventTarget: {
      "^": "Interceptor;",
      addEventListener$3: function(receiver, type, listener, useCapture) {
        if (listener != null)
          this._addEventListener$3(receiver, type, listener, useCapture);
      },
      removeEventListener$3: function(receiver, type, listener, useCapture) {
        if (listener != null)
          this._removeEventListener$3(receiver, type, listener, useCapture);
      },
      _addEventListener$3: function(receiver, type, listener, capture) {
        return receiver.addEventListener(type, H.convertDartClosureToJS(listener, 1), capture);
      },
      _removeEventListener$3: function(receiver, type, listener, capture) {
        return receiver.removeEventListener(type, H.convertDartClosureToJS(listener, 1), capture);
      },
      $isEventTarget: 1,
      "%": "BatteryManager|CrossOriginServiceWorkerClient|MIDIAccess|NetworkInformation|Performance|Presentation|RTCPeerConnection|ServicePortCollection|ServiceWorkerContainer|SpeechRecognition|StashedPortCollection|WorkerPerformance|mozRTCPeerConnection|webkitRTCPeerConnection;EventTarget;EventTarget_ListMixin|EventTarget_ListMixin_ImmutableListMixin|EventTarget_ListMixin0|EventTarget_ListMixin_ImmutableListMixin0"
    },
    FederatedCredential: {
      "^": "Credential;protocol=",
      "%": "FederatedCredential"
    },
    FieldSetElement: {
      "^": "HtmlElement;disabled},name%",
      "%": "HTMLFieldSetElement"
    },
    File: {
      "^": "Blob;name=",
      $isFile: 1,
      $isObject: 1,
      "%": "File"
    },
    FileError: {
      "^": "DomError;code=",
      "%": "FileError"
    },
    FileList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin0;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      get$last: function(receiver) {
        var len = receiver.length;
        if (len > 0)
          return receiver[len - 1];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isFileList: 1,
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.File];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.File];
      },
      $isList: 1,
      $asList: function() {
        return [W.File];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.File];
      },
      "%": "FileList"
    },
    Interceptor_ListMixin0: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.File];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.File];
      }
    },
    Interceptor_ListMixin_ImmutableListMixin0: {
      "^": "Interceptor_ListMixin0+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.File];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.File];
      }
    },
    FileReader: {
      "^": "EventTarget;error=",
      get$result: function(receiver) {
        var res = receiver.result;
        if (!!J.getInterceptor(res).$isByteBuffer)
          return new Uint8Array(res, 0);
        return res;
      },
      "%": "FileReader"
    },
    FileSystem: {
      "^": "Interceptor;name=",
      "%": "DOMFileSystem"
    },
    FileWriter: {
      "^": "EventTarget;error=,length=",
      "%": "FileWriter"
    },
    FontFace: {
      "^": "Interceptor;status=,style=",
      $isFontFace: 1,
      $isObject: 1,
      "%": "FontFace"
    },
    FontFaceSet: {
      "^": "EventTarget;status=",
      add$1: function(receiver, fontFace) {
        return receiver.add(fontFace);
      },
      clear$0: function(receiver) {
        return receiver.clear();
      },
      delete$1: [function(receiver, fontFace) {
        return receiver.delete(fontFace);
      }, "call$1", "get$$delete", 2, 0, 61],
      forEach$2: function(receiver, callback, thisArg) {
        return receiver.forEach(H.convertDartClosureToJS(callback, 3), thisArg);
      },
      forEach$1: function($receiver, callback) {
        callback = H.convertDartClosureToJS(callback, 3);
        return $receiver.forEach(callback);
      },
      "%": "FontFaceSet"
    },
    FormData: {
      "^": "Interceptor;",
      delete$1: [function(receiver, $name) {
        return receiver.delete($name);
      }, "call$1", "get$$delete", 2, 0, 55],
      "%": "FormData"
    },
    FormElement: {
      "^": "HtmlElement;action=,length=,name%,target%",
      "%": "HTMLFormElement"
    },
    Gamepad: {
      "^": "Interceptor;id=",
      $isObject: 1,
      "%": "Gamepad"
    },
    GamepadButton: {
      "^": "Interceptor;value=",
      "%": "GamepadButton"
    },
    GeofencingEvent: {
      "^": "Event;id=",
      "%": "GeofencingEvent"
    },
    GeofencingRegion: {
      "^": "Interceptor;id=",
      "%": "CircularGeofencingRegion|GeofencingRegion"
    },
    History: {
      "^": "Interceptor;length=",
      get$options: function(receiver) {
        return P.convertNativeToDart_Dictionary(receiver.options);
      },
      "%": "History"
    },
    HtmlCollection: {
      "^": "Interceptor_ListMixin_ImmutableListMixin1;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      get$last: function(receiver) {
        var len = receiver.length;
        if (len > 0)
          return receiver[len - 1];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.Node];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.Node];
      },
      "%": "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"
    },
    Interceptor_ListMixin1: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      }
    },
    Interceptor_ListMixin_ImmutableListMixin1: {
      "^": "Interceptor_ListMixin1+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      }
    },
    HtmlDocument: {
      "^": "Document;body%",
      get$title: function(receiver) {
        return receiver.title;
      },
      set$title: function(receiver, value) {
        receiver.title = value;
      },
      $isNode: 1,
      $isObject: 1,
      "%": "HTMLDocument"
    },
    HttpRequest: {
      "^": "HttpRequestEventTarget;responseText=,status=,timeout%",
      open$5$async$password$user: [function(receiver, method, url, async, password, user) {
        return receiver.open(method, url, true, user, password);
      }, function($receiver, method, url) {
        return $receiver.open(method, url);
      }, "open$2", function($receiver, method, url, async) {
        return $receiver.open(method, url, async);
      }, "open$3$async", "call$5$async$password$user", "call$2", "call$3$async", "get$open", 4, 7, 54, 1, 1, 1],
      send$1: function(receiver, body_OR_data) {
        return receiver.send(body_OR_data);
      },
      $isObject: 1,
      "%": "XMLHttpRequest"
    },
    HttpRequest_request_closure: {
      "^": "Closure:9;xhr",
      call$2: function(header, value) {
        this.xhr.setRequestHeader(header, value);
      }
    },
    HttpRequest_request_closure0: {
      "^": "Closure:1;completer,xhr",
      call$1: [function(e) {
        var t1, t2, accepted, unknownRedirect, t3;
        t1 = this.xhr;
        t2 = t1.status;
        if (typeof t2 !== "number")
          return t2.$ge();
        accepted = t2 >= 200 && t2 < 300;
        unknownRedirect = t2 > 307 && t2 < 400;
        t2 = accepted || t2 === 0 || t2 === 304 || unknownRedirect;
        t3 = this.completer;
        if (t2)
          t3.complete$1(0, t1);
        else
          t3.completeError$1(e);
      }, null, null, 2, 0, null, 0, [], "call"]
    },
    HttpRequestEventTarget: {
      "^": "EventTarget;",
      "%": "XMLHttpRequestUpload;XMLHttpRequestEventTarget"
    },
    IFrameElement: {
      "^": "HtmlElement;name%,src},width}",
      "%": "HTMLIFrameElement"
    },
    ImageData: {
      "^": "Interceptor;",
      $isImageData: 1,
      "%": "ImageData"
    },
    ImageElement: {
      "^": "HtmlElement;src},width}",
      complete$1: function($receiver, arg0) {
        return $receiver.complete.call$1(arg0);
      },
      complete$0: function($receiver) {
        return $receiver.complete.call$0();
      },
      $isImageElement: 1,
      "%": "HTMLImageElement"
    },
    InputElement: {
      "^": "HtmlElement;accept},checked%,disabled},files=,max},maxLength},min},multiple},name%,placeholder},readOnly},src},type},value%,valueAsNumber%,width}",
      $isElement: 1,
      $isInterceptor: 1,
      $isEventTarget: 1,
      $isNode: 1,
      "%": "HTMLInputElement"
    },
    TextInputElement: {
      "^": "Object;",
      $isElement: 1,
      $isNode: 1,
      $isInterceptor: 1,
      $isEventTarget: 1
    },
    CheckboxInputElement: {
      "^": "Object;",
      $isElement: 1,
      $isNode: 1,
      $isInterceptor: 1,
      $isEventTarget: 1
    },
    KeyboardEvent: {
      "^": "UIEvent;code=,ctrlKey=,location=",
      get$keyCode: function(receiver) {
        return receiver.keyCode;
      },
      $isEvent: 1,
      $isObject: 1,
      "%": "KeyboardEvent"
    },
    KeygenElement: {
      "^": "HtmlElement;disabled},name%",
      "%": "HTMLKeygenElement"
    },
    LIElement: {
      "^": "HtmlElement;value%",
      "%": "HTMLLIElement"
    },
    LinkElement: {
      "^": "HtmlElement;disabled},href},type}",
      "%": "HTMLLinkElement"
    },
    Location: {
      "^": "Interceptor;hostname=,href},port=,protocol=",
      toString$0: function(receiver) {
        return String(receiver);
      },
      "%": "Location"
    },
    MapElement: {
      "^": "HtmlElement;name%",
      "%": "HTMLMapElement"
    },
    MediaController: {
      "^": "EventTarget;duration=",
      pause$0: function(receiver) {
        return receiver.pause();
      },
      "%": "MediaController"
    },
    MediaDeviceInfo: {
      "^": "Interceptor;kind=",
      "%": "MediaDeviceInfo"
    },
    MediaElement: {
      "^": "HtmlElement;duration=,error=,src}",
      pause$0: function(receiver) {
        return receiver.pause();
      },
      "%": "HTMLAudioElement;HTMLMediaElement"
    },
    MediaError: {
      "^": "Interceptor;code=",
      "%": "MediaError"
    },
    MediaKeyError: {
      "^": "Interceptor;code=",
      "%": "MediaKeyError"
    },
    MediaKeyEvent: {
      "^": "Event;errorCode=",
      "%": "MediaKeyEvent"
    },
    MediaKeySession: {
      "^": "EventTarget;",
      remove$0: function(receiver) {
        return receiver.remove();
      },
      "%": "MediaKeySession"
    },
    MediaList: {
      "^": "Interceptor;length=",
      "%": "MediaList"
    },
    MediaQueryList: {
      "^": "EventTarget;",
      get$onChange: function(receiver) {
        return H.setRuntimeTypeInfo(new W._EventStream(receiver, "change", false), [H.getTypeArgumentByIndex(C.EventStreamProvider_change, 0)]);
      },
      matches$1: function($receiver, arg0) {
        return $receiver.matches.call$1(arg0);
      },
      "%": "MediaQueryList"
    },
    MediaQueryListEvent: {
      "^": "Event;",
      matches$1: function($receiver, arg0) {
        return $receiver.matches.call$1(arg0);
      },
      "%": "MediaQueryListEvent"
    },
    MediaSource: {
      "^": "EventTarget;duration%",
      "%": "MediaSource"
    },
    MediaStream: {
      "^": "EventTarget;active=,id=",
      clone$0: function(receiver) {
        return receiver.clone();
      },
      "%": "MediaStream"
    },
    MediaStreamTrack: {
      "^": "EventTarget;id=,kind=",
      clone$0: function(receiver) {
        return receiver.clone();
      },
      "%": "MediaStreamTrack"
    },
    MenuElement: {
      "^": "HtmlElement;type}",
      "%": "HTMLMenuElement"
    },
    MenuItemElement: {
      "^": "HtmlElement;checked%,disabled},type}",
      "%": "HTMLMenuItemElement"
    },
    MessagePort: {
      "^": "EventTarget;",
      $isMessagePort: 1,
      $isObject: 1,
      "%": ";MessagePort"
    },
    MetaElement: {
      "^": "HtmlElement;name%",
      "%": "HTMLMetaElement"
    },
    MeterElement: {
      "^": "HtmlElement;max},min},value%",
      "%": "HTMLMeterElement"
    },
    MidiConnectionEvent: {
      "^": "Event;port=",
      "%": "MIDIConnectionEvent"
    },
    MidiOutput: {
      "^": "MidiPort;",
      send$2: function(receiver, data, timestamp) {
        return receiver.send(data, timestamp);
      },
      send$1: function($receiver, data) {
        return $receiver.send(data);
      },
      "%": "MIDIOutput"
    },
    MidiPort: {
      "^": "EventTarget;id=,name=",
      open$0: [function(receiver) {
        return receiver.open();
      }, "call$0", "get$open", 0, 0, 11],
      "%": "MIDIInput;MIDIPort"
    },
    MimeType: {
      "^": "Interceptor;description=",
      $isObject: 1,
      "%": "MimeType"
    },
    MimeTypeArray: {
      "^": "Interceptor_ListMixin_ImmutableListMixin2;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      get$last: function(receiver) {
        var len = receiver.length;
        if (len > 0)
          return receiver[len - 1];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.MimeType];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.MimeType];
      },
      $isList: 1,
      $asList: function() {
        return [W.MimeType];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.MimeType];
      },
      "%": "MimeTypeArray"
    },
    Interceptor_ListMixin2: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.MimeType];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.MimeType];
      }
    },
    Interceptor_ListMixin_ImmutableListMixin2: {
      "^": "Interceptor_ListMixin2+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.MimeType];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.MimeType];
      }
    },
    MouseEvent: {
      "^": "UIEvent;ctrlKey=",
      $isMouseEvent: 1,
      $isEvent: 1,
      $isObject: 1,
      "%": "DragEvent|MouseEvent|PointerEvent|WheelEvent"
    },
    MutationRecord: {
      "^": "Interceptor;target=",
      "%": "MutationRecord"
    },
    Navigator: {
      "^": "Interceptor;",
      $isInterceptor: 1,
      "%": "Navigator"
    },
    NavigatorUserMediaError: {
      "^": "Interceptor;name=",
      "%": "NavigatorUserMediaError"
    },
    _ChildNodeListLazy: {
      "^": "ListBase;_this",
      get$first: function(_) {
        var result = this._this.firstChild;
        if (result == null)
          throw H.wrapException(new P.StateError("No elements"));
        return result;
      },
      get$last: function(_) {
        var result = this._this.lastChild;
        if (result == null)
          throw H.wrapException(new P.StateError("No elements"));
        return result;
      },
      get$single: function(_) {
        var t1, l;
        t1 = this._this;
        l = t1.childNodes.length;
        if (l === 0)
          throw H.wrapException(new P.StateError("No elements"));
        if (l > 1)
          throw H.wrapException(new P.StateError("More than one element"));
        return t1.firstChild;
      },
      add$1: function(_, value) {
        this._this.appendChild(value);
      },
      addAll$1: function(_, iterable) {
        var t1, t2, len, i;
        t1 = J.getInterceptor(iterable);
        if (!!t1.$is_ChildNodeListLazy) {
          t1 = iterable._this;
          t2 = this._this;
          if (t1 !== t2)
            for (len = t1.childNodes.length, i = 0; i < len; ++i)
              t2.appendChild(t1.firstChild);
          return;
        }
        for (t1 = t1.get$iterator(iterable), t2 = this._this; t1.moveNext$0();)
          t2.appendChild(t1.get$current());
      },
      remove$1: function(_, object) {
        var t1;
        if (!J.getInterceptor(object).$isNode)
          return false;
        t1 = this._this;
        if (t1 !== object.parentNode)
          return false;
        t1.removeChild(object);
        return true;
      },
      _filter$2: function(test, removeMatching) {
        var t1, child, nextChild;
        t1 = this._this;
        child = t1.firstChild;
        for (; child != null; child = nextChild) {
          nextChild = child.nextSibling;
          if (J.$eq$(test.call$1(child), true))
            t1.removeChild(child);
        }
      },
      removeWhere$1: function(_, test) {
        this._filter$2(test, true);
      },
      clear$0: function(_) {
        J._clearChildren$0$x(this._this);
      },
      $indexSet: function(_, index, value) {
        var t1, t2;
        t1 = this._this;
        t2 = t1.childNodes;
        if (index >>> 0 !== index || index >= t2.length)
          return H.ioore(t2, index);
        t1.replaceChild(value, t2[index]);
      },
      get$iterator: function(_) {
        return C.NodeList_methods.get$iterator(this._this.childNodes);
      },
      setRange$4: function(_, start, end, iterable, skipCount) {
        throw H.wrapException(new P.UnsupportedError("Cannot setRange on Node list"));
      },
      setRange$3: function($receiver, start, end, iterable) {
        return this.setRange$4($receiver, start, end, iterable, 0);
      },
      fillRange$3: function(_, start, end, fill) {
        throw H.wrapException(new P.UnsupportedError("Cannot fillRange on Node list"));
      },
      get$length: function(_) {
        return this._this.childNodes.length;
      },
      set$length: function(_, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot set length on immutable List."));
      },
      $index: function(_, index) {
        var t1 = this._this.childNodes;
        if (index >>> 0 !== index || index >= t1.length)
          return H.ioore(t1, index);
        return t1[index];
      },
      $asListBase: function() {
        return [W.Node];
      },
      $asObject_ListMixin: function() {
        return [W.Node];
      },
      $asList: function() {
        return [W.Node];
      },
      $asIterable: function() {
        return [W.Node];
      }
    },
    Node: {
      "^": "EventTarget;lastChild=,nodeType=,ownerDocument=,parent:parentElement=,parentNode=,previousNode:previousSibling=,text:textContent%",
      get$nodes: function(receiver) {
        return new W._ChildNodeListLazy(receiver);
      },
      remove$0: function(receiver) {
        var t1 = receiver.parentNode;
        if (t1 != null)
          t1.removeChild(receiver);
      },
      replaceWith$1: function(receiver, otherNode) {
        var $parent, exception;
        try {
          $parent = receiver.parentNode;
          J._replaceChild$2$x($parent, otherNode, receiver);
        } catch (exception) {
          H.unwrapException(exception);
        }
        return receiver;
      },
      _clearChildren$0: function(receiver) {
        var t1;
        for (; t1 = receiver.firstChild, t1 != null;)
          receiver.removeChild(t1);
      },
      toString$0: function(receiver) {
        var value = receiver.nodeValue;
        return value == null ? this.super$Interceptor$toString(receiver) : value;
      },
      append$1: function(receiver, node) {
        return receiver.appendChild(node);
      },
      clone$1: function(receiver, deep) {
        return receiver.cloneNode(true);
      },
      contains$1: function(receiver, other) {
        return receiver.contains(other);
      },
      _removeChild$1: function(receiver, child) {
        return receiver.removeChild(child);
      },
      _replaceChild$2: function(receiver, node, child) {
        return receiver.replaceChild(node, child);
      },
      $isNode: 1,
      $isObject: 1,
      "%": ";Node"
    },
    NodeIterator: {
      "^": "Interceptor;",
      previousNode$0: [function(receiver) {
        return receiver.previousNode();
      }, "call$0", "get$previousNode", 0, 0, 14],
      "%": "NodeIterator"
    },
    NodeList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin3;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      get$last: function(receiver) {
        var len = receiver.length;
        if (len > 0)
          return receiver[len - 1];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.Node];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.Node];
      },
      "%": "NodeList|RadioNodeList"
    },
    Interceptor_ListMixin3: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      }
    },
    Interceptor_ListMixin_ImmutableListMixin3: {
      "^": "Interceptor_ListMixin3+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      }
    },
    NonDocumentTypeChildNode: {
      "^": "Interceptor;previousElementSibling=",
      "%": "NonDocumentTypeChildNode"
    },
    Notification: {
      "^": "EventTarget;body=,title=",
      "%": "Notification"
    },
    OListElement: {
      "^": "HtmlElement;type}",
      "%": "HTMLOListElement"
    },
    ObjectElement: {
      "^": "HtmlElement;name%,type},width}",
      "%": "HTMLObjectElement"
    },
    OptGroupElement: {
      "^": "HtmlElement;disabled}",
      "%": "HTMLOptGroupElement"
    },
    OptionElement: {
      "^": "HtmlElement;disabled},selected=,value%",
      $isOptionElement: 1,
      $isElement: 1,
      $isNode: 1,
      $isObject: 1,
      "%": "HTMLOptionElement"
    },
    OutputElement: {
      "^": "HtmlElement;name%,value%",
      "%": "HTMLOutputElement"
    },
    ParamElement: {
      "^": "HtmlElement;name%,value%",
      "%": "HTMLParamElement"
    },
    PasswordCredential: {
      "^": "Credential;password=",
      "%": "PasswordCredential"
    },
    Path2D: {
      "^": "Interceptor;",
      $isInterceptor: 1,
      "%": "Path2D"
    },
    PerformanceEntry: {
      "^": "Interceptor;duration=,name=,startTime=",
      "%": "PerformanceCompositeTiming|PerformanceEntry|PerformanceMark|PerformanceMeasure|PerformanceRenderTiming|PerformanceResourceTiming"
    },
    PermissionStatus: {
      "^": "EventTarget;status=",
      get$onChange: function(receiver) {
        return H.setRuntimeTypeInfo(new W._EventStream(receiver, "change", false), [H.getTypeArgumentByIndex(C.EventStreamProvider_change, 0)]);
      },
      "%": "PermissionStatus"
    },
    Plugin: {
      "^": "Interceptor;description=,length=,name=",
      $isObject: 1,
      "%": "Plugin"
    },
    PluginArray: {
      "^": "Interceptor_ListMixin_ImmutableListMixin4;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      get$last: function(receiver) {
        var len = receiver.length;
        if (len > 0)
          return receiver[len - 1];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [W.Plugin];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Plugin];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.Plugin];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.Plugin];
      },
      "%": "PluginArray"
    },
    Interceptor_ListMixin4: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.Plugin];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Plugin];
      }
    },
    Interceptor_ListMixin_ImmutableListMixin4: {
      "^": "Interceptor_ListMixin4+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.Plugin];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Plugin];
      }
    },
    PositionError: {
      "^": "Interceptor;code=",
      "%": "PositionError"
    },
    PresentationAvailability: {
      "^": "EventTarget;value=",
      get$onChange: function(receiver) {
        return H.setRuntimeTypeInfo(new W._EventStream(receiver, "change", false), [H.getTypeArgumentByIndex(C.EventStreamProvider_change, 0)]);
      },
      "%": "PresentationAvailability"
    },
    PresentationSession: {
      "^": "EventTarget;id=",
      send$1: function(receiver, data_OR_message) {
        return receiver.send(data_OR_message);
      },
      "%": "PresentationSession"
    },
    ProcessingInstruction: {
      "^": "CharacterData;target=",
      "%": "ProcessingInstruction"
    },
    ProgressElement: {
      "^": "HtmlElement;max},value%",
      "%": "HTMLProgressElement"
    },
    ProgressEvent: {
      "^": "Event;",
      $isEvent: 1,
      $isObject: 1,
      "%": "ProgressEvent|ResourceProgressEvent|XMLHttpRequestProgressEvent"
    },
    PromiseRejectionEvent: {
      "^": "Event;reason=",
      "%": "PromiseRejectionEvent"
    },
    PushMessageData: {
      "^": "Interceptor;",
      text$0: [function(receiver) {
        return receiver.text();
      }, "call$0", "get$text", 0, 0, 23],
      "%": "PushMessageData"
    },
    Range: {
      "^": "Interceptor;",
      collapse$1: function(receiver, toStart) {
        return receiver.collapse(toStart);
      },
      collapse$0: function($receiver) {
        return $receiver.collapse();
      },
      getBoundingClientRect$0: function(receiver) {
        return receiver.getBoundingClientRect();
      },
      "%": "Range"
    },
    ReadableByteStream: {
      "^": "Interceptor;",
      cancel$1: function(receiver, reason) {
        return receiver.cancel(reason);
      },
      cancel$0: function($receiver) {
        return $receiver.cancel();
      },
      "%": "ReadableByteStream"
    },
    ReadableByteStreamReader: {
      "^": "Interceptor;",
      cancel$1: function(receiver, reason) {
        return receiver.cancel(reason);
      },
      cancel$0: function($receiver) {
        return $receiver.cancel();
      },
      "%": "ReadableByteStreamReader"
    },
    ReadableStream: {
      "^": "Interceptor;",
      cancel$1: function(receiver, reason) {
        return receiver.cancel(reason);
      },
      cancel$0: function($receiver) {
        return $receiver.cancel();
      },
      "%": "ReadableStream"
    },
    ReadableStreamReader: {
      "^": "Interceptor;",
      cancel$1: function(receiver, reason) {
        return receiver.cancel(reason);
      },
      cancel$0: function($receiver) {
        return $receiver.cancel();
      },
      "%": "ReadableStreamReader"
    },
    RtcDataChannel: {
      "^": "EventTarget;id=,protocol=",
      send$1: function(receiver, data) {
        return receiver.send(data);
      },
      "%": "DataChannel|RTCDataChannel"
    },
    RtcDtmfSender: {
      "^": "EventTarget;duration=",
      "%": "RTCDTMFSender"
    },
    RtcSessionDescription: {
      "^": "Interceptor;type}",
      "%": "RTCSessionDescription|mozRTCSessionDescription"
    },
    RtcStatsReport: {
      "^": "Interceptor;id=",
      $isRtcStatsReport: 1,
      $isObject: 1,
      "%": "RTCStatsReport"
    },
    RtcStatsResponse: {
      "^": "Interceptor;",
      result$0: [function(receiver) {
        return receiver.result();
      }, "call$0", "get$result", 0, 0, 47],
      "%": "RTCStatsResponse"
    },
    ScreenOrientation: {
      "^": "EventTarget;",
      get$onChange: function(receiver) {
        return H.setRuntimeTypeInfo(new W._EventStream(receiver, "change", false), [H.getTypeArgumentByIndex(C.EventStreamProvider_change, 0)]);
      },
      "%": "ScreenOrientation"
    },
    ScriptElement0: {
      "^": "HtmlElement;src},type}",
      "%": "HTMLScriptElement"
    },
    SelectElement: {
      "^": "HtmlElement;disabled},length%,multiple},name%,selectedIndex%,value%",
      get$options: function(receiver) {
        return H.setRuntimeTypeInfo(new P.UnmodifiableListView(P.List_List$from(H.setRuntimeTypeInfo(new W._FrozenElementList(receiver.querySelectorAll("option")), [null]), true, W.OptionElement)), [null]);
      },
      $isElement: 1,
      $isNode: 1,
      $isObject: 1,
      "%": "HTMLSelectElement"
    },
    Selection: {
      "^": "Interceptor;isCollapsed=",
      "%": "Selection"
    },
    ServicePort: {
      "^": "Interceptor;name=",
      "%": "ServicePort"
    },
    ServiceWorkerRegistration: {
      "^": "EventTarget;active=",
      "%": "ServiceWorkerRegistration"
    },
    ShadowRoot: {
      "^": "DocumentFragment;innerHtml:innerHTML}",
      clone$1: function(receiver, deep) {
        return receiver.cloneNode(true);
      },
      "%": "ShadowRoot"
    },
    SharedWorker: {
      "^": "EventTarget;port=",
      $isEventTarget: 1,
      $isInterceptor: 1,
      "%": "SharedWorker"
    },
    SharedWorkerGlobalScope: {
      "^": "WorkerGlobalScope;name=",
      "%": "SharedWorkerGlobalScope"
    },
    SourceBuffer: {
      "^": "EventTarget;mode%",
      $isObject: 1,
      "%": "SourceBuffer"
    },
    SourceBufferList: {
      "^": "EventTarget_ListMixin_ImmutableListMixin;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      get$last: function(receiver) {
        var len = receiver.length;
        if (len > 0)
          return receiver[len - 1];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [W.SourceBuffer];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.SourceBuffer];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.SourceBuffer];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.SourceBuffer];
      },
      "%": "SourceBufferList"
    },
    EventTarget_ListMixin: {
      "^": "EventTarget+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.SourceBuffer];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.SourceBuffer];
      }
    },
    EventTarget_ListMixin_ImmutableListMixin: {
      "^": "EventTarget_ListMixin+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.SourceBuffer];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.SourceBuffer];
      }
    },
    SourceElement: {
      "^": "HtmlElement;src},type}",
      "%": "HTMLSourceElement"
    },
    SourceInfo: {
      "^": "Interceptor;id=,kind=",
      "%": "SourceInfo"
    },
    SpeechGrammar: {
      "^": "Interceptor;src}",
      $isObject: 1,
      "%": "SpeechGrammar"
    },
    SpeechGrammarList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin5;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      get$last: function(receiver) {
        var len = receiver.length;
        if (len > 0)
          return receiver[len - 1];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [W.SpeechGrammar];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.SpeechGrammar];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.SpeechGrammar];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.SpeechGrammar];
      },
      "%": "SpeechGrammarList"
    },
    Interceptor_ListMixin5: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.SpeechGrammar];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.SpeechGrammar];
      }
    },
    Interceptor_ListMixin_ImmutableListMixin5: {
      "^": "Interceptor_ListMixin5+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.SpeechGrammar];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.SpeechGrammar];
      }
    },
    SpeechRecognitionError: {
      "^": "Event;error=",
      "%": "SpeechRecognitionError"
    },
    SpeechRecognitionResult: {
      "^": "Interceptor;length=",
      $isObject: 1,
      "%": "SpeechRecognitionResult"
    },
    SpeechSynthesis: {
      "^": "EventTarget;",
      cancel$0: function(receiver) {
        return receiver.cancel();
      },
      pause$0: function(receiver) {
        return receiver.pause();
      },
      resume$0: function(receiver) {
        return receiver.resume();
      },
      "%": "SpeechSynthesis"
    },
    SpeechSynthesisEvent: {
      "^": "Event;name=",
      "%": "SpeechSynthesisEvent"
    },
    SpeechSynthesisUtterance: {
      "^": "EventTarget;text%",
      "%": "SpeechSynthesisUtterance"
    },
    SpeechSynthesisVoice: {
      "^": "Interceptor;name=",
      "%": "SpeechSynthesisVoice"
    },
    StashedMessagePort: {
      "^": "MessagePort;name=",
      $isStashedMessagePort: 1,
      $isMessagePort: 1,
      $isObject: 1,
      "%": "StashedMessagePort"
    },
    Storage: {
      "^": "Interceptor;",
      $index: function(receiver, key) {
        return receiver.getItem(key);
      },
      $indexSet: function(receiver, key, value) {
        receiver.setItem(key, value);
      },
      remove$1: function(receiver, key) {
        var value = receiver.getItem(key);
        receiver.removeItem(key);
        return value;
      },
      clear$0: function(receiver) {
        return receiver.clear();
      },
      forEach$1: function(receiver, f) {
        var i, key;
        for (i = 0; true; ++i) {
          key = receiver.key(i);
          if (key == null)
            return;
          f.call$2(key, receiver.getItem(key));
        }
      },
      get$keys: function(receiver) {
        var keys = H.setRuntimeTypeInfo([], [P.String]);
        this.forEach$1(receiver, new W.Storage_keys_closure(keys));
        return keys;
      },
      get$length: function(receiver) {
        return receiver.length;
      },
      get$isEmpty: function(receiver) {
        return receiver.key(0) == null;
      },
      get$isNotEmpty: function(receiver) {
        return receiver.key(0) != null;
      },
      $isMap: 1,
      $asMap: function() {
        return [P.String, P.String];
      },
      "%": "Storage"
    },
    Storage_keys_closure: {
      "^": "Closure:9;keys",
      call$2: function(k, v) {
        return this.keys.push(k);
      }
    },
    StorageEvent: {
      "^": "Event;newValue=,url=",
      $isEvent: 1,
      $isObject: 1,
      "%": "StorageEvent"
    },
    StyleElement: {
      "^": "HtmlElement;disabled},type}",
      "%": "HTMLStyleElement"
    },
    StyleSheet: {
      "^": "Interceptor;disabled},title=",
      $isObject: 1,
      "%": "CSSStyleSheet|StyleSheet"
    },
    TableCellElement: {
      "^": "HtmlElement;colSpan}",
      "%": "HTMLTableCellElement|HTMLTableDataCellElement|HTMLTableHeaderCellElement"
    },
    TableElement: {
      "^": "HtmlElement;",
      addRow$0: function(receiver) {
        return receiver.insertRow(-1);
      },
      createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
        var table, fragment;
        if ("createContextualFragment" in window.Range.prototype)
          return this.super$Element$createFragment(receiver, html, treeSanitizer, validator);
        table = W.Element_Element$html("<table>" + H.S(html) + "</table>", treeSanitizer, validator);
        fragment = document.createDocumentFragment();
        fragment.toString;
        new W._ChildNodeListLazy(fragment).addAll$1(0, J.get$nodes$x(table));
        return fragment;
      },
      "%": "HTMLTableElement"
    },
    TableRowElement: {
      "^": "HtmlElement;",
      addCell$0: function(receiver) {
        return receiver.insertCell(-1);
      },
      createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
        var fragment, t1, section, row;
        if ("createContextualFragment" in window.Range.prototype)
          return this.super$Element$createFragment(receiver, html, treeSanitizer, validator);
        fragment = document.createDocumentFragment();
        t1 = document;
        t1 = J.createFragment$3$treeSanitizer$validator$x(t1.createElement("table"), html, treeSanitizer, validator);
        t1.toString;
        t1 = new W._ChildNodeListLazy(t1);
        section = t1.get$single(t1);
        section.toString;
        t1 = new W._ChildNodeListLazy(section);
        row = t1.get$single(t1);
        fragment.toString;
        row.toString;
        new W._ChildNodeListLazy(fragment).addAll$1(0, new W._ChildNodeListLazy(row));
        return fragment;
      },
      "%": "HTMLTableRowElement"
    },
    TableSectionElement: {
      "^": "HtmlElement;",
      addRow$0: function(receiver) {
        return receiver.insertRow(-1);
      },
      createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
        var fragment, t1, section;
        if ("createContextualFragment" in window.Range.prototype)
          return this.super$Element$createFragment(receiver, html, treeSanitizer, validator);
        fragment = document.createDocumentFragment();
        t1 = document;
        t1 = J.createFragment$3$treeSanitizer$validator$x(t1.createElement("table"), html, treeSanitizer, validator);
        t1.toString;
        t1 = new W._ChildNodeListLazy(t1);
        section = t1.get$single(t1);
        fragment.toString;
        section.toString;
        new W._ChildNodeListLazy(fragment).addAll$1(0, new W._ChildNodeListLazy(section));
        return fragment;
      },
      "%": "HTMLTableSectionElement"
    },
    TemplateElement: {
      "^": "HtmlElement;",
      setInnerHtml$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
        var fragment;
        receiver.textContent = null;
        fragment = this.createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator);
        receiver.content.appendChild(fragment);
      },
      setInnerHtml$1: function($receiver, html) {
        return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, null, null);
      },
      setInnerHtml$2$treeSanitizer: function($receiver, html, treeSanitizer) {
        return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, treeSanitizer, null);
      },
      $isTemplateElement: 1,
      "%": "HTMLTemplateElement"
    },
    TextAreaElement: {
      "^": "HtmlElement;disabled},maxLength},name%,placeholder},readOnly},rows},value%",
      "%": "HTMLTextAreaElement"
    },
    TextTrack: {
      "^": "EventTarget;id=,kind=,mode%",
      $isObject: 1,
      "%": "TextTrack"
    },
    TextTrackCue: {
      "^": "EventTarget;id%,startTime%",
      $isObject: 1,
      "%": ";TextTrackCue"
    },
    TextTrackCueList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin6;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      get$last: function(receiver) {
        var len = receiver.length;
        if (len > 0)
          return receiver[len - 1];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.TextTrackCue];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.TextTrackCue];
      },
      $isList: 1,
      $asList: function() {
        return [W.TextTrackCue];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.TextTrackCue];
      },
      "%": "TextTrackCueList"
    },
    Interceptor_ListMixin6: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.TextTrackCue];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.TextTrackCue];
      }
    },
    Interceptor_ListMixin_ImmutableListMixin6: {
      "^": "Interceptor_ListMixin6+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.TextTrackCue];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.TextTrackCue];
      }
    },
    TextTrackList: {
      "^": "EventTarget_ListMixin_ImmutableListMixin0;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      get$last: function(receiver) {
        var len = receiver.length;
        if (len > 0)
          return receiver[len - 1];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      get$onChange: function(receiver) {
        return H.setRuntimeTypeInfo(new W._EventStream(receiver, "change", false), [H.getTypeArgumentByIndex(C.EventStreamProvider_change, 0)]);
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.TextTrack];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.TextTrack];
      },
      $isList: 1,
      $asList: function() {
        return [W.TextTrack];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.TextTrack];
      },
      "%": "TextTrackList"
    },
    EventTarget_ListMixin0: {
      "^": "EventTarget+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.TextTrack];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.TextTrack];
      }
    },
    EventTarget_ListMixin_ImmutableListMixin0: {
      "^": "EventTarget_ListMixin0+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.TextTrack];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.TextTrack];
      }
    },
    TimeRanges: {
      "^": "Interceptor;length=",
      "%": "TimeRanges"
    },
    Touch: {
      "^": "Interceptor;",
      get$target: function(receiver) {
        return W._convertNativeToDart_EventTarget(receiver.target);
      },
      $isObject: 1,
      "%": "Touch"
    },
    TouchEvent: {
      "^": "UIEvent;ctrlKey=",
      "%": "TouchEvent"
    },
    TouchList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin7;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      get$last: function(receiver) {
        var len = receiver.length;
        if (len > 0)
          return receiver[len - 1];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [W.Touch];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Touch];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.Touch];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.Touch];
      },
      "%": "TouchList"
    },
    Interceptor_ListMixin7: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.Touch];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Touch];
      }
    },
    Interceptor_ListMixin_ImmutableListMixin7: {
      "^": "Interceptor_ListMixin7+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.Touch];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Touch];
      }
    },
    TrackDefaultList: {
      "^": "Interceptor;length=",
      "%": "TrackDefaultList"
    },
    TrackElement: {
      "^": "HtmlElement;kind%,src}",
      "%": "HTMLTrackElement"
    },
    TreeWalker: {
      "^": "Interceptor;",
      lastChild$0: [function(receiver) {
        return receiver.lastChild();
      }, "call$0", "get$lastChild", 0, 0, 14],
      parentNode$0: [function(receiver) {
        return receiver.parentNode();
      }, "call$0", "get$parentNode", 0, 0, 14],
      previousNode$0: [function(receiver) {
        return receiver.previousNode();
      }, "call$0", "get$previousNode", 0, 0, 14],
      "%": "TreeWalker"
    },
    UIEvent: {
      "^": "Event;",
      "%": "CompositionEvent|FocusEvent|SVGZoomEvent|TextEvent;UIEvent"
    },
    Url: {
      "^": "Interceptor;hostname=,href},password%,port=,protocol=",
      toString$0: function(receiver) {
        return String(receiver);
      },
      $isInterceptor: 1,
      "%": "URL"
    },
    VideoElement: {
      "^": "MediaElement;width}",
      "%": "HTMLVideoElement"
    },
    VideoTrack: {
      "^": "Interceptor;id=,kind=,selected=",
      "%": "VideoTrack"
    },
    VideoTrackList: {
      "^": "EventTarget;length=,selectedIndex=",
      get$onChange: function(receiver) {
        return H.setRuntimeTypeInfo(new W._EventStream(receiver, "change", false), [H.getTypeArgumentByIndex(C.EventStreamProvider_change, 0)]);
      },
      "%": "VideoTrackList"
    },
    VttCue: {
      "^": "TextTrackCue;text%",
      "%": "VTTCue"
    },
    VttRegion: {
      "^": "Interceptor;id%,width}",
      "%": "VTTRegion"
    },
    VttRegionList: {
      "^": "Interceptor;length=",
      "%": "VTTRegionList"
    },
    WebSocket: {
      "^": "EventTarget;protocol=,url=",
      send$1: function(receiver, data) {
        return receiver.send(data);
      },
      "%": "WebSocket"
    },
    Window: {
      "^": "EventTarget;name%,status%",
      open$3: [function(receiver, url, $name, options) {
        return W._DOMWindowCrossFrame__createSafe(receiver.open(url, $name, options));
      }, function($receiver, url, $name) {
        return this.open$3($receiver, url, $name, null);
      }, "open$2", "call$3", "call$2", "get$open", 4, 2, 42, 1],
      get$location: function(receiver) {
        return receiver.location;
      },
      set$location: function(receiver, value) {
        receiver.location = value;
      },
      _requestAnimationFrame$1: function(receiver, callback) {
        return receiver.requestAnimationFrame(H.convertDartClosureToJS(callback, 1));
      },
      _ensureRequestAnimationFrame$0: function(receiver) {
        if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
          return;
        (function($this) {
          var vendors = ['ms', 'moz', 'webkit', 'o'];
          for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
            $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
            $this.cancelAnimationFrame = $this[vendors[i] + 'CancelAnimationFrame'] || $this[vendors[i] + 'CancelRequestAnimationFrame'];
          }
          if ($this.requestAnimationFrame && $this.cancelAnimationFrame)
            return;
          $this.requestAnimationFrame = function(callback) {
            return window.setTimeout(function() {
              callback(Date.now());
            }, 16);
          };
          $this.cancelAnimationFrame = function(id) {
            clearTimeout(id);
          };
        })(receiver);
      },
      get$parent: function(receiver) {
        return W._convertNativeToDart_Window(receiver.parent);
      },
      get$onChange: function(receiver) {
        return H.setRuntimeTypeInfo(new W._EventStream(receiver, "change", false), [H.getTypeArgumentByIndex(C.EventStreamProvider_change, 0)]);
      },
      $isWindow: 1,
      $isInterceptor: 1,
      $isEventTarget: 1,
      "%": "DOMWindow|Window"
    },
    Worker: {
      "^": "EventTarget;",
      $isEventTarget: 1,
      $isInterceptor: 1,
      "%": "Worker"
    },
    WorkerGlobalScope: {
      "^": "EventTarget;location=",
      $isInterceptor: 1,
      "%": "CompositorWorkerGlobalScope|DedicatedWorkerGlobalScope|ServiceWorkerGlobalScope;WorkerGlobalScope"
    },
    _Attr: {
      "^": "Node;name=,value%",
      "%": "Attr"
    },
    _ClientRect: {
      "^": "Interceptor;height=,left=,top=,width=",
      toString$0: function(receiver) {
        return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
      },
      $eq: function(receiver, other) {
        var t1, t2, t3;
        if (other == null)
          return false;
        t1 = J.getInterceptor(other);
        if (!t1.$isRectangle)
          return false;
        t2 = receiver.left;
        t3 = t1.get$left(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = receiver.top;
          t3 = t1.get$top(other);
          if (t2 == null ? t3 == null : t2 === t3) {
            t2 = receiver.width;
            t3 = t1.get$width(other);
            if (t2 == null ? t3 == null : t2 === t3) {
              t2 = receiver.height;
              t1 = t1.get$height(other);
              t1 = t2 == null ? t1 == null : t2 === t1;
            } else
              t1 = false;
          } else
            t1 = false;
        } else
          t1 = false;
        return t1;
      },
      get$hashCode: function(receiver) {
        var t1, t2, t3, t4;
        t1 = J.get$hashCode$(receiver.left);
        t2 = J.get$hashCode$(receiver.top);
        t3 = J.get$hashCode$(receiver.width);
        t4 = J.get$hashCode$(receiver.height);
        return W._JenkinsSmiHash_finish(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, t1), t2), t3), t4));
      },
      $isRectangle: 1,
      $asRectangle: Isolate.functionThatReturnsNull,
      "%": "ClientRect"
    },
    _ClientRectList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin8;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver.item(index);
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      get$last: function(receiver) {
        var len = receiver.length;
        if (len > 0)
          return receiver[len - 1];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        return this.$index(receiver, index);
      },
      $isList: 1,
      $asList: function() {
        return [P.Rectangle];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.Rectangle];
      },
      "%": "ClientRectList|DOMRectList"
    },
    Interceptor_ListMixin8: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [P.Rectangle];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.Rectangle];
      }
    },
    Interceptor_ListMixin_ImmutableListMixin8: {
      "^": "Interceptor_ListMixin8+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [P.Rectangle];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.Rectangle];
      }
    },
    _CssRuleList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin9;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      get$last: function(receiver) {
        var len = receiver.length;
        if (len > 0)
          return receiver[len - 1];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [W.CssRule];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.CssRule];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.CssRule];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.CssRule];
      },
      "%": "CSSRuleList"
    },
    Interceptor_ListMixin9: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.CssRule];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.CssRule];
      }
    },
    Interceptor_ListMixin_ImmutableListMixin9: {
      "^": "Interceptor_ListMixin9+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.CssRule];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.CssRule];
      }
    },
    _DocumentType: {
      "^": "Node;",
      $isInterceptor: 1,
      "%": "DocumentType"
    },
    _DomRect: {
      "^": "DomRectReadOnly;",
      get$height: function(receiver) {
        return receiver.height;
      },
      get$width: function(receiver) {
        return receiver.width;
      },
      set$width: function(receiver, value) {
        receiver.width = value;
      },
      "%": "DOMRect"
    },
    _GamepadList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin10;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      get$last: function(receiver) {
        var len = receiver.length;
        if (len > 0)
          return receiver[len - 1];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.Gamepad];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.Gamepad];
      },
      $isList: 1,
      $asList: function() {
        return [W.Gamepad];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Gamepad];
      },
      "%": "GamepadList"
    },
    Interceptor_ListMixin10: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.Gamepad];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Gamepad];
      }
    },
    Interceptor_ListMixin_ImmutableListMixin10: {
      "^": "Interceptor_ListMixin10+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.Gamepad];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Gamepad];
      }
    },
    _HTMLFrameSetElement: {
      "^": "HtmlElement;",
      $isEventTarget: 1,
      $isInterceptor: 1,
      "%": "HTMLFrameSetElement"
    },
    _NamedNodeMap: {
      "^": "Interceptor_ListMixin_ImmutableListMixin11;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      get$last: function(receiver) {
        var len = receiver.length;
        if (len > 0)
          return receiver[len - 1];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.Node];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.Node];
      },
      "%": "MozNamedAttrMap|NamedNodeMap"
    },
    Interceptor_ListMixin11: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      }
    },
    Interceptor_ListMixin_ImmutableListMixin11: {
      "^": "Interceptor_ListMixin11+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      }
    },
    _Request: {
      "^": "Body;mode=,url=",
      clone$0: function(receiver) {
        return receiver.clone();
      },
      "%": "Request"
    },
    _ServiceWorker: {
      "^": "EventTarget;",
      $isEventTarget: 1,
      $isInterceptor: 1,
      "%": "ServiceWorker"
    },
    _SpeechRecognitionResultList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin12;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      get$last: function(receiver) {
        var len = receiver.length;
        if (len > 0)
          return receiver[len - 1];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [W.SpeechRecognitionResult];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.SpeechRecognitionResult];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.SpeechRecognitionResult];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.SpeechRecognitionResult];
      },
      "%": "SpeechRecognitionResultList"
    },
    Interceptor_ListMixin12: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.SpeechRecognitionResult];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.SpeechRecognitionResult];
      }
    },
    Interceptor_ListMixin_ImmutableListMixin12: {
      "^": "Interceptor_ListMixin12+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.SpeechRecognitionResult];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.SpeechRecognitionResult];
      }
    },
    _StyleSheetList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin13;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      get$last: function(receiver) {
        var len = receiver.length;
        if (len > 0)
          return receiver[len - 1];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.StyleSheet];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.StyleSheet];
      },
      $isList: 1,
      $asList: function() {
        return [W.StyleSheet];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.StyleSheet];
      },
      "%": "StyleSheetList"
    },
    Interceptor_ListMixin13: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.StyleSheet];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.StyleSheet];
      }
    },
    Interceptor_ListMixin_ImmutableListMixin13: {
      "^": "Interceptor_ListMixin13+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.StyleSheet];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.StyleSheet];
      }
    },
    _WorkerLocation: {
      "^": "Interceptor;",
      $isInterceptor: 1,
      "%": "WorkerLocation"
    },
    _WorkerNavigator: {
      "^": "Interceptor;",
      $isInterceptor: 1,
      "%": "WorkerNavigator"
    },
    _AttributeMap: {
      "^": "Object;_html$_element<",
      clear$0: function(_) {
        var t1, t2, t3, _i, key;
        for (t1 = this.get$keys(this), t2 = t1.length, t3 = this._html$_element, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          key = t1[_i];
          t3.getAttribute(key);
          t3.removeAttribute(key);
        }
      },
      forEach$1: function(_, f) {
        var t1, t2, t3, _i, key;
        for (t1 = this.get$keys(this), t2 = t1.length, t3 = this._html$_element, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          key = t1[_i];
          f.call$2(key, t3.getAttribute(key));
        }
      },
      get$keys: function(_) {
        var attributes, keys, len, i, attr;
        attributes = this._html$_element.attributes;
        keys = H.setRuntimeTypeInfo([], [P.String]);
        for (len = attributes.length, i = 0; i < len; ++i) {
          if (i >= attributes.length)
            return H.ioore(attributes, i);
          attr = attributes[i];
          if (attr.namespaceURI == null)
            keys.push(J.get$name$x(attr));
        }
        return keys;
      },
      get$isEmpty: function(_) {
        return this.get$keys(this).length === 0;
      },
      get$isNotEmpty: function(_) {
        return this.get$keys(this).length !== 0;
      },
      $isMap: 1,
      $asMap: function() {
        return [P.String, P.String];
      }
    },
    _ElementAttributeMap: {
      "^": "_AttributeMap;_html$_element",
      $index: function(_, key) {
        return this._html$_element.getAttribute(key);
      },
      $indexSet: function(_, key, value) {
        this._html$_element.setAttribute(key, value);
      },
      remove$1: function(_, key) {
        var t1, value;
        t1 = this._html$_element;
        value = t1.getAttribute(key);
        t1.removeAttribute(key);
        return value;
      },
      get$length: function(_) {
        return this.get$keys(this).length;
      }
    },
    _DataAttributeMap: {
      "^": "Object;_attributes",
      $index: function(_, key) {
        return this._attributes._html$_element.getAttribute("data-" + this._toHyphenedName$1(key));
      },
      $indexSet: function(_, key, value) {
        this._attributes._html$_element.setAttribute("data-" + this._toHyphenedName$1(key), value);
      },
      remove$1: function(_, key) {
        var t1, t2, value;
        t1 = "data-" + this._toHyphenedName$1(key);
        t2 = this._attributes._html$_element;
        value = t2.getAttribute(t1);
        t2.removeAttribute(t1);
        return value;
      },
      clear$0: function(_) {
        var t1, t2, t3, _i, t4;
        for (t1 = this.get$keys(this), t2 = t1.length, t3 = this._attributes._html$_element, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          t4 = "data-" + this._toHyphenedName$1(t1[_i]);
          t3.getAttribute(t4);
          t3.removeAttribute(t4);
        }
      },
      forEach$1: function(_, f) {
        this._attributes.forEach$1(0, new W._DataAttributeMap_forEach_closure(this, f));
      },
      get$keys: function(_) {
        var keys = H.setRuntimeTypeInfo([], [P.String]);
        this._attributes.forEach$1(0, new W._DataAttributeMap_keys_closure(this, keys));
        return keys;
      },
      get$length: function(_) {
        return this.get$keys(this).length;
      },
      get$isEmpty: function(_) {
        return this.get$keys(this).length === 0;
      },
      get$isNotEmpty: function(_) {
        return this.get$keys(this).length !== 0;
      },
      _toCamelCase$2$startUppercase: function(hyphenedName, startUppercase) {
        var segments, i, segment, t1;
        segments = hyphenedName.split("-");
        for (i = 1; i < segments.length; ++i) {
          segment = segments[i];
          t1 = J.getInterceptor$asx(segment);
          if (J.$gt$n(t1.get$length(segment), 0)) {
            t1 = J.toUpperCase$0$s(t1.$index(segment, 0)) + t1.substring$1(segment, 1);
            if (i >= segments.length)
              return H.ioore(segments, i);
            segments[i] = t1;
          }
        }
        return C.JSArray_methods.join$1(segments, "");
      },
      _toCamelCase$1: function(hyphenedName) {
        return this._toCamelCase$2$startUppercase(hyphenedName, false);
      },
      _toHyphenedName$1: function(word) {
        var sb, t1, i, t2, lower;
        sb = new P.StringBuffer("");
        t1 = J.getInterceptor$asx(word);
        i = 0;
        while (true) {
          t2 = t1.get$length(word);
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(i < t2))
            break;
          lower = J.toLowerCase$0$s(t1.$index(word, i));
          if (!J.$eq$(t1.$index(word, i), lower) && i > 0)
            sb._contents += "-";
          sb._contents += lower;
          ++i;
        }
        t1 = sb._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      $isMap: 1,
      $asMap: function() {
        return [P.String, P.String];
      }
    },
    _DataAttributeMap_forEach_closure: {
      "^": "Closure:26;$this,f",
      call$2: function(key, value) {
        var t1 = J.getInterceptor$s(key);
        if (t1.startsWith$1(key, "data-"))
          this.f.call$2(this.$this._toCamelCase$1(t1.substring$1(key, 5)), value);
      }
    },
    _DataAttributeMap_keys_closure: {
      "^": "Closure:26;$this,keys",
      call$2: function(key, value) {
        var t1 = J.getInterceptor$s(key);
        if (t1.startsWith$1(key, "data-"))
          this.keys.push(this.$this._toCamelCase$1(t1.substring$1(key, 5)));
      }
    },
    WindowBase: {
      "^": "Object;",
      $isEventTarget: 1,
      $isInterceptor: 1
    },
    _MultiElementCssClassSet: {
      "^": "CssClassSetImpl;_elementIterable,_sets",
      readClasses$0: function() {
        var s = P.LinkedHashSet_LinkedHashSet(null, null, null, P.String);
        C.JSArray_methods.forEach$1(this._sets, new W._MultiElementCssClassSet_readClasses_closure(s));
        return s;
      },
      writeClasses$1: function(s) {
        var classes, t1;
        classes = s.join$1(0, " ");
        for (t1 = this._elementIterable, t1 = t1.get$iterator(t1); t1.moveNext$0();)
          J.set$className$x(t1.__internal$_current, classes);
      },
      modify$1: function(_, f) {
        C.JSArray_methods.forEach$1(this._sets, new W._MultiElementCssClassSet_modify_closure(f));
      },
      remove$1: function(_, value) {
        return C.JSArray_methods.fold$2(this._sets, false, new W._MultiElementCssClassSet_remove_closure(value));
      },
      static: {
        _MultiElementCssClassSet__MultiElementCssClassSet: function(elements) {
          return new W._MultiElementCssClassSet(elements, elements.map$1(elements, new W.closure3()).toList$0(0));
        }
      }
    },
    closure3: {
      "^": "Closure:10;",
      call$1: [function(e) {
        return J.get$classes$x(e);
      }, null, null, 2, 0, null, 0, [], "call"]
    },
    _MultiElementCssClassSet_readClasses_closure: {
      "^": "Closure:39;s",
      call$1: function(e) {
        return this.s.addAll$1(0, e.readClasses$0());
      }
    },
    _MultiElementCssClassSet_modify_closure: {
      "^": "Closure:39;f",
      call$1: function(e) {
        return J.modify$1$x(e, this.f);
      }
    },
    _MultiElementCssClassSet_remove_closure: {
      "^": "Closure:43;value",
      call$2: function(changed, e) {
        return J.remove$1$ax(e, this.value) === true || changed === true;
      }
    },
    _ElementCssClassSet: {
      "^": "CssClassSetImpl;_html$_element<",
      readClasses$0: function() {
        var s, t1, t2, _i, trimmed;
        s = P.LinkedHashSet_LinkedHashSet(null, null, null, P.String);
        for (t1 = this._html$_element.className.split(" "), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          trimmed = J.trim$0$s(t1[_i]);
          if (trimmed.length !== 0)
            s.add$1(0, trimmed);
        }
        return s;
      },
      writeClasses$1: function(s) {
        this._html$_element.className = s.join$1(0, " ");
      },
      get$length: function(_) {
        return this._html$_element.classList.length;
      },
      get$isEmpty: function(_) {
        return this._html$_element.classList.length === 0;
      },
      get$isNotEmpty: function(_) {
        return this._html$_element.classList.length !== 0;
      },
      clear$0: function(_) {
        this._html$_element.className = "";
      },
      contains$1: function(_, value) {
        return typeof value === "string" && this._html$_element.classList.contains(value);
      },
      add$1: function(_, value) {
        var list, t1;
        list = this._html$_element.classList;
        t1 = list.contains(value);
        list.add(value);
        return !t1;
      },
      remove$1: function(_, value) {
        var list, removed, t1;
        if (typeof value === "string") {
          list = this._html$_element.classList;
          removed = list.contains(value);
          list.remove(value);
          t1 = removed;
        } else
          t1 = false;
        return t1;
      },
      removeWhere$1: function(_, test) {
        W._ElementCssClassSet__removeWhere(this._html$_element, test, true);
      },
      static: {
        _ElementCssClassSet__removeWhere: function(_element, test, doRemove) {
          var list, i, item;
          list = _element.classList;
          for (i = 0; i < list.length;) {
            item = list.item(i);
            if (true === test.call$1(item))
              list.remove(item);
            else
              ++i;
          }
        }
      }
    },
    EventStreamProvider: {
      "^": "Object;_eventType"
    },
    _EventStream: {
      "^": "Stream;_html$_target,_eventType,_useCapture",
      get$isBroadcast: function() {
        return true;
      },
      listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
        var t1 = new W._EventStreamSubscription(0, this._html$_target, this._eventType, W._wrapZone(onData), false);
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        t1._tryResume$0();
        return t1;
      },
      listen$3$onDone$onError: function(onData, onDone, onError) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
      }
    },
    _ElementEventStreamImpl: {
      "^": "_EventStream;_html$_target,_eventType,_useCapture",
      matches$1: function(_, selector) {
        var t1 = H.setRuntimeTypeInfo(new P._WhereStream(new W._ElementEventStreamImpl_matches_closure(selector), this), [H.getRuntimeTypeArgument(this, "Stream", 0)]);
        return H.setRuntimeTypeInfo(new P._MapStream(new W._ElementEventStreamImpl_matches_closure0(selector), t1), [H.getRuntimeTypeArgument(t1, "Stream", 0), null]);
      }
    },
    _ElementEventStreamImpl_matches_closure: {
      "^": "Closure:1;selector",
      call$1: function($event) {
        return W._matchesWithAncestors($event, this.selector);
      }
    },
    _ElementEventStreamImpl_matches_closure0: {
      "^": "Closure:1;selector",
      call$1: [function(e) {
        J.set$_html$_selector$x(e, this.selector);
        return e;
      }, null, null, 2, 0, null, 0, [], "call"]
    },
    _ElementListEventStreamImpl: {
      "^": "Stream;_targetList,_useCapture,_eventType",
      matches$1: function(_, selector) {
        var t1 = H.setRuntimeTypeInfo(new P._WhereStream(new W._ElementListEventStreamImpl_matches_closure(selector), this), [H.getRuntimeTypeArgument(this, "Stream", 0)]);
        return H.setRuntimeTypeInfo(new P._MapStream(new W._ElementListEventStreamImpl_matches_closure0(selector), t1), [H.getRuntimeTypeArgument(t1, "Stream", 0), null]);
      },
      listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
        var t1, pool, t2, t3;
        t1 = H.getTypeArgumentByIndex(this, 0);
        pool = new W._StreamPool(null, H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [[P.Stream, t1], [P.StreamSubscription, t1]]));
        pool.$builtinTypeInfo = this.$builtinTypeInfo;
        pool._controller = P.StreamController_StreamController$broadcast(pool.get$close(pool), null, true, t1);
        for (t1 = this._targetList, t1 = t1.get$iterator(t1), t2 = this._eventType; t1.moveNext$0();) {
          t3 = new W._EventStream(t1.__internal$_current, t2, false);
          t3.$builtinTypeInfo = this.$builtinTypeInfo;
          pool.add$1(0, t3);
        }
        t1 = pool._controller;
        t1.toString;
        return H.setRuntimeTypeInfo(new P._BroadcastStream(t1), [H.getTypeArgumentByIndex(t1, 0)]).listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
      },
      listen$3$onDone$onError: function(onData, onDone, onError) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
      },
      get$isBroadcast: function() {
        return true;
      }
    },
    _ElementListEventStreamImpl_matches_closure: {
      "^": "Closure:1;selector",
      call$1: function($event) {
        return W._matchesWithAncestors($event, this.selector);
      }
    },
    _ElementListEventStreamImpl_matches_closure0: {
      "^": "Closure:1;selector",
      call$1: [function(e) {
        J.set$_html$_selector$x(e, this.selector);
        return e;
      }, null, null, 2, 0, null, 0, [], "call"]
    },
    _EventStreamSubscription: {
      "^": "StreamSubscription;_pauseCount,_html$_target,_eventType,_html$_onData,_useCapture",
      cancel$0: function(_) {
        if (this._html$_target == null)
          return;
        this._unlisten$0();
        this._html$_target = null;
        this._html$_onData = null;
        return;
      },
      pause$1: function(_, resumeSignal) {
        if (this._html$_target == null)
          return;
        ++this._pauseCount;
        this._unlisten$0();
      },
      pause$0: function($receiver) {
        return this.pause$1($receiver, null);
      },
      get$isPaused: function() {
        return this._pauseCount > 0;
      },
      resume$0: function(_) {
        if (this._html$_target == null || this._pauseCount <= 0)
          return;
        --this._pauseCount;
        this._tryResume$0();
      },
      _tryResume$0: function() {
        var t1 = this._html$_onData;
        if (t1 != null && this._pauseCount <= 0)
          J.addEventListener$3$x(this._html$_target, this._eventType, t1, false);
      },
      _unlisten$0: function() {
        var t1 = this._html$_onData;
        if (t1 != null)
          J.removeEventListener$3$x(this._html$_target, this._eventType, t1, false);
      }
    },
    _StreamPool: {
      "^": "Object;_controller,_subscriptions",
      add$1: function(_, stream) {
        var t1, t2;
        t1 = this._subscriptions;
        if (t1.containsKey$1(0, stream))
          return;
        t2 = this._controller;
        t1.$indexSet(0, stream, stream.listen$3$onDone$onError(t2.get$add(t2), new W._StreamPool_add_closure(this, stream), this._controller.get$addError()));
      },
      remove$1: function(_, stream) {
        var subscription = this._subscriptions.remove$1(0, stream);
        if (subscription != null)
          J.cancel$0$x(subscription);
      },
      close$0: [function(_) {
        var t1, t2;
        for (t1 = this._subscriptions, t2 = t1.get$values(t1), t2 = t2.get$iterator(t2); t2.moveNext$0();)
          J.cancel$0$x(t2.get$current());
        t1.clear$0(0);
        this._controller.close$0(0);
      }, "call$0", "get$close", 0, 0, 7]
    },
    _StreamPool_add_closure: {
      "^": "Closure:4;$this,stream",
      call$0: [function() {
        return this.$this.remove$1(0, this.stream);
      }, null, null, 0, 0, null, "call"]
    },
    _Html5NodeValidator: {
      "^": "Object;uriPolicy<",
      allowsElement$1: function(element) {
        return $.$get$_Html5NodeValidator__allowedElements().contains$1(0, W.Element__safeTagName(element));
      },
      allowsAttribute$3: function(element, attributeName, value) {
        var tagName, t1, validator;
        tagName = W.Element__safeTagName(element);
        t1 = $.$get$_Html5NodeValidator__attributeValidators();
        validator = t1.$index(0, H.S(tagName) + "::" + attributeName);
        if (validator == null)
          validator = t1.$index(0, "*::" + attributeName);
        if (validator == null)
          return false;
        return validator.call$4(element, attributeName, value, this);
      },
      _Html5NodeValidator$1$uriPolicy: function(uriPolicy) {
        var t1, _i;
        t1 = $.$get$_Html5NodeValidator__attributeValidators();
        if (t1.get$isEmpty(t1)) {
          for (_i = 0; _i < 262; ++_i)
            t1.$indexSet(0, C.List_2Zi[_i], W.html__Html5NodeValidator__standardAttributeValidator$closure());
          for (_i = 0; _i < 12; ++_i)
            t1.$indexSet(0, C.List_yrN[_i], W.html__Html5NodeValidator__uriAttributeValidator$closure());
        }
      },
      $isNodeValidator: 1,
      static: {
        _Html5NodeValidator$: function(uriPolicy) {
          var t1 = new W._Html5NodeValidator(new W._SameOriginUriPolicy(W.AnchorElement_AnchorElement(null), window.location));
          t1._Html5NodeValidator$1$uriPolicy(uriPolicy);
          return t1;
        },
        _Html5NodeValidator__standardAttributeValidator: [function(element, attributeName, value, context) {
          return true;
        }, "call$4", "html__Html5NodeValidator__standardAttributeValidator$closure", 8, 0, 33, 9, [], 17, [], 3, [], 18, []],
        _Html5NodeValidator__uriAttributeValidator: [function(element, attributeName, value, context) {
          var t1, t2, t3, t4, t5;
          t1 = context.get$uriPolicy();
          t2 = t1._hiddenAnchor;
          t3 = J.getInterceptor$x(t2);
          t3.set$href(t2, value);
          t4 = t3.get$hostname(t2);
          t1 = t1._loc;
          t5 = t1.hostname;
          if (t4 == null ? t5 == null : t4 === t5) {
            t4 = t3.get$port(t2);
            t5 = t1.port;
            if (t4 == null ? t5 == null : t4 === t5) {
              t4 = t3.get$protocol(t2);
              t1 = t1.protocol;
              t1 = t4 == null ? t1 == null : t4 === t1;
            } else
              t1 = false;
          } else
            t1 = false;
          if (!t1)
            if (t3.get$hostname(t2) === "")
              if (t3.get$port(t2) === "")
                t1 = t3.get$protocol(t2) === ":" || t3.get$protocol(t2) === "";
              else
                t1 = false;
            else
              t1 = false;
          else
            t1 = true;
          return t1;
        }, "call$4", "html__Html5NodeValidator__uriAttributeValidator$closure", 8, 0, 33, 9, [], 17, [], 3, [], 18, []]
      }
    },
    ImmutableListMixin: {
      "^": "Object;",
      get$iterator: function(receiver) {
        return H.setRuntimeTypeInfo(new W.FixedSizeListIterator(receiver, this.get$length(receiver), -1, null), [H.getRuntimeTypeArgument(receiver, "ImmutableListMixin", 0)]);
      },
      add$1: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot add to immutable List."));
      },
      addAll$1: function(receiver, iterable) {
        throw H.wrapException(new P.UnsupportedError("Cannot add to immutable List."));
      },
      remove$1: function(receiver, object) {
        throw H.wrapException(new P.UnsupportedError("Cannot remove from immutable List."));
      },
      removeWhere$1: function(receiver, test) {
        throw H.wrapException(new P.UnsupportedError("Cannot remove from immutable List."));
      },
      setRange$4: function(receiver, start, end, iterable, skipCount) {
        throw H.wrapException(new P.UnsupportedError("Cannot setRange on immutable List."));
      },
      setRange$3: function($receiver, start, end, iterable) {
        return this.setRange$4($receiver, start, end, iterable, 0);
      },
      replaceRange$3: function(receiver, start, end, iterable) {
        throw H.wrapException(new P.UnsupportedError("Cannot modify an immutable List."));
      },
      fillRange$3: function(receiver, start, end, fillValue) {
        throw H.wrapException(new P.UnsupportedError("Cannot modify an immutable List."));
      },
      $isList: 1,
      $asList: null,
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    NodeValidatorBuilder: {
      "^": "Object;_validators",
      add$1: function(_, validator) {
        this._validators.push(validator);
      },
      allowsElement$1: function(element) {
        return C.JSArray_methods.any$1(this._validators, new W.NodeValidatorBuilder_allowsElement_closure(element));
      },
      allowsAttribute$3: function(element, attributeName, value) {
        return C.JSArray_methods.any$1(this._validators, new W.NodeValidatorBuilder_allowsAttribute_closure(element, attributeName, value));
      }
    },
    NodeValidatorBuilder_allowsElement_closure: {
      "^": "Closure:1;element",
      call$1: function(v) {
        return v.allowsElement$1(this.element);
      }
    },
    NodeValidatorBuilder_allowsAttribute_closure: {
      "^": "Closure:1;element,attributeName,value",
      call$1: function(v) {
        return v.allowsAttribute$3(this.element, this.attributeName, this.value);
      }
    },
    _SimpleNodeValidator: {
      "^": "Object;uriPolicy<",
      allowsElement$1: function(element) {
        return this.allowedElements.contains$1(0, W.Element__safeTagName(element));
      },
      allowsAttribute$3: ["super$_SimpleNodeValidator$allowsAttribute", function(element, attributeName, value) {
        var tagName, t1;
        tagName = W.Element__safeTagName(element);
        t1 = this.allowedUriAttributes;
        if (t1.contains$1(0, H.S(tagName) + "::" + attributeName))
          return this.uriPolicy.allowsUri$1(value);
        else if (t1.contains$1(0, "*::" + attributeName))
          return this.uriPolicy.allowsUri$1(value);
        else {
          t1 = this.allowedAttributes;
          if (t1.contains$1(0, H.S(tagName) + "::" + attributeName))
            return true;
          else if (t1.contains$1(0, "*::" + attributeName))
            return true;
          else if (t1.contains$1(0, H.S(tagName) + "::*"))
            return true;
          else if (t1.contains$1(0, "*::*"))
            return true;
        }
        return false;
      }],
      _SimpleNodeValidator$4$allowedAttributes$allowedElements$allowedUriAttributes: function(uriPolicy, allowedAttributes, allowedElements, allowedUriAttributes) {
        var legalAttributes, extraUriAttributes, t1;
        this.allowedElements.addAll$1(0, allowedElements);
        legalAttributes = allowedAttributes.where$1(0, new W._SimpleNodeValidator_closure());
        extraUriAttributes = allowedAttributes.where$1(0, new W._SimpleNodeValidator_closure0());
        this.allowedAttributes.addAll$1(0, legalAttributes);
        t1 = this.allowedUriAttributes;
        t1.addAll$1(0, C.List_empty);
        t1.addAll$1(0, extraUriAttributes);
      }
    },
    _SimpleNodeValidator_closure: {
      "^": "Closure:1;",
      call$1: function(x) {
        return !C.JSArray_methods.contains$1(C.List_yrN, x);
      }
    },
    _SimpleNodeValidator_closure0: {
      "^": "Closure:1;",
      call$1: function(x) {
        return C.JSArray_methods.contains$1(C.List_yrN, x);
      }
    },
    _TemplatingNodeValidator: {
      "^": "_SimpleNodeValidator;_templateAttrs,allowedElements,allowedAttributes,allowedUriAttributes,uriPolicy",
      allowsAttribute$3: function(element, attributeName, value) {
        if (this.super$_SimpleNodeValidator$allowsAttribute(element, attributeName, value))
          return true;
        if (attributeName === "template" && value === "")
          return true;
        if (J.get$attributes$x(element)._html$_element.getAttribute("template") === "")
          return this._templateAttrs.contains$1(0, attributeName);
        return false;
      },
      static: {
        _TemplatingNodeValidator$: function() {
          var t1, t2;
          t1 = P.LinkedHashSet_LinkedHashSet$from(C.List_wSV, P.String);
          t2 = H.setRuntimeTypeInfo(new H.MappedListIterable(C.List_wSV, new W._TemplatingNodeValidator_closure()), [null, null]);
          t1 = new W._TemplatingNodeValidator(t1, P.LinkedHashSet_LinkedHashSet(null, null, null, P.String), P.LinkedHashSet_LinkedHashSet(null, null, null, P.String), P.LinkedHashSet_LinkedHashSet(null, null, null, P.String), null);
          t1._SimpleNodeValidator$4$allowedAttributes$allowedElements$allowedUriAttributes(null, t2, ["TEMPLATE"], null);
          return t1;
        }
      }
    },
    _TemplatingNodeValidator_closure: {
      "^": "Closure:1;",
      call$1: [function(attr) {
        return "TEMPLATE::" + H.S(attr);
      }, null, null, 2, 0, null, 32, [], "call"]
    },
    _SvgNodeValidator: {
      "^": "Object;",
      allowsElement$1: function(element) {
        var t1 = J.getInterceptor(element);
        if (!!t1.$isScriptElement)
          return false;
        t1 = !!t1.$isSvgElement;
        if (t1 && W.Element__safeTagName(element) === "foreignObject")
          return false;
        if (t1)
          return true;
        return false;
      },
      allowsAttribute$3: function(element, attributeName, value) {
        if (attributeName === "is" || C.JSString_methods.startsWith$1(attributeName, "on"))
          return false;
        return this.allowsElement$1(element);
      }
    },
    FixedSizeListIterator: {
      "^": "Object;_array,_length,_position,_current",
      moveNext$0: function() {
        var nextPosition, t1;
        nextPosition = this._position + 1;
        t1 = this._length;
        if (nextPosition < t1) {
          this._current = J.$index$asx(this._array, nextPosition);
          this._position = nextPosition;
          return true;
        }
        this._current = null;
        this._position = t1;
        return false;
      },
      get$current: function() {
        return this._current;
      }
    },
    _DOMWindowCrossFrame: {
      "^": "Object;_window",
      get$location: function(_) {
        return W._LocationCrossFrame__createSafe(this._window.location);
      },
      get$parent: function(_) {
        return W._DOMWindowCrossFrame__createSafe(this._window.parent);
      },
      addEventListener$3: function(_, type, listener, useCapture) {
        return H.throwExpression(new P.UnsupportedError("You can only attach EventListeners to your own window."));
      },
      removeEventListener$3: function(_, type, listener, useCapture) {
        return H.throwExpression(new P.UnsupportedError("You can only attach EventListeners to your own window."));
      },
      $isEventTarget: 1,
      $isInterceptor: 1,
      static: {
        _DOMWindowCrossFrame__createSafe: function(w) {
          if (w === window)
            return w;
          else
            return new W._DOMWindowCrossFrame(w);
        }
      }
    },
    _LocationCrossFrame: {
      "^": "Object;_location",
      set$href: function(_, val) {
        this._location.href = val;
        return;
      },
      static: {
        _LocationCrossFrame__createSafe: function($location) {
          if ($location === window.location)
            return $location;
          else
            return new W._LocationCrossFrame($location);
        }
      }
    },
    NodeValidator: {
      "^": "Object;"
    },
    _TrustedHtmlTreeSanitizer: {
      "^": "Object;",
      sanitizeTree$1: function(node) {
      }
    },
    _SameOriginUriPolicy: {
      "^": "Object;_hiddenAnchor,_loc"
    },
    _ValidatingTreeSanitizer: {
      "^": "Object;validator",
      sanitizeTree$1: function(node) {
        new W._ValidatingTreeSanitizer_sanitizeTree_walk(this).call$2(node, null);
      },
      _removeNode$2: function(node, $parent) {
        var t1;
        if ($parent == null) {
          t1 = node.parentNode;
          if (t1 != null)
            t1.removeChild(node);
        } else
          $parent.removeChild(node);
      },
      _sanitizeUntrustedElement$2: function(element, $parent) {
        var corrupted, attrs, isAttr, corruptedTest1, elementText, elementTagName, exception, t1;
        corrupted = true;
        attrs = null;
        isAttr = null;
        try {
          attrs = J.get$attributes$x(element);
          isAttr = attrs.get$_html$_element().getAttribute("is");
          corruptedTest1 = function(element) {
            if (!(element.attributes instanceof NamedNodeMap))
              return true;
            var childNodes = element.childNodes;
            if (element.lastChild && element.lastChild !== childNodes[childNodes.length - 1])
              return true;
            if (element.children)
              if (!(element.children instanceof HTMLCollection || element.children instanceof NodeList))
                return true;
            var length = 0;
            if (element.children)
              length = element.children.length;
            for (var i = 0; i < length; i++) {
              var child = element.children[i];
              if (child.id == 'attributes' || child.name == 'attributes' || child.id == 'lastChild' || child.name == 'lastChild' || child.id == 'children' || child.name == 'children')
                return true;
            }
            return false;
          }(element);
          corrupted = corruptedTest1 === true ? true : !(element.attributes instanceof NamedNodeMap);
        } catch (exception) {
          H.unwrapException(exception);
        }
        elementText = "element unprintable";
        try {
          elementText = J.toString$0$(element);
        } catch (exception) {
          H.unwrapException(exception);
        }
        try {
          elementTagName = W.Element__safeTagName(element);
          this._sanitizeElement$7(element, $parent, corrupted, elementText, elementTagName, attrs, isAttr);
        } catch (exception) {
          if (H.unwrapException(exception) instanceof P.ArgumentError)
            throw exception;
          else {
            this._removeNode$2(element, $parent);
            window;
            t1 = "Removing corrupted element " + H.S(elementText);
            if (typeof console != "undefined")
              console.warn(t1);
          }
        }
      },
      _sanitizeElement$7: function(element, $parent, corrupted, text, tag, attrs, isAttr) {
        var t1, keys, i, $name, t2;
        if (corrupted) {
          this._removeNode$2(element, $parent);
          window;
          t1 = "Removing element due to corrupted attributes on <" + text + ">";
          if (typeof console != "undefined")
            console.warn(t1);
          return;
        }
        if (!this.validator.allowsElement$1(element)) {
          this._removeNode$2(element, $parent);
          window;
          t1 = "Removing disallowed element <" + H.S(tag) + "> from " + J.toString$0$($parent);
          if (typeof console != "undefined")
            console.warn(t1);
          return;
        }
        if (isAttr != null)
          if (!this.validator.allowsAttribute$3(element, "is", isAttr)) {
            this._removeNode$2(element, $parent);
            window;
            t1 = "Removing disallowed type extension <" + H.S(tag) + ' is="' + isAttr + '">';
            if (typeof console != "undefined")
              console.warn(t1);
            return;
          }
        t1 = attrs.get$keys(attrs);
        keys = H.setRuntimeTypeInfo(t1.slice(), [H.getTypeArgumentByIndex(t1, 0)]);
        for (i = attrs.get$keys(attrs).length - 1, t1 = attrs._html$_element; i >= 0; --i) {
          if (i >= keys.length)
            return H.ioore(keys, i);
          $name = keys[i];
          if (!this.validator.allowsAttribute$3(element, J.toLowerCase$0$s($name), t1.getAttribute($name))) {
            window;
            t2 = "Removing disallowed attribute <" + H.S(tag) + " " + H.S($name) + '="' + H.S(t1.getAttribute($name)) + '">';
            if (typeof console != "undefined")
              console.warn(t2);
            t1.getAttribute($name);
            t1.removeAttribute($name);
          }
        }
        if (!!J.getInterceptor(element).$isTemplateElement)
          this.sanitizeTree$1(element.content);
      }
    },
    _ValidatingTreeSanitizer_sanitizeTree_walk: {
      "^": "Closure:44;$this",
      call$2: function(node, $parent) {
        var child, nextChild, t1, t2, exception;
        t1 = this.$this;
        t2 = node;
        switch (J.get$nodeType$x(t2)) {
          case 1:
            t1._sanitizeUntrustedElement$2(t2, $parent);
            break;
          case 8:
          case 11:
          case 3:
          case 4:
            break;
          default:
            t1._removeNode$2(t2, $parent);
        }
        child = J.get$lastChild$x(node);
        for (; null != child;) {
          nextChild = null;
          try {
            nextChild = J.get$previousNode$x(child);
          } catch (exception) {
            H.unwrapException(exception);
            t1 = child;
            t2 = node;
            if (t2 == null) {
              t2 = J.getInterceptor$x(t1);
              if (t2.get$parentNode(t1) != null) {
                t2.get$parentNode(t1);
                t2.get$parentNode(t1).removeChild(t1);
              }
            } else
              J._removeChild$1$x(t2, t1);
            child = null;
            nextChild = J.get$lastChild$x(node);
          }
          if (child != null)
            this.call$2(child, node);
          child = nextChild;
        }
      }
    }
  }], ["html_common", "dart:html_common",, P, {
    "^": "",
    convertNativeToDart_Dictionary: function(object) {
      var dict, keys, t1, _i, key;
      if (object == null)
        return;
      dict = P.LinkedHashMap__makeEmpty();
      keys = Object.getOwnPropertyNames(object);
      for (t1 = keys.length, _i = 0; _i < keys.length; keys.length === t1 || (0, H.throwConcurrentModificationError)(keys), ++_i) {
        key = keys[_i];
        dict.$indexSet(0, key, object[key]);
      }
      return dict;
    },
    convertNativePromiseToDartFuture: function(promise) {
      var completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null])), [null]);
      promise.then(H.convertDartClosureToJS(new P.convertNativePromiseToDartFuture_closure(completer), 1))["catch"](H.convertDartClosureToJS(new P.convertNativePromiseToDartFuture_closure0(completer), 1));
      return completer.future;
    },
    Device_isOpera: function() {
      var t1 = $.Device__isOpera;
      if (t1 == null) {
        t1 = J.contains$2$asx(window.navigator.userAgent, "Opera", 0);
        $.Device__isOpera = t1;
      }
      return t1;
    },
    Device_isWebKit: function() {
      var t1 = $.Device__isWebKit;
      if (t1 == null) {
        t1 = P.Device_isOpera() !== true && J.contains$2$asx(window.navigator.userAgent, "WebKit", 0);
        $.Device__isWebKit = t1;
      }
      return t1;
    },
    Device_cssPrefix: function() {
      var prefix, t1;
      prefix = $.Device__cachedCssPrefix;
      if (prefix != null)
        return prefix;
      t1 = $.Device__isFirefox;
      if (t1 == null) {
        t1 = J.contains$2$asx(window.navigator.userAgent, "Firefox", 0);
        $.Device__isFirefox = t1;
      }
      if (t1 === true)
        prefix = "-moz-";
      else {
        t1 = $.Device__isIE;
        if (t1 == null) {
          t1 = P.Device_isOpera() !== true && J.contains$2$asx(window.navigator.userAgent, "Trident/", 0);
          $.Device__isIE = t1;
        }
        if (t1 === true)
          prefix = "-ms-";
        else
          prefix = P.Device_isOpera() === true ? "-o-" : "-webkit-";
      }
      $.Device__cachedCssPrefix = prefix;
      return prefix;
    },
    _StructuredClone: {
      "^": "Object;",
      findSlot$1: function(value) {
        var t1, $length, i;
        t1 = this.values;
        $length = t1.length;
        for (i = 0; i < $length; ++i)
          if (t1[i] === value)
            return i;
        t1.push(value);
        this.copies.push(null);
        return $length;
      },
      walk$1: function(e) {
        var t1, t2, slot, t3, t4, copy;
        t1 = {};
        if (e == null)
          return e;
        if (typeof e === "boolean")
          return e;
        if (typeof e === "number")
          return e;
        if (typeof e === "string")
          return e;
        t2 = J.getInterceptor(e);
        if (!!t2.$isDateTime)
          return new Date(e._value);
        if (!!t2.$isRegExp)
          throw H.wrapException(new P.UnimplementedError("structured clone of RegExp"));
        if (!!t2.$isFile)
          return e;
        if (!!t2.$isBlob)
          return e;
        if (!!t2.$isFileList)
          return e;
        if (!!t2.$isImageData)
          return e;
        if (!!t2.$isNativeByteBuffer || !!t2.$isNativeTypedData)
          return e;
        if (!!t2.$isMap) {
          slot = this.findSlot$1(e);
          t3 = this.copies;
          t4 = t3.length;
          if (slot >= t4)
            return H.ioore(t3, slot);
          copy = t3[slot];
          t1.copy = copy;
          if (copy != null)
            return copy;
          copy = {};
          t1.copy = copy;
          if (slot >= t4)
            return H.ioore(t3, slot);
          t3[slot] = copy;
          t2.forEach$1(e, new P._StructuredClone_walk_closure(t1, this));
          return t1.copy;
        }
        if (!!t2.$isList) {
          slot = this.findSlot$1(e);
          t1 = this.copies;
          if (slot >= t1.length)
            return H.ioore(t1, slot);
          copy = t1[slot];
          if (copy != null)
            return copy;
          return this.copyList$2(e, slot);
        }
        throw H.wrapException(new P.UnimplementedError("structured clone of other type"));
      },
      copyList$2: function(e, slot) {
        var t1, $length, copy, t2, i;
        t1 = J.getInterceptor$asx(e);
        $length = t1.get$length(e);
        copy = new Array($length);
        t2 = this.copies;
        if (slot >= t2.length)
          return H.ioore(t2, slot);
        t2[slot] = copy;
        if (typeof $length !== "number")
          return H.iae($length);
        i = 0;
        for (; i < $length; ++i) {
          t2 = this.walk$1(t1.$index(e, i));
          if (i >= copy.length)
            return H.ioore(copy, i);
          copy[i] = t2;
        }
        return copy;
      }
    },
    _StructuredClone_walk_closure: {
      "^": "Closure:9;_box_0,$this",
      call$2: function(key, value) {
        this._box_0.copy[key] = this.$this.walk$1(value);
      }
    },
    _AcceptStructuredClone: {
      "^": "Object;",
      findSlot$1: function(value) {
        var t1, $length, i, t2;
        t1 = this.values;
        $length = t1.length;
        for (i = 0; i < $length; ++i) {
          t2 = t1[i];
          if (t2 == null ? value == null : t2 === value)
            return i;
        }
        t1.push(value);
        this.copies.push(null);
        return $length;
      },
      walk$1: function(e) {
        var t1, millisSinceEpoch, proto, slot, t2, t3, copy, $length, i;
        t1 = {};
        if (e == null)
          return e;
        if (typeof e === "boolean")
          return e;
        if (typeof e === "number")
          return e;
        if (typeof e === "string")
          return e;
        if (e instanceof Date) {
          millisSinceEpoch = e.getTime();
          t1 = new P.DateTime(millisSinceEpoch, true);
          t1.DateTime$_withValue$2$isUtc(millisSinceEpoch, true);
          return t1;
        }
        if (e instanceof RegExp)
          throw H.wrapException(new P.UnimplementedError("structured clone of RegExp"));
        if (typeof Promise != "undefined" && e instanceof Promise)
          return P.convertNativePromiseToDartFuture(e);
        proto = Object.getPrototypeOf(e);
        if (proto === Object.prototype || proto === null) {
          slot = this.findSlot$1(e);
          t2 = this.copies;
          t3 = t2.length;
          if (slot >= t3)
            return H.ioore(t2, slot);
          copy = t2[slot];
          t1.copy = copy;
          if (copy != null)
            return copy;
          copy = P.LinkedHashMap__makeEmpty();
          t1.copy = copy;
          if (slot >= t3)
            return H.ioore(t2, slot);
          t2[slot] = copy;
          this.forEachJsField$2(e, new P._AcceptStructuredClone_walk_closure(t1, this));
          return t1.copy;
        }
        if (e instanceof Array) {
          slot = this.findSlot$1(e);
          t1 = this.copies;
          if (slot >= t1.length)
            return H.ioore(t1, slot);
          copy = t1[slot];
          if (copy != null)
            return copy;
          t2 = J.getInterceptor$asx(e);
          $length = t2.get$length(e);
          copy = this.mustCopy ? new Array($length) : e;
          if (slot >= t1.length)
            return H.ioore(t1, slot);
          t1[slot] = copy;
          if (typeof $length !== "number")
            return H.iae($length);
          t1 = J.getInterceptor$ax(copy);
          i = 0;
          for (; i < $length; ++i)
            t1.$indexSet(copy, i, this.walk$1(t2.$index(e, i)));
          return copy;
        }
        return e;
      }
    },
    _AcceptStructuredClone_walk_closure: {
      "^": "Closure:9;_box_0,$this",
      call$2: function(key, value) {
        var t1, t2;
        t1 = this._box_0.copy;
        t2 = this.$this.walk$1(value);
        J.$indexSet$ax(t1, key, t2);
        return t2;
      }
    },
    _StructuredCloneDart2Js: {
      "^": "_StructuredClone;values,copies"
    },
    _AcceptStructuredCloneDart2Js: {
      "^": "_AcceptStructuredClone;values,copies,mustCopy",
      forEachJsField$2: function(object, action) {
        var t1, t2, _i, key;
        for (t1 = Object.keys(object), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          key = t1[_i];
          action.call$2(key, object[key]);
        }
      }
    },
    convertNativePromiseToDartFuture_closure: {
      "^": "Closure:1;completer",
      call$1: [function(result) {
        return this.completer.complete$1(0, result);
      }, null, null, 2, 0, null, 6, [], "call"]
    },
    convertNativePromiseToDartFuture_closure0: {
      "^": "Closure:1;completer",
      call$1: [function(result) {
        return this.completer.completeError$1(result);
      }, null, null, 2, 0, null, 6, [], "call"]
    },
    CssClassSetImpl: {
      "^": "Object;",
      _validateToken$1: function(value) {
        if ($.$get$CssClassSetImpl__validTokenRE()._nativeRegExp.test(H.checkString(value)))
          return value;
        throw H.wrapException(P.ArgumentError$value(value, "value", "Not a valid class token"));
      },
      toString$0: function(_) {
        return this.readClasses$0().join$1(0, " ");
      },
      get$iterator: function(_) {
        var t1 = this.readClasses$0();
        t1 = H.setRuntimeTypeInfo(new P._LinkedHashSetIterator(t1, t1._collection$_modifications, null, null), [null]);
        t1._cell = t1._set._collection$_first;
        return t1;
      },
      forEach$1: function(_, f) {
        this.readClasses$0().forEach$1(0, f);
      },
      map$1: function(_, f) {
        var t1 = this.readClasses$0();
        return H.setRuntimeTypeInfo(new H.EfficientLengthMappedIterable(t1, f), [H.getTypeArgumentByIndex(t1, 0), null]);
      },
      where$1: function(_, f) {
        var t1 = this.readClasses$0();
        return H.setRuntimeTypeInfo(new H.WhereIterable(t1, f), [H.getTypeArgumentByIndex(t1, 0)]);
      },
      get$isEmpty: function(_) {
        return this.readClasses$0()._collection$_length === 0;
      },
      get$isNotEmpty: function(_) {
        return this.readClasses$0()._collection$_length !== 0;
      },
      get$length: function(_) {
        return this.readClasses$0()._collection$_length;
      },
      contains$1: function(_, value) {
        if (typeof value !== "string")
          return false;
        this._validateToken$1(value);
        return this.readClasses$0().contains$1(0, value);
      },
      lookup$1: function(value) {
        return this.contains$1(0, value) ? value : null;
      },
      add$1: function(_, value) {
        this._validateToken$1(value);
        return this.modify$1(0, new P.CssClassSetImpl_add_closure(value));
      },
      remove$1: function(_, value) {
        var s, result;
        this._validateToken$1(value);
        if (typeof value !== "string")
          return false;
        s = this.readClasses$0();
        result = s.remove$1(0, value);
        this.writeClasses$1(s);
        return result;
      },
      removeWhere$1: function(_, test) {
        this.modify$1(0, new P.CssClassSetImpl_removeWhere_closure(test));
      },
      get$last: function(_) {
        var t1 = this.readClasses$0();
        return t1.get$last(t1);
      },
      toList$1$growable: function(_, growable) {
        return this.readClasses$0().toList$1$growable(0, true);
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      firstWhere$2$orElse: function(_, test, orElse) {
        return this.readClasses$0().firstWhere$2$orElse(0, test, orElse);
      },
      singleWhere$1: function(_, test) {
        return this.readClasses$0().singleWhere$1(0, test);
      },
      elementAt$1: function(_, index) {
        return this.readClasses$0().elementAt$1(0, index);
      },
      clear$0: function(_) {
        this.modify$1(0, new P.CssClassSetImpl_clear_closure());
      },
      modify$1: function(_, f) {
        var s, ret;
        s = this.readClasses$0();
        ret = f.call$1(s);
        this.writeClasses$1(s);
        return ret;
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.String];
      }
    },
    CssClassSetImpl_add_closure: {
      "^": "Closure:1;value",
      call$1: function(s) {
        return s.add$1(0, this.value);
      }
    },
    CssClassSetImpl_removeWhere_closure: {
      "^": "Closure:1;test",
      call$1: function(s) {
        s._filterWhere$2(this.test, true);
        return;
      }
    },
    CssClassSetImpl_clear_closure: {
      "^": "Closure:1;",
      call$1: function(s) {
        return s.clear$0(0);
      }
    },
    FilteredElementList: {
      "^": "ListBase;_node,_childNodes",
      get$_html_common$_iterable: function() {
        var t1 = this._childNodes;
        t1 = t1.where$1(t1, new P.FilteredElementList__iterable_closure());
        return H.MappedIterable_MappedIterable(t1, new P.FilteredElementList__iterable_closure0(), H.getRuntimeTypeArgument(t1, "Iterable", 0), null);
      },
      forEach$1: function(_, f) {
        C.JSArray_methods.forEach$1(P.List_List$from(this.get$_html_common$_iterable(), false, W.Element), f);
      },
      $indexSet: function(_, index, value) {
        var t1 = this.get$_html_common$_iterable();
        J.replaceWith$1$x(t1._f.call$1(J.elementAt$1$ax(t1._iterable, index)), value);
      },
      set$length: function(_, newLength) {
        var len, t1;
        len = J.get$length$asx(this.get$_html_common$_iterable()._iterable);
        t1 = J.getInterceptor$n(newLength);
        if (t1.$ge(newLength, len))
          return;
        else if (t1.$lt(newLength, 0))
          throw H.wrapException(P.ArgumentError$("Invalid list length"));
        this.removeRange$2(0, newLength, len);
      },
      add$1: function(_, value) {
        this._childNodes._this.appendChild(value);
      },
      addAll$1: function(_, iterable) {
        var t1, t2;
        for (t1 = J.get$iterator$ax(iterable), t2 = this._childNodes._this; t1.moveNext$0();)
          t2.appendChild(t1.__interceptors$_current);
      },
      contains$1: function(_, needle) {
        if (!J.getInterceptor(needle).$isElement)
          return false;
        return needle.parentNode === this._node;
      },
      setRange$4: function(_, start, end, iterable, skipCount) {
        throw H.wrapException(new P.UnsupportedError("Cannot setRange on filtered list"));
      },
      setRange$3: function($receiver, start, end, iterable) {
        return this.setRange$4($receiver, start, end, iterable, 0);
      },
      fillRange$3: function(_, start, end, fillValue) {
        throw H.wrapException(new P.UnsupportedError("Cannot fillRange on filtered list"));
      },
      replaceRange$3: function(_, start, end, iterable) {
        throw H.wrapException(new P.UnsupportedError("Cannot replaceRange on filtered list"));
      },
      removeRange$2: function(_, start, end) {
        var t1 = this.get$_html_common$_iterable();
        t1 = H.SkipIterable_SkipIterable(t1, start, H.getRuntimeTypeArgument(t1, "Iterable", 0));
        C.JSArray_methods.forEach$1(P.List_List$from(H.TakeIterable_TakeIterable(t1, J.$sub$n(end, start), H.getRuntimeTypeArgument(t1, "Iterable", 0)), true, null), new P.FilteredElementList_removeRange_closure());
      },
      clear$0: function(_) {
        J._clearChildren$0$x(this._childNodes._this);
      },
      remove$1: function(_, element) {
        var t1 = J.getInterceptor(element);
        if (!t1.$isElement)
          return false;
        if (this.contains$1(0, element)) {
          t1.remove$0(element);
          return true;
        } else
          return false;
      },
      get$length: function(_) {
        return J.get$length$asx(this.get$_html_common$_iterable()._iterable);
      },
      $index: function(_, index) {
        var t1 = this.get$_html_common$_iterable();
        return t1._f.call$1(J.elementAt$1$ax(t1._iterable, index));
      },
      get$iterator: function(_) {
        var t1 = P.List_List$from(this.get$_html_common$_iterable(), false, W.Element);
        return H.setRuntimeTypeInfo(new J.ArrayIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]);
      },
      $asListBase: function() {
        return [W.Element];
      },
      $asObject_ListMixin: function() {
        return [W.Element];
      },
      $asList: function() {
        return [W.Element];
      },
      $asIterable: function() {
        return [W.Element];
      }
    },
    FilteredElementList__iterable_closure: {
      "^": "Closure:1;",
      call$1: function(n) {
        return !!J.getInterceptor(n).$isElement;
      }
    },
    FilteredElementList__iterable_closure0: {
      "^": "Closure:1;",
      call$1: [function(n) {
        return H.interceptedTypeCast(n, "$isElement");
      }, null, null, 2, 0, null, 19, [], "call"]
    },
    FilteredElementList_removeRange_closure: {
      "^": "Closure:1;",
      call$1: function(el) {
        return J.remove$0$ax(el);
      }
    }
  }], ["dart.dom.indexed_db", "dart:indexed_db",, P, {
    "^": "",
    _completeRequest: function(request) {
      var completer, t1;
      completer = H.setRuntimeTypeInfo(new P._SyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null])), [null]);
      request.toString;
      t1 = H.setRuntimeTypeInfo(new W._EventStream(request, "success", false), [H.getTypeArgumentByIndex(C.EventStreamProvider_success, 0)]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new P._completeRequest_closure(request, completer)), false), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = H.setRuntimeTypeInfo(new W._EventStream(request, "error", false), [H.getTypeArgumentByIndex(C.EventStreamProvider_error, 0)]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(completer.get$completeError()), false), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      return completer.future;
    },
    Cursor: {
      "^": "Interceptor;",
      delete$0: [function(receiver) {
        var e, stacktrace, t1, exception;
        try {
          t1 = P._completeRequest(receiver.delete());
          return t1;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          stacktrace = H.getTraceFromException(exception);
          return P.Future_Future$error(e, stacktrace, null);
        }
      }, "call$0", "get$$delete", 0, 0, 11],
      next$1: [function(receiver, key) {
        receiver.continue(key);
      }, function($receiver) {
        return this.next$1($receiver, null);
      }, "next$0", "call$1", "call$0", "get$next", 0, 2, 45, 1],
      "%": ";IDBCursor"
    },
    CursorWithValue: {
      "^": "Cursor;",
      get$value: function(receiver) {
        var t1, t2;
        t1 = receiver.value;
        t2 = new P._AcceptStructuredCloneDart2Js([], [], false);
        t2.mustCopy = false;
        return t2.walk$1(t1);
      },
      "%": "IDBCursorWithValue"
    },
    Database: {
      "^": "EventTarget;name=",
      $isDatabase: 1,
      $isObject: 1,
      "%": "IDBDatabase"
    },
    IdbFactory: {
      "^": "Interceptor;",
      open$4$onBlocked$onUpgradeNeeded$version: [function(receiver, $name, onBlocked, onUpgradeNeeded, version) {
        var request, e, stacktrace, t1, exception;
        if (version == null !== (onUpgradeNeeded == null))
          return P.Future_Future$error(new P.ArgumentError(false, null, null, "version and onUpgradeNeeded must be specified together"), null, null);
        try {
          request = null;
          if (version != null)
            request = receiver.open($name, version);
          else
            request = receiver.open($name);
          if (onUpgradeNeeded != null) {
            t1 = J.get$onUpgradeNeeded$x(request);
            H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(onUpgradeNeeded), false), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
          }
          if (onBlocked != null) {
            t1 = J.get$onBlocked$x(request);
            H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(onBlocked), false), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
          }
          t1 = P._completeRequest(request);
          return t1;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          stacktrace = H.getTraceFromException(exception);
          return P.Future_Future$error(e, stacktrace, null);
        }
      }, function($receiver, $name) {
        return this.open$4$onBlocked$onUpgradeNeeded$version($receiver, $name, null, null, null);
      }, "open$1", "call$4$onBlocked$onUpgradeNeeded$version", "call$1", "get$open", 2, 7, 46, 1, 1, 1],
      "%": "IDBFactory"
    },
    _completeRequest_closure: {
      "^": "Closure:1;request,completer",
      call$1: [function(e) {
        var t1, t2;
        t1 = this.request.result;
        t2 = new P._AcceptStructuredCloneDart2Js([], [], false);
        t2.mustCopy = false;
        this.completer.complete$1(0, t2.walk$1(t1));
      }, null, null, 2, 0, null, 0, [], "call"]
    },
    Index: {
      "^": "Interceptor;name=",
      $isIndex: 1,
      $isObject: 1,
      "%": "IDBIndex"
    },
    KeyRange: {
      "^": "Interceptor;",
      $isKeyRange: 1,
      "%": "IDBKeyRange"
    },
    ObjectStore: {
      "^": "Interceptor;name=",
      add$2: function(receiver, value, key) {
        var request, e, stacktrace, t1, exception;
        try {
          request = null;
          if (key != null)
            request = this._indexed_db$_add$2(receiver, value, key);
          else
            request = this._indexed_db$_add$1(receiver, value);
          t1 = P._completeRequest(request);
          return t1;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          stacktrace = H.getTraceFromException(exception);
          return P.Future_Future$error(e, stacktrace, null);
        }
      },
      add$1: function($receiver, value) {
        return this.add$2($receiver, value, null);
      },
      clear$0: function(receiver) {
        var e, stacktrace, t1, exception;
        try {
          t1 = P._completeRequest(receiver.clear());
          return t1;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          stacktrace = H.getTraceFromException(exception);
          return P.Future_Future$error(e, stacktrace, null);
        }
      },
      delete$1: [function(receiver, key_OR_keyRange) {
        var e, stacktrace, t1, exception;
        try {
          t1 = P._completeRequest(receiver.delete(key_OR_keyRange));
          return t1;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          stacktrace = H.getTraceFromException(exception);
          return P.Future_Future$error(e, stacktrace, null);
        }
      }, "call$1", "get$$delete", 2, 0, 6],
      _indexed_db$_add$2: function(receiver, value, key) {
        return receiver.add(new P._StructuredCloneDart2Js([], []).walk$1(value));
      },
      _indexed_db$_add$1: function($receiver, value) {
        return this._indexed_db$_add$2($receiver, value, null);
      },
      "%": "IDBObjectStore"
    },
    OpenDBRequest: {
      "^": "Request;",
      get$onBlocked: function(receiver) {
        return H.setRuntimeTypeInfo(new W._EventStream(receiver, "blocked", false), [H.getTypeArgumentByIndex(C.EventStreamProvider_blocked, 0)]);
      },
      get$onUpgradeNeeded: function(receiver) {
        return H.setRuntimeTypeInfo(new W._EventStream(receiver, "upgradeneeded", false), [H.getTypeArgumentByIndex(C.EventStreamProvider_upgradeneeded, 0)]);
      },
      "%": "IDBOpenDBRequest|IDBVersionChangeRequest"
    },
    Request: {
      "^": "EventTarget;error=",
      get$result: function(receiver) {
        var t1, t2;
        t1 = receiver.result;
        t2 = new P._AcceptStructuredCloneDart2Js([], [], false);
        t2.mustCopy = false;
        return t2.walk$1(t1);
      },
      "%": ";IDBRequest"
    },
    Transaction: {
      "^": "EventTarget;error=,mode=",
      "%": "IDBTransaction"
    },
    VersionChangeEvent: {
      "^": "Event;",
      $isEvent: 1,
      $isObject: 1,
      "%": "IDBVersionChangeEvent"
    }
  }], ["dart.js", "dart:js",, P, {
    "^": "",
    _callDartFunction: [function(callback, captureThis, $self, $arguments) {
      var arguments0, dartArgs;
      if (captureThis === true) {
        arguments0 = [$self];
        C.JSArray_methods.addAll$1(arguments0, $arguments);
        $arguments = arguments0;
      }
      dartArgs = P.List_List$from(J.map$1$ax($arguments, P.js___convertToDart$closure()), true, null);
      return P._convertToJS(H.Primitives_applyFunctionWithPositionalArguments(callback, dartArgs));
    }, null, null, 8, 0, null, 52, [], 35, [], 36, [], 37, []],
    _defineProperty: function(o, $name, value) {
      var exception;
      try {
        if (Object.isExtensible(o) && !Object.prototype.hasOwnProperty.call(o, $name)) {
          Object.defineProperty(o, $name, {value: value});
          return true;
        }
      } catch (exception) {
        H.unwrapException(exception);
      }
      return false;
    },
    _getOwnProperty: function(o, $name) {
      if (Object.prototype.hasOwnProperty.call(o, $name))
        return o[$name];
      return;
    },
    _convertToJS: [function(o) {
      var t1;
      if (o == null || typeof o === "string" || typeof o === "number" || typeof o === "boolean")
        return o;
      t1 = J.getInterceptor(o);
      if (!!t1.$isJsObject)
        return o._js$_jsObject;
      if (!!t1.$isBlob || !!t1.$isEvent || !!t1.$isKeyRange || !!t1.$isImageData || !!t1.$isNode || !!t1.$isTypedData || !!t1.$isWindow)
        return o;
      if (!!t1.$isDateTime)
        return H.Primitives_lazyAsJsDate(o);
      if (!!t1.$isFunction)
        return P._getJsProxy(o, "$dart_jsFunction", new P._convertToJS_closure());
      return P._getJsProxy(o, "_$dart_jsObject", new P._convertToJS_closure0($.$get$_dartProxyCtor()));
    }, "call$1", "js___convertToJS$closure", 2, 0, 1, 10, []],
    _getJsProxy: function(o, propertyName, createProxy) {
      var jsProxy = P._getOwnProperty(o, propertyName);
      if (jsProxy == null) {
        jsProxy = createProxy.call$1(o);
        P._defineProperty(o, propertyName, jsProxy);
      }
      return jsProxy;
    },
    _convertToDart: [function(o) {
      var t1, ms;
      if (o == null || typeof o == "string" || typeof o == "number" || typeof o == "boolean")
        return o;
      else {
        if (o instanceof Object) {
          t1 = J.getInterceptor(o);
          t1 = !!t1.$isBlob || !!t1.$isEvent || !!t1.$isKeyRange || !!t1.$isImageData || !!t1.$isNode || !!t1.$isTypedData || !!t1.$isWindow;
        } else
          t1 = false;
        if (t1)
          return o;
        else if (o instanceof Date) {
          ms = o.getTime();
          t1 = new P.DateTime(ms, false);
          t1.DateTime$_withValue$2$isUtc(ms, false);
          return t1;
        } else if (o.constructor === $.$get$_dartProxyCtor())
          return o.o;
        else
          return P._wrapToDart(o);
      }
    }, "call$1", "js___convertToDart$closure", 2, 0, 70, 10, []],
    _wrapToDart: function(o) {
      if (typeof o == "function")
        return P._getDartProxy(o, $.$get$DART_CLOSURE_PROPERTY_NAME(), new P._wrapToDart_closure());
      if (o instanceof Array)
        return P._getDartProxy(o, $.$get$_DART_OBJECT_PROPERTY_NAME(), new P._wrapToDart_closure0());
      return P._getDartProxy(o, $.$get$_DART_OBJECT_PROPERTY_NAME(), new P._wrapToDart_closure1());
    },
    _getDartProxy: function(o, propertyName, createProxy) {
      var dartProxy = P._getOwnProperty(o, propertyName);
      if (dartProxy == null || !(o instanceof Object)) {
        dartProxy = createProxy.call$1(o);
        P._defineProperty(o, propertyName, dartProxy);
      }
      return dartProxy;
    },
    JsObject: {
      "^": "Object;_js$_jsObject",
      $index: ["super$JsObject$$index", function(_, property) {
        if (typeof property !== "string" && typeof property !== "number")
          throw H.wrapException(P.ArgumentError$("property is not a String or num"));
        return P._convertToDart(this._js$_jsObject[property]);
      }],
      $indexSet: ["super$JsObject$$indexSet", function(_, property, value) {
        if (typeof property !== "string" && typeof property !== "number")
          throw H.wrapException(P.ArgumentError$("property is not a String or num"));
        this._js$_jsObject[property] = P._convertToJS(value);
      }],
      get$hashCode: function(_) {
        return 0;
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof P.JsObject && this._js$_jsObject === other._js$_jsObject;
      },
      toString$0: function(_) {
        var t1, exception;
        try {
          t1 = String(this._js$_jsObject);
          return t1;
        } catch (exception) {
          H.unwrapException(exception);
          return this.super$Object$toString(this);
        }
      },
      callMethod$2: function(method, args) {
        var t1, t2;
        t1 = this._js$_jsObject;
        t2 = args == null ? null : P.List_List$from(H.setRuntimeTypeInfo(new H.MappedListIterable(args, P.js___convertToJS$closure()), [null, null]), true, null);
        return P._convertToDart(t1[method].apply(t1, t2));
      },
      static: {
        JsObject_JsObject: function($constructor, $arguments) {
          var constr, args, factoryFunction;
          constr = P._convertToJS($constructor);
          if ($arguments == null)
            return P._wrapToDart(new constr());
          if ($arguments instanceof Array)
            switch ($arguments.length) {
              case 0:
                return P._wrapToDart(new constr());
              case 1:
                return P._wrapToDart(new constr(P._convertToJS($arguments[0])));
              case 2:
                return P._wrapToDart(new constr(P._convertToJS($arguments[0]), P._convertToJS($arguments[1])));
              case 3:
                return P._wrapToDart(new constr(P._convertToJS($arguments[0]), P._convertToJS($arguments[1]), P._convertToJS($arguments[2])));
              case 4:
                return P._wrapToDart(new constr(P._convertToJS($arguments[0]), P._convertToJS($arguments[1]), P._convertToJS($arguments[2]), P._convertToJS($arguments[3])));
            }
          args = [null];
          C.JSArray_methods.addAll$1(args, H.setRuntimeTypeInfo(new H.MappedListIterable($arguments, P.js___convertToJS$closure()), [null, null]));
          factoryFunction = constr.bind.apply(constr, args);
          String(factoryFunction);
          return P._wrapToDart(new factoryFunction());
        },
        JsObject_JsObject$jsify: function(object) {
          return P._wrapToDart(P.JsObject__convertDataTree(object));
        },
        JsObject__convertDataTree: function(data) {
          return new P.JsObject__convertDataTree__convert(H.setRuntimeTypeInfo(new P._IdentityHashMap(0, null, null, null, null), [null, null])).call$1(data);
        }
      }
    },
    JsObject__convertDataTree__convert: {
      "^": "Closure:1;_convertedObjects",
      call$1: [function(o) {
        var t1, t2, convertedMap, key, convertedList;
        t1 = this._convertedObjects;
        if (t1.containsKey$1(0, o))
          return t1.$index(0, o);
        t2 = J.getInterceptor(o);
        if (!!t2.$isMap) {
          convertedMap = {};
          t1.$indexSet(0, o, convertedMap);
          for (t1 = J.get$iterator$ax(t2.get$keys(o)); t1.moveNext$0();) {
            key = t1.get$current();
            convertedMap[key] = this.call$1(t2.$index(o, key));
          }
          return convertedMap;
        } else if (!!t2.$isIterable) {
          convertedList = [];
          t1.$indexSet(0, o, convertedList);
          C.JSArray_methods.addAll$1(convertedList, t2.map$1(o, this));
          return convertedList;
        } else
          return P._convertToJS(o);
      }, null, null, 2, 0, null, 10, [], "call"]
    },
    JsFunction: {
      "^": "JsObject;_js$_jsObject"
    },
    JsArray: {
      "^": "JsObject_ListMixin;_js$_jsObject",
      $index: function(_, index) {
        var t1;
        if (typeof index === "number" && index === C.JSNumber_methods.toInt$0(index)) {
          if (typeof index === "number" && Math.floor(index) === index)
            t1 = index < 0 || index >= this.get$length(this);
          else
            t1 = false;
          if (t1)
            H.throwExpression(P.RangeError$range(index, 0, this.get$length(this), null, null));
        }
        return this.super$JsObject$$index(this, index);
      },
      $indexSet: function(_, index, value) {
        var t1;
        if (typeof index === "number" && index === C.JSNumber_methods.toInt$0(index)) {
          if (typeof index === "number" && Math.floor(index) === index)
            t1 = index < 0 || index >= this.get$length(this);
          else
            t1 = false;
          if (t1)
            H.throwExpression(P.RangeError$range(index, 0, this.get$length(this), null, null));
        }
        this.super$JsObject$$indexSet(this, index, value);
      },
      get$length: function(_) {
        var len = this._js$_jsObject.length;
        if (typeof len === "number" && len >>> 0 === len)
          return len;
        throw H.wrapException(new P.StateError("Bad JsArray length"));
      },
      set$length: function(_, $length) {
        this.super$JsObject$$indexSet(this, "length", $length);
      },
      add$1: function(_, value) {
        this.callMethod$2("push", [value]);
      },
      addAll$1: function(_, iterable) {
        this.callMethod$2("push", iterable instanceof Array ? iterable : P.List_List$from(iterable, true, null));
      },
      setRange$4: function(_, start, end, iterable, skipCount) {
        var $length, args;
        P.JsArray__checkRange(start, end, this.get$length(this));
        $length = J.$sub$n(end, start);
        if (J.$eq$($length, 0))
          return;
        if (J.$lt$n(skipCount, 0))
          throw H.wrapException(P.ArgumentError$(skipCount));
        args = [start, $length];
        C.JSArray_methods.addAll$1(args, J.skip$1$ax(iterable, skipCount).take$1(0, $length));
        this.callMethod$2("splice", args);
      },
      setRange$3: function($receiver, start, end, iterable) {
        return this.setRange$4($receiver, start, end, iterable, 0);
      },
      static: {
        JsArray__checkRange: function(start, end, $length) {
          var t1 = J.getInterceptor$n(start);
          if (t1.$lt(start, 0) || t1.$gt(start, $length))
            throw H.wrapException(P.RangeError$range(start, 0, $length, null, null));
          t1 = J.getInterceptor$n(end);
          if (t1.$lt(end, start) || t1.$gt(end, $length))
            throw H.wrapException(P.RangeError$range(end, start, $length, null, null));
        }
      }
    },
    JsObject_ListMixin: {
      "^": "JsObject+ListMixin;",
      $isList: 1,
      $asList: null,
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    _convertToJS_closure: {
      "^": "Closure:1;",
      call$1: function(o) {
        var jsFunction = function(_call, f, captureThis) {
          return function() {
            return _call(f, captureThis, this, Array.prototype.slice.apply(arguments));
          };
        }(P._callDartFunction, o, false);
        P._defineProperty(jsFunction, $.$get$DART_CLOSURE_PROPERTY_NAME(), o);
        return jsFunction;
      }
    },
    _convertToJS_closure0: {
      "^": "Closure:1;ctor",
      call$1: function(o) {
        return new this.ctor(o);
      }
    },
    _wrapToDart_closure: {
      "^": "Closure:1;",
      call$1: function(o) {
        return new P.JsFunction(o);
      }
    },
    _wrapToDart_closure0: {
      "^": "Closure:1;",
      call$1: function(o) {
        return H.setRuntimeTypeInfo(new P.JsArray(o), [null]);
      }
    },
    _wrapToDart_closure1: {
      "^": "Closure:1;",
      call$1: function(o) {
        return new P.JsObject(o);
      }
    }
  }], ["dart.math", "dart:math",, P, {
    "^": "",
    min: function(a, b) {
      if (a > b)
        return b;
      if (a < b)
        return a;
      if (typeof b === "number") {
        if (typeof a === "number")
          if (a === 0)
            return (a + b) * a * b;
        if (a === 0 && C.JSInt_methods.get$isNegative(b) || isNaN(b))
          return b;
        return a;
      }
      return a;
    },
    max: function(a, b) {
      if (a > b)
        return a;
      if (a < b)
        return b;
      if (typeof b === "number") {
        if (typeof a === "number")
          if (a === 0)
            return a + b;
        if (isNaN(b))
          return b;
        return a;
      }
      if (b === 0 && C.JSInt_methods.get$isNegative(a))
        return b;
      return a;
    },
    _RectangleBase: {
      "^": "Object;"
    },
    Rectangle: {
      "^": "_RectangleBase;",
      $asRectangle: null
    }
  }], ["dart.mirrors", "dart:mirrors",, P, {
    "^": "",
    reflectClass: function(key) {
      var t1, tm;
      t1 = J.getInterceptor(key);
      if (!t1.$isType || t1.$eq(key, C.Type_dynamic_0Rz))
        throw H.wrapException(P.ArgumentError$(H.S(key) + " does not denote a class"));
      tm = P.reflectType(key);
      if (!J.getInterceptor(tm).$isClassMirror)
        throw H.wrapException(P.ArgumentError$(H.S(key) + " does not denote a class"));
      return tm.get$originalDeclaration();
    },
    reflectType: function(key) {
      if (J.$eq$(key, C.Type_dynamic_0Rz)) {
        $.$get$currentJsMirrorSystem().toString;
        return $.$get$JsMirrorSystem__dynamicType();
      }
      return H.reflectClassByMangledName(key.get$_typeName());
    },
    Mirror: {
      "^": "Object;"
    },
    DeclarationMirror: {
      "^": "Object;",
      $isMirror: 1
    },
    LibraryMirror: {
      "^": "Object;",
      $isMirror: 1
    },
    TypeMirror: {
      "^": "Object;",
      $isMirror: 1
    },
    ClassMirror: {
      "^": "Object;",
      $isTypeMirror: 1,
      $isMirror: 1
    },
    TypeVariableMirror: {
      "^": "TypeMirror;",
      $isMirror: 1
    },
    MethodMirror: {
      "^": "Object;",
      $isMirror: 1
    },
    VariableMirror: {
      "^": "Object;",
      $isMirror: 1
    }
  }], ["dart.dom.svg", "dart:svg",, P, {
    "^": "",
    AElement: {
      "^": "GraphicsElement;target=",
      $isInterceptor: 1,
      "%": "SVGAElement"
    },
    Angle: {
      "^": "Interceptor;value%",
      "%": "SVGAngle"
    },
    AnimationElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGSetElement"
    },
    FEBlendElement: {
      "^": "SvgElement;mode=,result=",
      $isInterceptor: 1,
      "%": "SVGFEBlendElement"
    },
    FEColorMatrixElement: {
      "^": "SvgElement;result=",
      $isInterceptor: 1,
      "%": "SVGFEColorMatrixElement"
    },
    FEComponentTransferElement: {
      "^": "SvgElement;result=",
      $isInterceptor: 1,
      "%": "SVGFEComponentTransferElement"
    },
    FECompositeElement: {
      "^": "SvgElement;result=",
      $isInterceptor: 1,
      "%": "SVGFECompositeElement"
    },
    FEConvolveMatrixElement: {
      "^": "SvgElement;result=",
      $isInterceptor: 1,
      "%": "SVGFEConvolveMatrixElement"
    },
    FEDiffuseLightingElement: {
      "^": "SvgElement;result=",
      $isInterceptor: 1,
      "%": "SVGFEDiffuseLightingElement"
    },
    FEDisplacementMapElement: {
      "^": "SvgElement;result=",
      $isInterceptor: 1,
      "%": "SVGFEDisplacementMapElement"
    },
    FEFloodElement: {
      "^": "SvgElement;result=",
      $isInterceptor: 1,
      "%": "SVGFEFloodElement"
    },
    FEGaussianBlurElement: {
      "^": "SvgElement;result=",
      $isInterceptor: 1,
      "%": "SVGFEGaussianBlurElement"
    },
    FEImageElement: {
      "^": "SvgElement;result=",
      $isInterceptor: 1,
      "%": "SVGFEImageElement"
    },
    FEMergeElement: {
      "^": "SvgElement;result=",
      $isInterceptor: 1,
      "%": "SVGFEMergeElement"
    },
    FEMorphologyElement: {
      "^": "SvgElement;result=",
      $isInterceptor: 1,
      "%": "SVGFEMorphologyElement"
    },
    FEOffsetElement: {
      "^": "SvgElement;result=",
      $isInterceptor: 1,
      "%": "SVGFEOffsetElement"
    },
    FESpecularLightingElement: {
      "^": "SvgElement;result=",
      $isInterceptor: 1,
      "%": "SVGFESpecularLightingElement"
    },
    FETileElement: {
      "^": "SvgElement;result=",
      $isInterceptor: 1,
      "%": "SVGFETileElement"
    },
    FETurbulenceElement: {
      "^": "SvgElement;result=",
      $isInterceptor: 1,
      "%": "SVGFETurbulenceElement"
    },
    FilterElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGFilterElement"
    },
    GraphicsElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGCircleElement|SVGClipPathElement|SVGDefsElement|SVGEllipseElement|SVGForeignObjectElement|SVGGElement|SVGGeometryElement|SVGLineElement|SVGPathElement|SVGPolygonElement|SVGPolylineElement|SVGRectElement|SVGSwitchElement;SVGGraphicsElement"
    },
    ImageElement0: {
      "^": "GraphicsElement;",
      $isInterceptor: 1,
      "%": "SVGImageElement"
    },
    Length: {
      "^": "Interceptor;value%",
      $isObject: 1,
      "%": "SVGLength"
    },
    LengthList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin14;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver.getItem(index);
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      get$last: function(receiver) {
        var len = receiver.length;
        if (len > 0)
          return receiver[len - 1];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        return this.$index(receiver, index);
      },
      clear$0: function(receiver) {
        return receiver.clear();
      },
      $isList: 1,
      $asList: function() {
        return [P.Length];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.Length];
      },
      "%": "SVGLengthList"
    },
    Interceptor_ListMixin14: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [P.Length];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.Length];
      }
    },
    Interceptor_ListMixin_ImmutableListMixin14: {
      "^": "Interceptor_ListMixin14+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [P.Length];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.Length];
      }
    },
    MarkerElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGMarkerElement"
    },
    MaskElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGMaskElement"
    },
    Number: {
      "^": "Interceptor;value%",
      $isObject: 1,
      "%": "SVGNumber"
    },
    NumberList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin15;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver.getItem(index);
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      get$last: function(receiver) {
        var len = receiver.length;
        if (len > 0)
          return receiver[len - 1];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        return this.$index(receiver, index);
      },
      clear$0: function(receiver) {
        return receiver.clear();
      },
      $isList: 1,
      $asList: function() {
        return [P.Number];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.Number];
      },
      "%": "SVGNumberList"
    },
    Interceptor_ListMixin15: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [P.Number];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.Number];
      }
    },
    Interceptor_ListMixin_ImmutableListMixin15: {
      "^": "Interceptor_ListMixin15+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [P.Number];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.Number];
      }
    },
    PathSeg: {
      "^": "Interceptor;",
      $isObject: 1,
      "%": "SVGPathSeg|SVGPathSegArcAbs|SVGPathSegArcRel|SVGPathSegClosePath|SVGPathSegCurvetoCubicAbs|SVGPathSegCurvetoCubicRel|SVGPathSegCurvetoCubicSmoothAbs|SVGPathSegCurvetoCubicSmoothRel|SVGPathSegCurvetoQuadraticAbs|SVGPathSegCurvetoQuadraticRel|SVGPathSegCurvetoQuadraticSmoothAbs|SVGPathSegCurvetoQuadraticSmoothRel|SVGPathSegLinetoAbs|SVGPathSegLinetoHorizontalAbs|SVGPathSegLinetoHorizontalRel|SVGPathSegLinetoRel|SVGPathSegLinetoVerticalAbs|SVGPathSegLinetoVerticalRel|SVGPathSegMovetoAbs|SVGPathSegMovetoRel"
    },
    PathSegList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin16;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver.getItem(index);
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      get$last: function(receiver) {
        var len = receiver.length;
        if (len > 0)
          return receiver[len - 1];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        return this.$index(receiver, index);
      },
      clear$0: function(receiver) {
        return receiver.clear();
      },
      $isList: 1,
      $asList: function() {
        return [P.PathSeg];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.PathSeg];
      },
      "%": "SVGPathSegList"
    },
    Interceptor_ListMixin16: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [P.PathSeg];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.PathSeg];
      }
    },
    Interceptor_ListMixin_ImmutableListMixin16: {
      "^": "Interceptor_ListMixin16+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [P.PathSeg];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.PathSeg];
      }
    },
    PatternElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGPatternElement"
    },
    PointList: {
      "^": "Interceptor;length=",
      clear$0: function(receiver) {
        return receiver.clear();
      },
      "%": "SVGPointList"
    },
    Rect: {
      "^": "Interceptor;width}",
      "%": "SVGRect"
    },
    ScriptElement: {
      "^": "SvgElement;type}",
      $isScriptElement: 1,
      $isInterceptor: 1,
      "%": "SVGScriptElement"
    },
    StringList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin17;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver.getItem(index);
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      get$last: function(receiver) {
        var len = receiver.length;
        if (len > 0)
          return receiver[len - 1];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        return this.$index(receiver, index);
      },
      clear$0: function(receiver) {
        return receiver.clear();
      },
      $isList: 1,
      $asList: function() {
        return [P.String];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.String];
      },
      "%": "SVGStringList"
    },
    Interceptor_ListMixin17: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [P.String];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.String];
      }
    },
    Interceptor_ListMixin_ImmutableListMixin17: {
      "^": "Interceptor_ListMixin17+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [P.String];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.String];
      }
    },
    StyleElement0: {
      "^": "SvgElement;disabled},type}",
      "%": "SVGStyleElement"
    },
    _AttributeClassSet: {
      "^": "CssClassSetImpl;_svg$_element",
      readClasses$0: function() {
        var classname, s, t1, t2, _i, trimmed;
        classname = this._svg$_element.getAttribute("class");
        s = P.LinkedHashSet_LinkedHashSet(null, null, null, P.String);
        if (classname == null)
          return s;
        for (t1 = classname.split(" "), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          trimmed = J.trim$0$s(t1[_i]);
          if (trimmed.length !== 0)
            s.add$1(0, trimmed);
        }
        return s;
      },
      writeClasses$1: function(s) {
        this._svg$_element.setAttribute("class", s.join$1(0, " "));
      }
    },
    SvgElement: {
      "^": "Element;",
      get$classes: function(receiver) {
        return new P._AttributeClassSet(receiver);
      },
      get$children: function(receiver) {
        return new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver));
      },
      set$children: function(receiver, value) {
        this._clearChildren$0(receiver);
        new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver)).addAll$1(0, value);
      },
      set$innerHtml: function(receiver, value) {
        this.setInnerHtml$1(receiver, value);
      },
      createFragment$3$treeSanitizer$validator: function(receiver, svg, treeSanitizer, validator) {
        var t1, html, fragment, svgFragment, root;
        if (treeSanitizer == null) {
          t1 = H.setRuntimeTypeInfo([], [W.NodeValidator]);
          validator = new W.NodeValidatorBuilder(t1);
          t1.push(W._Html5NodeValidator$(null));
          t1.push(W._TemplatingNodeValidator$());
          t1.push(new W._SvgNodeValidator());
          treeSanitizer = new W._ValidatingTreeSanitizer(validator);
        }
        html = '<svg version="1.1">' + H.S(svg) + "</svg>";
        t1 = document.body;
        fragment = (t1 && C.BodyElement_methods).createFragment$2$treeSanitizer(t1, html, treeSanitizer);
        svgFragment = document.createDocumentFragment();
        fragment.toString;
        t1 = new W._ChildNodeListLazy(fragment);
        root = t1.get$single(t1);
        for (; t1 = root.firstChild, t1 != null;)
          svgFragment.appendChild(t1);
        return svgFragment;
      },
      insertAdjacentHtml$4$treeSanitizer$validator: function(receiver, where, text, treeSanitizer, validator) {
        throw H.wrapException(new P.UnsupportedError("Cannot invoke insertAdjacentHtml on SVG."));
      },
      insertAdjacentElement$2: function(receiver, where, element) {
        throw H.wrapException(new P.UnsupportedError("Cannot invoke insertAdjacentElement on SVG."));
      },
      focus$0: function(receiver) {
        return receiver.focus();
      },
      get$onChange: function(receiver) {
        return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "change", false), [H.getTypeArgumentByIndex(C.EventStreamProvider_change, 0)]);
      },
      get$onClick: function(receiver) {
        return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "click", false), [H.getTypeArgumentByIndex(C.EventStreamProvider_click, 0)]);
      },
      get$onKeyDown: function(receiver) {
        return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "keydown", false), [H.getTypeArgumentByIndex(C.EventStreamProvider_keydown, 0)]);
      },
      $isSvgElement: 1,
      $isEventTarget: 1,
      $isInterceptor: 1,
      "%": "SVGComponentTransferFunctionElement|SVGDescElement|SVGDiscardElement|SVGFEDistantLightElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEMergeNodeElement|SVGFEPointLightElement|SVGFESpotLightElement|SVGMetadataElement|SVGStopElement|SVGTitleElement;SVGElement"
    },
    SvgSvgElement: {
      "^": "GraphicsElement;",
      $isInterceptor: 1,
      "%": "SVGSVGElement"
    },
    SymbolElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGSymbolElement"
    },
    TextContentElement: {
      "^": "GraphicsElement;",
      "%": "SVGTSpanElement|SVGTextElement|SVGTextPositioningElement;SVGTextContentElement"
    },
    TextPathElement: {
      "^": "TextContentElement;",
      $isInterceptor: 1,
      "%": "SVGTextPathElement"
    },
    Transform: {
      "^": "Interceptor;",
      $isObject: 1,
      "%": "SVGTransform"
    },
    TransformList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin18;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver.getItem(index);
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      get$last: function(receiver) {
        var len = receiver.length;
        if (len > 0)
          return receiver[len - 1];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        return this.$index(receiver, index);
      },
      clear$0: function(receiver) {
        return receiver.clear();
      },
      $isList: 1,
      $asList: function() {
        return [P.Transform];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.Transform];
      },
      "%": "SVGTransformList"
    },
    Interceptor_ListMixin18: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [P.Transform];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.Transform];
      }
    },
    Interceptor_ListMixin_ImmutableListMixin18: {
      "^": "Interceptor_ListMixin18+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [P.Transform];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.Transform];
      }
    },
    UseElement: {
      "^": "GraphicsElement;",
      $isInterceptor: 1,
      "%": "SVGUseElement"
    },
    ViewElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGViewElement"
    },
    ViewSpec: {
      "^": "Interceptor;",
      $isInterceptor: 1,
      "%": "SVGViewSpec"
    },
    _GradientElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGGradientElement|SVGLinearGradientElement|SVGRadialGradientElement"
    },
    _SVGCursorElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGCursorElement"
    },
    _SVGFEDropShadowElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGFEDropShadowElement"
    },
    _SVGMPathElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      "%": "SVGMPathElement"
    }
  }], ["dart.typed_data", "dart:typed_data",, P, {
    "^": "",
    Uint8List: {
      "^": "Object;",
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isTypedData: 1,
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      }
    }
  }], ["dart.dom.web_audio", "dart:web_audio",, P, {
    "^": "",
    AudioBuffer: {
      "^": "Interceptor;duration=,length=",
      "%": "AudioBuffer"
    },
    AudioContext: {
      "^": "EventTarget;",
      resume$0: function(receiver) {
        return receiver.resume();
      },
      "%": "AudioContext|OfflineAudioContext|webkitAudioContext"
    },
    AudioNode: {
      "^": "EventTarget;",
      "%": "AnalyserNode|AudioChannelMerger|AudioChannelSplitter|AudioDestinationNode|AudioGainNode|AudioPannerNode|ChannelMergerNode|ChannelSplitterNode|ConvolverNode|DelayNode|DynamicsCompressorNode|GainNode|JavaScriptAudioNode|MediaStreamAudioDestinationNode|PannerNode|RealtimeAnalyserNode|ScriptProcessorNode|StereoPannerNode|WaveShaperNode|webkitAudioPannerNode;AudioNode"
    },
    AudioParam: {
      "^": "Interceptor;value%",
      "%": "AudioParam"
    },
    AudioSourceNode: {
      "^": "AudioNode;",
      "%": "AudioBufferSourceNode|MediaElementAudioSourceNode|MediaStreamAudioSourceNode;AudioSourceNode"
    },
    BiquadFilterNode: {
      "^": "AudioNode;type}",
      "%": "BiquadFilterNode"
    },
    OscillatorNode: {
      "^": "AudioSourceNode;type}",
      "%": "Oscillator|OscillatorNode"
    }
  }], ["dart.dom.web_gl", "dart:web_gl",, P, {
    "^": "",
    ActiveInfo: {
      "^": "Interceptor;name=",
      "%": "WebGLActiveInfo"
    },
    RenderingContext2: {
      "^": "Interceptor;",
      $isInterceptor: 1,
      "%": "WebGL2RenderingContext"
    },
    _WebGL2RenderingContextBase: {
      "^": "Interceptor;",
      $isInterceptor: 1,
      "%": "WebGL2RenderingContextBase"
    }
  }], ["dart.dom.web_sql", "dart:web_sql",, P, {
    "^": "",
    SqlError: {
      "^": "Interceptor;code=",
      "%": "SQLError"
    },
    SqlResultSetRowList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin19;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return P.convertNativeToDart_Dictionary(receiver.item(index));
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(new P.StateError("No elements"));
      },
      get$last: function(receiver) {
        var len = receiver.length;
        if (len > 0)
          return receiver[len - 1];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        return this.$index(receiver, index);
      },
      $isList: 1,
      $asList: function() {
        return [P.Map];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.Map];
      },
      "%": "SQLResultSetRowList"
    },
    Interceptor_ListMixin19: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [P.Map];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.Map];
      }
    },
    Interceptor_ListMixin_ImmutableListMixin19: {
      "^": "Interceptor_ListMixin19+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [P.Map];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.Map];
      }
    }
  }], ["animation", "package:animation/animation.dart",, L, {
    "^": "",
    EasingEngine_easeInOutQuad: function(time, duration, change, baseValue) {
      var t1;
      time /= duration / 2;
      if (time < 1) {
        t1 = J.$div$n(change, 2);
        if (typeof baseValue !== "number")
          return H.iae(baseValue);
        return t1 * time * time + baseValue;
      }
      --time;
      t1 = J.$div$n(J.$negate$n(change), 2);
      if (typeof baseValue !== "number")
        return H.iae(baseValue);
      return t1 * (time * (time - 2) - 1) + baseValue;
    },
    EasingEngine_easeInOutCubic: function(time, duration, change, baseValue) {
      var t1;
      time /= duration / 2;
      if (time < 1) {
        t1 = J.$div$n(change, 2);
        if (typeof baseValue !== "number")
          return H.iae(baseValue);
        return t1 * time * time * time + baseValue;
      }
      time -= 2;
      t1 = J.$div$n(change, 2);
      if (typeof baseValue !== "number")
        return H.iae(baseValue);
      return t1 * (time * time * time + 2) + baseValue;
    },
    EasingEngine_easeInOutQuartic: function(time, duration, change, baseValue) {
      var t1;
      time /= duration / 2;
      if (time < 1) {
        t1 = J.$div$n(change, 2);
        if (typeof baseValue !== "number")
          return H.iae(baseValue);
        return t1 * time * time * time * time + baseValue;
      }
      time -= 2;
      t1 = J.$div$n(J.$negate$n(change), 2);
      if (typeof baseValue !== "number")
        return H.iae(baseValue);
      return t1 * (time * time * time * time - 2) + baseValue;
    },
    EasingEngine_easeInOutQuintic: function(time, duration, change, baseValue) {
      var t1;
      time /= duration / 2;
      if (time < 1) {
        t1 = J.$div$n(change, 2);
        if (typeof baseValue !== "number")
          return H.iae(baseValue);
        return t1 * time * time * time * time * time + baseValue;
      }
      time -= 2;
      t1 = J.$div$n(change, 2);
      if (typeof baseValue !== "number")
        return H.iae(baseValue);
      return t1 * (time * time * time * time * time + 2) + baseValue;
    },
    EasingEngine_easeInOutExponential: function(time, duration, change, baseValue) {
      var t1, t2;
      time /= duration / 2;
      if (time < 1) {
        t1 = J.$div$n(change, 2);
        t2 = 10 * (time - 1);
        H.checkNum(2);
        H.checkNum(t2);
        t2 = Math.pow(2, t2);
        if (typeof baseValue !== "number")
          return H.iae(baseValue);
        return t1 * t2 + baseValue;
      }
      t1 = J.$div$n(change, 2);
      t2 = -10 * (time - 1);
      H.checkNum(2);
      H.checkNum(t2);
      t2 = Math.pow(2, t2);
      if (typeof baseValue !== "number")
        return H.iae(baseValue);
      return t1 * (-t2 + 2) + baseValue;
    },
    EasingEngine_easeInOutCircular: function(time, duration, change, baseValue) {
      var t1, t2;
      time /= duration / 2;
      if (time < 1) {
        t1 = J.$div$n(J.$negate$n(change), 2);
        t2 = Math.sqrt(H.checkNum(1 - time * time));
        if (typeof baseValue !== "number")
          return H.iae(baseValue);
        return t1 * t2 + baseValue;
      }
      time -= 2;
      t1 = J.$div$n(change, 2);
      t2 = Math.sqrt(H.checkNum(1 - time * time));
      if (typeof baseValue !== "number")
        return H.iae(baseValue);
      return t1 * (t2 + 1) + baseValue;
    },
    Animation0: {
      "^": "Object;",
      get$duration: function(_) {
        return this._animation$_duration;
      },
      set$duration: function(_, value) {
        this._animation$_duration = value;
      },
      pause$0: function(_) {
        this._paused = true;
        this._pausedAt = Date.now();
      },
      run$0: ["super$Animation$run", function(_) {
        this._paused = false;
        this._stopped = false;
      }],
      resume$0: function(_) {
        return this.run$0(0);
      },
      _performEasing$4: ["super$Animation$_performEasing", function(time, duration, change, baseValue) {
        var t1, t2;
        switch (this.easing) {
          case C.Easing_0:
            t1 = J.$div$n(J.$mul$ns(change, time), duration);
            if (typeof baseValue !== "number")
              return H.iae(baseValue);
            return t1 + baseValue;
          case C.Easing_1:
            time /= duration;
            return J.$add$ns(J.$mul$ns(J.$mul$ns(change, time), time), baseValue);
          case C.Easing_2:
            time /= duration;
            return J.$add$ns(J.$mul$ns(J.$mul$ns(J.$negate$n(change), time), time - 2), baseValue);
          case C.Easing_3:
            return L.EasingEngine_easeInOutQuad(time, duration, change, baseValue);
          case C.Easing_4:
            time /= duration;
            return J.$add$ns(J.$mul$ns(J.$mul$ns(J.$mul$ns(change, time), time), time), baseValue);
          case C.Easing_5:
            time = time / duration - 1;
            return J.$add$ns(J.$mul$ns(change, time * time * time + 1), baseValue);
          case C.Easing_6:
            return L.EasingEngine_easeInOutCubic(time, duration, change, baseValue);
          case C.Easing_7:
            time /= duration;
            return J.$add$ns(J.$mul$ns(J.$mul$ns(J.$mul$ns(J.$mul$ns(change, time), time), time), time), baseValue);
          case C.Easing_8:
            time = time / duration - 1;
            return J.$add$ns(J.$mul$ns(J.$negate$n(change), time * time * time * time - 1), baseValue);
          case C.Easing_9:
            return L.EasingEngine_easeInOutQuartic(time, duration, change, baseValue);
          case C.Easing_10:
            time /= duration;
            return J.$add$ns(J.$mul$ns(J.$mul$ns(J.$mul$ns(J.$mul$ns(J.$mul$ns(change, time), time), time), time), time), baseValue);
          case C.Easing_11:
            time = time / duration - 1;
            return J.$add$ns(J.$mul$ns(change, time * time * time * time * time + 1), baseValue);
          case C.Easing_12:
            return L.EasingEngine_easeInOutQuintic(time, duration, change, baseValue);
          case C.Easing_13:
            return J.$add$ns(J.$add$ns(J.$mul$ns(J.$negate$n(change), Math.cos(H.checkNum(time / duration * 1.5707963267948966))), change), baseValue);
          case C.Easing_14:
            return J.$add$ns(J.$mul$ns(change, Math.sin(H.checkNum(time / duration * 1.5707963267948966))), baseValue);
          case C.Easing_15:
            t1 = J.$div$n(J.$negate$n(change), 2);
            t2 = Math.cos(H.checkNum(time / duration * 3.141592653589793));
            if (typeof baseValue !== "number")
              return H.iae(baseValue);
            return t1 * (t2 - 1) + baseValue;
          case C.Easing_16:
            t1 = 10 * (time / duration - 1);
            H.checkNum(2);
            H.checkNum(t1);
            return J.$add$ns(J.$mul$ns(change, Math.pow(2, t1)), baseValue);
          case C.Easing_17:
            t1 = -10 * time / duration;
            H.checkNum(2);
            H.checkNum(t1);
            return J.$add$ns(J.$mul$ns(change, -Math.pow(2, t1) + 1), baseValue);
          case C.Easing_18:
            return L.EasingEngine_easeInOutExponential(time, duration, change, baseValue);
          case C.Easing_19:
            time /= duration;
            return J.$add$ns(J.$mul$ns(J.$negate$n(change), Math.sqrt(H.checkNum(1 - time * time)) - 1), baseValue);
          case C.Easing_20:
            time = time / duration - 1;
            return J.$add$ns(J.$mul$ns(change, Math.sqrt(H.checkNum(1 - time * time))), baseValue);
          case C.Easing_21:
            return L.EasingEngine_easeInOutCircular(time, duration, change, baseValue);
        }
        throw H.wrapException(P.Exception_Exception("Could not perform easing. Did you choose a proper easing type?"));
      }]
    },
    Easing: {
      "^": "Object;value>"
    },
    ElementAnimation: {
      "^": "Animation0;toProperties,fromProperties,currentProperties,units,element,_isInitialized,_animation$_duration,_startTime,_pausedAt,_pausedFor,_paused,_stopped,easing,_onStepController,_onCompleteController",
      _initializeFromProperties$0: function() {
        if (this._isInitialized)
          throw H.wrapException("Unexpected scenario: element properties should not be initialized more than once.");
        var style = J.getComputedStyle$1$x(this.element, "");
        P.LinkedHashMap_LinkedHashMap$from(this.toProperties, null, null).forEach$1(0, new L.ElementAnimation__initializeFromProperties_closure(this, style));
        this._isInitialized = true;
      },
      run$0: function(_) {
        var t1, t2, t3;
        if (!this._isInitialized)
          this._initializeFromProperties$0();
        if (this._paused) {
          this._paused = false;
          t1 = this._pausedFor;
          t2 = Date.now();
          t3 = this._pausedAt;
          if (typeof t3 !== "number")
            return H.iae(t3);
          this._pausedFor = t1 + (t2 - t3);
        }
        if (this._startTime == null)
          this._startTime = Date.now();
        t1 = window;
        t2 = this.get$_advance();
        C.Window_methods._ensureRequestAnimationFrame$0(t1);
        C.Window_methods._requestAnimationFrame$1(t1, W._wrapZone(t2));
        this.super$Animation$run(this);
      },
      _advance$1: [function(highResTime) {
        var t1, t2, currentTime, t3, timeLeft, percentage;
        t1 = {};
        if (this._paused || false)
          return;
        t2 = Date.now();
        t1.currentTime = t2;
        currentTime = t2 - this._pausedFor;
        t1.currentTime = currentTime;
        t2 = this._animation$_duration;
        t3 = this._startTime;
        if (typeof t3 !== "number")
          return H.iae(t3);
        timeLeft = t2 - (currentTime - t3);
        t3 = this._onStepController;
        if (t3._firstSubscription != null) {
          percentage = 100 - 100 / (t2 / timeLeft);
          if (percentage > 100)
            percentage = 100;
          else if (percentage < 0)
            percentage = 0;
          t2 = P.LinkedHashMap__makeLiteral(["animation", this, "percentage", percentage]);
          if (!t3.get$_mayAddEvent())
            H.throwExpression(t3._addEventError$0());
          t3._sendData$1(t2);
        }
        this.toProperties.forEach$1(0, new L.ElementAnimation__advance_closure(t1, this, timeLeft));
        if (timeLeft > 0) {
          t1 = window;
          t2 = this.get$_advance();
          C.Window_methods._ensureRequestAnimationFrame$0(t1);
          C.Window_methods._requestAnimationFrame$1(t1, W._wrapZone(t2));
        } else {
          t1 = this._onCompleteController;
          if (!t1.get$_mayAddEvent())
            H.throwExpression(t1._addEventError$0());
          t1._sendData$1(null);
        }
      }, "call$1", "get$_advance", 2, 0, 48, 39, []],
      _doesPropertyNeedUnit$1: function(propertyName) {
        var t1, el, t2;
        t1 = document;
        el = t1.createElement("div");
        t1 = el.style;
        t2 = (t1 && C.CssStyleDeclaration_methods)._browserPropertyName$1(t1, propertyName);
        t1.setProperty(t2, "0px", "");
        t1 = el.style;
        return (t1 && C.CssStyleDeclaration_methods).getPropertyValue$1(t1, propertyName) === "0px";
      },
      _getActualValueForAuto$1: function(propertyName) {
        var value = new L.ElementAnimation__getActualValueForAuto_convert(this, propertyName).call$0();
        if (value != null)
          return J.toString$0$(value);
        return "auto";
      },
      _propertyNeedsPreciseAnimation$1: function(propertyName) {
        switch (propertyName) {
          case "opacity":
            return true;
        }
        return false;
      }
    },
    ElementAnimation__initializeFromProperties_closure: {
      "^": "Closure:9;$this,style",
      call$2: function(key, value) {
        var t1, t2, cssValue, match, t3, value0, unit, t4, t5;
        t1 = this.$this;
        t2 = t1.element.style;
        cssValue = (t2 && C.CssStyleDeclaration_methods).getPropertyValue$1(t2, key);
        if (cssValue === "") {
          t2 = this.style;
          cssValue = (t2 && C.CssStyleDeclaration_methods).getPropertyValue$1(t2, key);
        }
        if (cssValue === "auto" || cssValue === "")
          cssValue = t1._getActualValueForAuto$1(key);
        if (cssValue === "auto")
          throw H.wrapException('Cannot animate property "' + H.S(key) + '", because it had initial value of "auto", which is not supported for this type of property. Please specify an initial value before you start animating it.');
        if (cssValue === "")
          throw H.wrapException('Cannot animate property "' + H.S(key) + '", because the initial value was an empty string "". Please specify an initial value.');
        if (t1._doesPropertyNeedUnit$1(key)) {
          match = new H.JSSyntaxRegExp("^(-?[0-9\\.]+)([a-zA-Z%]+)$", H.JSSyntaxRegExp_makeNative("^(-?[0-9\\.]+)([a-zA-Z%]+)$", false, true, false), null, null).firstMatch$1(cssValue);
          if (match != null) {
            t2 = match._match;
            t3 = t2.length;
            if (1 >= t3)
              return H.ioore(t2, 1);
            value0 = t2[1];
            if (2 >= t3)
              return H.ioore(t2, 2);
            unit = t2[2];
            t1.fromProperties.$indexSet(0, key, H.Primitives_parseDouble(value0, null));
            t1.currentProperties.$indexSet(0, key, H.Primitives_parseDouble(value0, null));
            t2 = t1.units;
            t2.$indexSet(0, key, unit);
          } else {
            match = $.$get$ElementAnimation_valueUnitRegex().firstMatch$1(cssValue);
            t2 = t1.fromProperties;
            t3 = t1.currentProperties;
            t4 = t1.units;
            if (match != null) {
              t5 = match._match;
              if (1 >= t5.length)
                return H.ioore(t5, 1);
              value0 = t5[1];
              t2.$indexSet(0, key, H.Primitives_parseDouble(value0, null));
              t3.$indexSet(0, key, H.Primitives_parseDouble(value0, null));
              t4.$indexSet(0, key, t1._doesPropertyNeedUnit$1(key) ? "px" : "");
            } else {
              t2.$indexSet(0, key, H.Primitives_parseDouble(cssValue, null));
              t3.$indexSet(0, key, H.Primitives_parseDouble(cssValue, null));
              t4.$indexSet(0, key, "px");
            }
            t2 = t4;
          }
        } else {
          t1.fromProperties.$indexSet(0, key, H.Primitives_parseDouble(cssValue, null));
          t1.currentProperties.$indexSet(0, key, H.Primitives_parseDouble(cssValue, null));
          t2 = t1.units;
          t2.$indexSet(0, key, "");
        }
        if (typeof value === "string") {
          match = $.$get$ElementAnimation_valueUnitRegex().firstMatch$1(value);
          if (match != null) {
            t3 = match._match;
            t4 = t3.length;
            if (1 >= t4)
              return H.ioore(t3, 1);
            value = t3[1];
            if (2 >= t4)
              return H.ioore(t3, 2);
            unit = t3[2];
            t1.toProperties.$indexSet(0, key, H.Primitives_parseDouble(value, null));
            t2.$indexSet(0, key, unit);
          }
        }
      }
    },
    ElementAnimation__advance_closure: {
      "^": "Closure:30;_box_0,$this,timeLeft",
      call$2: function(key, value) {
        var t1, baseValue, t2, change, t3, t4, intermediateValue, result;
        if (this.timeLeft > 0) {
          t1 = this.$this;
          baseValue = t1.fromProperties.$index(0, key);
          t2 = J.getInterceptor$n(value);
          change = t2.$sub(value, baseValue);
          t3 = this._box_0.currentTime;
          t4 = t1._startTime;
          if (typeof t4 !== "number")
            return H.iae(t4);
          intermediateValue = t1.super$Animation$_performEasing(t3 - t4, t1._animation$_duration, change, baseValue);
          if (J.$gt$n(baseValue, value)) {
            if (t2.$gt(value, 0) && J.$lt$n(intermediateValue, value))
              intermediateValue = value;
            if (t2.$lt(value, 0) && J.$lt$n(intermediateValue, value))
              intermediateValue = value;
          } else {
            if (t2.$gt(value, 0) && J.$gt$n(intermediateValue, value))
              intermediateValue = value;
            if (t2.$lt(value, 0) && J.$gt$n(intermediateValue, value))
              intermediateValue = value;
          }
        } else
          intermediateValue = value;
        t1 = this.$this;
        t1.currentProperties.$indexSet(0, key, intermediateValue);
        result = t1._propertyNeedsPreciseAnimation$1(key) ? intermediateValue : J.round$0$n(intermediateValue);
        if (C.JSArray_methods.contains$1(C.List_scrollTop_scrollLeft, key))
          switch (key) {
            case "scrollTop":
              t1 = t1.element;
              t1.toString;
              t1.scrollTop = J.round$0$n(result);
              break;
            case "scrollLeft":
              t1 = t1.element;
              t1.toString;
              t1.scrollLeft = J.round$0$n(result);
              break;
          }
        else {
          t2 = t1.element.style;
          t1 = H.S(result) + H.S(t1.units.$index(0, key));
          t3 = (t2 && C.CssStyleDeclaration_methods)._browserPropertyName$1(t2, key);
          t2.setProperty(t3, t1, "");
        }
      }
    },
    ElementAnimation__getActualValueForAuto_convert: {
      "^": "Closure:4;$this,propertyName",
      call$0: function() {
        switch (this.propertyName) {
          case "width":
            return this.$this.element.clientWidth;
          case "height":
            return this.$this.element.clientHeight;
          case "top":
          case "right":
          case "bottom":
          case "left":
            return 0;
          case "scrollTop":
            return C.JSNumber_methods.round$0(this.$this.element.scrollTop);
          case "scrollLeft":
            return C.JSNumber_methods.round$0(this.$this.element.scrollLeft);
          case "opacity":
            return 1;
        }
      }
    }
  }], ["dquery", "package:dquery/dquery.dart",, Q, {
    "^": "",
    $: function(selector, context) {
      var t1;
      if (typeof selector === "string")
        selector = C.JSString_methods.trim$0(selector);
      if (selector == null || J.$eq$(selector, ""))
        return new Q._ElementQuery([], null, null, null, null);
      if (typeof selector === "string") {
        if (C.JSString_methods.startsWith$1(selector, "<"))
          return new Q._ElementQuery([W.Element_Element$html(selector, null, null)], null, null, null, null);
        if (context == null)
          return $.$get$_rootDQuery().find$1(0, selector);
        else {
          t1 = J.getInterceptor(context);
          if (!!t1.$isDQuery)
            return t1.find$1(context, selector);
          else if (!!t1.$isDocument)
            return Q._DocumentQuery$(context).find$1(0, selector);
          else if (!!t1.$isElement)
            return new Q._ElementQuery([context], null, null, null, null).find$1(0, selector);
        }
        throw H.wrapException(P.ArgumentError$("Context type should be Document, Element, or DQuery: " + H.S(context)));
      }
      if (!!J.getInterceptor(selector).$isElement)
        return new Q._ElementQuery([selector], null, null, null, null);
      t1 = H.checkSubtype(selector, "$isList", [W.Element], "$asList");
      if (t1)
        return new Q._ElementQuery(selector, null, null, null, null);
      throw H.wrapException(P.ArgumentError$("Selector type should be String, Element, or List<Element>: " + H.S(selector)));
    },
    $document: function($document) {
      return Q._DocumentQuery$($document);
    },
    _showHide: function(elements, show) {
      var values, t1, t2, elem, t3, space, oldDisplay, t4, display, t5, t6, e, hidden;
      values = P.LinkedHashMap__makeEmpty();
      for (t1 = J.getInterceptor$ax(elements), t2 = t1.get$iterator(elements); t2.moveNext$0();) {
        elem = t2.get$current();
        t3 = $.$get$_dataPriv()._cache;
        space = t3.$index(0, elem);
        oldDisplay = space == null ? null : J.$index$asx(space, "olddisplay");
        values.$indexSet(0, elem, oldDisplay);
        t4 = J.getInterceptor$x(elem);
        display = J.get$display$x(t4.get$style(elem));
        if (show) {
          if (oldDisplay == null && display === "none")
            J.set$display$x(t4.get$style(elem), "");
          if (J.get$display$x(t4.get$style(elem)) === "")
            t5 = J.get$display$x(t4.get$style(elem)) === "none" || t4.getComputedStyle$0(elem).display === "none" || t4.get$ownerDocument(elem).contains(elem) !== true;
          else
            t5 = false;
          if (t5) {
            t4 = t4.get$tagName(elem);
            t5 = $.$get$_elemDisplay();
            display = t5.$index(0, t4);
            if (display == null) {
              t6 = document;
              e = W._ElementFactoryProvider_createElement_tag(t4, null);
              t6.body.appendChild(e);
              t6 = J.getInterceptor$x(e);
              display = t6.getComputedStyle$0(e).display;
              t6.remove$0(e);
              t5.$indexSet(0, t4, display);
            }
            values.$indexSet(0, elem, display);
            space = t3.$index(0, elem);
            if (space == null) {
              space = P.LinkedHashMap__makeEmpty();
              t3 = t3._jsWeakMapOrKey;
              if (typeof t3 !== "string")
                t3.set(elem, space);
              else
                P.Expando__setOnObject(t3, elem, space);
            }
            J.$indexSet$ax(space, "olddisplay", display);
          }
        } else if (!values.containsKey$1(0, elem)) {
          hidden = J.get$display$x(t4.get$style(elem)) === "none" || t4.getComputedStyle$0(elem).display === "none" || t4.get$ownerDocument(elem).contains(elem) !== true;
          t5 = display.length !== 0 && display !== "none";
          if (t5 || !hidden) {
            t4 = hidden ? display : J.get$display$x(t4.get$style(elem));
            space = t3.$index(0, elem);
            if (space == null) {
              space = P.LinkedHashMap__makeEmpty();
              t3 = t3._jsWeakMapOrKey;
              if (typeof t3 !== "string")
                t3.set(elem, space);
              else
                P.Expando__setOnObject(t3, elem, space);
            }
            J.$indexSet$ax(space, "olddisplay", t4);
          }
        }
      }
      for (t1 = t1.get$iterator(elements); t1.moveNext$0();) {
        elem = t1.get$current();
        t2 = J.getInterceptor$x(elem);
        display = J.get$display$x(t2.get$style(elem));
        if (!show || display === "none" || display === "") {
          t2 = t2.get$style(elem);
          if (show) {
            t3 = values.$index(0, elem);
            t3 = t3 != null ? t3 : new Q._showHide_closure().call$0();
          } else
            t3 = "none";
          J.set$display$x(t2, t3);
        }
      }
    },
    _domManip: function(refs, $content, f) {
      var t1, objs, last, t2, n;
      if (refs.get$isEmpty(refs))
        return;
      t1 = J.getInterceptor($content);
      if (!!t1.$isElementQuery)
        objs = $content;
      else if (!!t1.$isElement) {
        t1 = Q.$($content, null);
        objs = t1;
      } else {
        t1 = typeof $content === "string" && C.JSString_methods.startsWith$1($content, "<") ? Q.$($content, null) : null;
        objs = t1;
      }
      if ((objs == null || J.get$isEmpty$asx(objs)) === true)
        return;
      last = refs.get$last(refs);
      for (t1 = refs.get$iterator(refs), t2 = J.getInterceptor$x(objs); t1.moveNext$0();) {
        n = t1.__internal$_current;
        f.call$2(n, J.$eq$(n, last) ? objs : t2.clone$0(objs));
      }
    },
    _appendFunc: [function(ref, obj) {
      return obj.forEach$1(obj, new Q._appendFunc_closure(ref));
    }, "call$2", "dquery___appendFunc$closure", 4, 0, 71],
    _showHide_closure: {
      "^": "Closure:4;",
      call$0: function() {
        return "";
      }
    },
    _Storage: {
      "^": "Object;_dquery$_name,_cache",
      static: {
        _Storage$: function($name) {
          return new Q._Storage($name, P.Expando$($name, P.Map));
        }
      }
    },
    Query0: {
      "^": "Object;",
      $isList: 1,
      $asList: null,
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    DQuery: {
      "^": "Query0;",
      $isList: 1
    },
    ElementQuery: {
      "^": "DQuery;",
      $asDQuery: function() {
        return [W.Element];
      },
      $isList: 1,
      $asList: function() {
        return [W.Element];
      },
      $asQuery0: function() {
        return [W.Element];
      },
      $asIterable: function() {
        return [W.Element];
      }
    },
    _Query: {
      "^": "Object;",
      get$selector: function() {
        return;
      },
      find$1: function(_, selector) {
        var s, t1;
        s = this.get$selector() != null ? H.S(this.get$selector()) + " " + selector : selector;
        t1 = new Q._ElementQuery(this._queryAll$1(selector), null, null, null, null);
        t1._prevObject = this;
        t1._context = this._context;
        t1._selector = s;
        return t1;
      },
      $isList: 1,
      $asList: null,
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    _DocumentQuery: {
      "^": "_Query_ListMixin;_doc,_context,_prevObject,_dquery$_data",
      $index: function(_, index) {
        return this._doc;
      },
      $indexSet: function(_, index, value) {
        if (!J.$eq$(index, 0) || value == null)
          throw H.wrapException(P.ArgumentError$(H.S(index) + ": " + H.S(value)));
        this._doc = value;
      },
      get$length: function(_) {
        return 1;
      },
      set$length: function(_, $length) {
        if (!J.$eq$($length, 1))
          throw H.wrapException(new P.UnsupportedError("fixed length"));
      },
      _queryAll$1: function(selector) {
        return J.querySelectorAll$1$x(this._doc, selector);
      },
      $isDQuery: 1,
      $asDQuery: function() {
        return [W.HtmlDocument];
      },
      $isList: 1,
      $asList: function() {
        return [W.HtmlDocument];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.HtmlDocument];
      },
      static: {
        _DocumentQuery$: function(doc) {
          return new Q._DocumentQuery(doc != null ? doc : new Q._DocumentQuery_closure().call$0(), null, null, null);
        }
      }
    },
    _Query_ListMixin: {
      "^": "_Query+ListMixin;",
      $as_Query: function() {
        return [W.HtmlDocument];
      },
      $asList: function() {
        return [W.HtmlDocument];
      },
      $asIterable: function() {
        return [W.HtmlDocument];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    _DocumentQuery_closure: {
      "^": "Closure:4;",
      call$0: function() {
        return document;
      }
    },
    _ElementQuery: {
      "^": "_Query_ListMixin0;_elements,_selector,_context,_prevObject,_dquery$_data",
      get$selector: function() {
        return this._selector;
      },
      $index: function(_, index) {
        return J.$index$asx(this._elements, index);
      },
      get$length: function(_) {
        return J.get$length$asx(this._elements);
      },
      $indexSet: function(_, index, value) {
        J.$indexSet$ax(this._elements, index, value);
      },
      set$length: function(_, $length) {
        J.set$length$asx(this._elements, $length);
      },
      _queryAll$1: function(selector) {
        var t1, t2, matched;
        t1 = this._elements;
        t2 = J.getInterceptor$asx(t1);
        switch (t2.get$length(t1)) {
          case 0:
            return [];
          case 1:
            return J.querySelectorAll$1$x(this.get$first(this), selector);
          default:
            matched = H.setRuntimeTypeInfo([], [W.Element]);
            for (t1 = t2.get$iterator(t1); t1.moveNext$0();)
              C.JSArray_methods.addAll$1(matched, J.querySelectorAll$1$x(t1.get$current(), selector));
            return P.LinkedHashSet_LinkedHashSet$from(matched, H.getTypeArgumentByIndex(matched, 0)).toList$1$growable(0, true);
        }
      },
      parent$1: [function(_, selector) {
        var results, t1, t2, p, t3;
        results = P.LinkedHashSet_LinkedHashSet(null, null, null, W.Element);
        for (t1 = J.get$iterator$ax(this._elements), t2 = selector != null; t1.moveNext$0();) {
          p = J.get$parent$x(t1.get$current());
          if (p != null)
            t3 = !t2 || J.matches$1$x(p, selector) === true;
          else
            t3 = false;
          if (t3)
            results.add$1(0, p);
        }
        t1 = new Q._ElementQuery(results.toList$1$growable(0, true), null, null, null, null);
        t1._prevObject = this;
        t1._context = this._context;
        return t1;
      }, function($receiver) {
        return this.parent$1($receiver, null);
      }, "parent$0", "call$1", "call$0", "get$parent", 0, 2, 37, 1, 40, []],
      children$1: [function(_, selector) {
        var results, t1, t2, c;
        results = H.setRuntimeTypeInfo([], [W.Element]);
        for (t1 = J.get$iterator$ax(this._elements); t1.moveNext$0();)
          for (t2 = J.get$iterator$ax(J.get$children$x(t1.get$current())); t2.moveNext$0();) {
            c = t2.get$current();
            if (J.matches$1$x(c, selector) === true)
              results.push(c);
          }
        t1 = new Q._ElementQuery(results, null, null, null, null);
        t1._prevObject = this;
        t1._context = this._context;
        return t1;
      }, function($receiver) {
        return this.children$1($receiver, null);
      }, "children$0", "call$1", "call$0", "get$children", 0, 2, 37, 1],
      addClass$1: function($name) {
        return J.forEach$1$ax(this._elements, new Q._ElementQuery_addClass_closure($name));
      },
      removeClass$1: function($name) {
        return J.forEach$1$ax(this._elements, new Q._ElementQuery_removeClass_closure($name));
      },
      append$1: function(_, $content) {
        return Q._domManip(this, $content, Q.dquery___appendFunc$closure());
      },
      clone$2: function(_, withDataAndEvents, deepWithDataAndEvents) {
        var t1 = new Q._ElementQuery(J.map$1$ax(this._elements, new Q._ElementQuery_clone_closure()), null, null, null, null);
        t1._prevObject = this;
        t1._context = this._context;
        return t1;
      },
      clone$0: function($receiver) {
        return this.clone$2($receiver, null, null);
      },
      clone$1: function($receiver, withDataAndEvents) {
        return this.clone$2($receiver, withDataAndEvents, null);
      },
      get$text: function(_) {
        var t1 = P.StringBuffer__writeAll("", J.map$1$ax(this._elements, new Q._ElementQuery_text_closure()), "");
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      set$text: function(_, value) {
        return J.forEach$1$ax(this._elements, new Q._ElementQuery_text_closure0(value));
      },
      $isElementQuery: 1,
      $isDQuery: 1,
      $asDQuery: function() {
        return [W.Element];
      },
      $isList: 1,
      $asList: function() {
        return [W.Element];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Element];
      }
    },
    _Query_ListMixin0: {
      "^": "_Query+ListMixin;",
      $as_Query: function() {
        return [W.Element];
      },
      $asList: function() {
        return [W.Element];
      },
      $asIterable: function() {
        return [W.Element];
      },
      $isList: 1,
      $isEfficientLength: 1,
      $isIterable: 1
    },
    _ElementQuery_addClass_closure: {
      "^": "Closure:10;name",
      call$1: function(e) {
        return J.get$classes$x(e).add$1(0, this.name);
      }
    },
    _ElementQuery_removeClass_closure: {
      "^": "Closure:10;name",
      call$1: function(e) {
        return J.get$classes$x(e).remove$1(0, this.name);
      }
    },
    _ElementQuery_clone_closure: {
      "^": "Closure:10;",
      call$1: [function(e) {
        var clone = J.clone$1$x(e, true);
        return clone;
      }, null, null, 2, 0, null, 0, [], "call"]
    },
    _ElementQuery_text_closure: {
      "^": "Closure:10;",
      call$1: [function(elem) {
        return J.get$text$x(elem);
      }, null, null, 2, 0, null, 20, [], "call"]
    },
    _ElementQuery_text_closure0: {
      "^": "Closure:10;value",
      call$1: function(e) {
        var t1 = J.getInterceptor$x(e);
        J.clear$0$ax(t1.get$children(e));
        t1.append$1(e, document.createTextNode(this.value));
        return;
      }
    },
    _appendFunc_closure: {
      "^": "Closure:10;ref",
      call$1: [function(elem) {
        return J.append$1$x(this.ref, elem);
      }, null, null, 2, 0, null, 20, [], "call"]
    }
  }], ["js", "package:js/js.dart",, Q, {
    "^": "",
    JS: {
      "^": "Object;name>"
    },
    _Anonymous: {
      "^": "Object;"
    }
  }], ["", "../client/pane/active_proposal_list_pane.dart",, U, {
    "^": "",
    ActiveProposalListPane: {
      "^": "ProposalListPane;paneClass,paneTitle,proposals,_isCollapsed,paneKey,borderId,borderElement,bodyId,bodyElement,paneMenuBar,onCollapse,onChanePaneKey",
      load$0: function(_) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, req, $async$temp1;
        var $async$load$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$self.paneClass = "proposals-active";
                $async$self.paneTitle = "Active Proposals";
                req = new X.ProposalQueryRequest(null, null, null, null);
                req.mode = "A";
                $async$temp1 = $async$self;
                $async$goto = 2;
                return P._asyncHelper(L.RpcLib_proposalQuery(req), $async$load$0, $async$completer);
              case 2:
                // returning from await.
                $async$temp1.proposals = $async$result;
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$load$0, $async$completer, null);
      }
    }
  }], ["", "../client/pane/base_pane.dart",, S, {
    "^": "",
    BasePane: {
      "^": "Object;paneKey<,borderElement<",
      get$isCollapsed: function(_) {
        return this._isCollapsed;
      },
      init$1: ["super$BasePane$init", function(pk) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this;
        var $async$init$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$self.paneKey = pk;
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$init$1, $async$completer, null);
      }],
      collapse$0: function(_) {
        var reopener, header, t1;
        if (this._isCollapsed)
          return;
        this._isCollapsed = true;
        J.remove$0$ax(this.borderElement.querySelector(".pane-body"));
        J.remove$0$ax(this.borderElement.querySelector(".pane-menubar"));
        reopener = W.AnchorElement_AnchorElement(null);
        J.set$href$x(reopener, C.JSString_methods.$add("#", this.paneKey._key));
        reopener.textContent = "reopen";
        header = this.borderElement.querySelector(".pane-header");
        header.toString;
        header.appendChild(document.createTextNode(" ("));
        header.appendChild(reopener);
        header.appendChild(document.createTextNode(")"));
        t1 = this.onCollapse;
        if (t1 != null)
          t1.call$1(this);
      },
      handleHotKey$1: function(e) {
        return false;
      },
      buildSkeletonHtml2$6$iconHoverText$iconName$paneClass$subtitle$subtitlePaneKey$title: function(iconHoverText, iconName, paneClass, subtitle, subtitlePaneKey, title) {
        var main2, t1, paneBorder, pane, paneHeader, paneSubheader, paneBody, paneReopen, paneClose, paneMin;
        title = M.WLib_chop(title == null ? "" : title, 45, true);
        main2 = document.querySelector("#main2");
        t1 = document;
        paneBorder = t1.createElement("div");
        paneBorder.id = this.borderId;
        paneBorder.className = "pane-border";
        t1 = document;
        pane = t1.createElement("div");
        pane.className = C.JSString_methods.$add("pane ", paneClass);
        t1 = document;
        paneHeader = t1.createElement("div");
        paneHeader.className = "pane-header";
        t1 = document;
        paneSubheader = t1.createElement("div");
        paneSubheader.className = "pane-subheader";
        t1 = document;
        paneBody = t1.createElement("div");
        paneBody.id = this.bodyId;
        paneBody.className = "pane-body";
        t1 = document;
        paneReopen = t1.createElement("button");
        paneReopen.className = "pane-reopen";
        paneReopen.title = "Refresh";
        t1 = document;
        paneClose = t1.createElement("button");
        paneClose.className = "pane-close";
        paneClose.title = "Close";
        t1 = document;
        paneMin = t1.createElement("button");
        paneMin.className = "pane-min";
        paneMin.title = "Collapse";
        paneBorder.appendChild(pane);
        pane.appendChild(paneHeader);
        if (iconName != null) {
          t1 = W.ImageElement_ImageElement(null, null, null);
          J.set$src$x(t1, "images/" + iconName + ".png");
          t1.title = iconHoverText == null ? "" : iconHoverText;
          paneHeader.appendChild(t1);
        }
        t1 = document;
        t1 = t1.createElement("span");
        t1.textContent = title;
        t1.className = "pane-title";
        paneHeader.appendChild(t1);
        paneHeader.appendChild(paneSubheader);
        if (subtitle != null) {
          t1 = W.AnchorElement_AnchorElement(null);
          t1.textContent = subtitle;
          J.set$href$x(t1, C.JSString_methods.$add("#", subtitlePaneKey));
          paneSubheader.appendChild(t1);
        }
        pane.appendChild(paneBody);
        paneBody.textContent = "loading...";
        t1 = M.ButtonBarBuilder$(pane, "pane-menubar");
        this.paneMenuBar = t1;
        t1._buttonsDiv.appendChild(paneMin);
        this.paneMenuBar._buttonsDiv.appendChild(paneClose);
        this.paneMenuBar._buttonsDiv.appendChild(paneReopen);
        main2.insertBefore(paneBorder, document.querySelector("#scrollspace"));
        this.borderElement = paneBorder;
        this.bodyElement = paneBody;
        t1 = J.get$onClick$x(paneMin);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new S.BasePane_buildSkeletonHtml2_closure(this)), false), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
        t1 = J.get$onClick$x(paneReopen);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new S.BasePane_buildSkeletonHtml2_closure0(this)), false), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
        t1 = J.get$onClick$x(paneClose);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new S.BasePane_buildSkeletonHtml2_closure1(this)), false), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      },
      buildSkeletonHtml2$4$iconHoverText$iconName$paneClass$title: function(iconHoverText, iconName, paneClass, title) {
        return this.buildSkeletonHtml2$6$iconHoverText$iconName$paneClass$subtitle$subtitlePaneKey$title(iconHoverText, iconName, paneClass, null, null, title);
      },
      buildSkeletonHtml2$3$iconName$paneClass$title: function(iconName, paneClass, title) {
        return this.buildSkeletonHtml2$6$iconHoverText$iconName$paneClass$subtitle$subtitlePaneKey$title(null, iconName, paneClass, null, null, title);
      },
      buildSkeletonHtml2$3$iconName$paneClass$title: function(iconName, paneClass, title) {
        return this.buildSkeletonHtml2$6$iconHoverText$iconName$paneClass$subtitle$subtitlePaneKey$title(null, iconName, paneClass, null, null, title);
      }
    },
    BasePane_buildSkeletonHtml2_closure: {
      "^": "Closure:1;$this",
      call$1: [function(e) {
        this.$this.collapse$0(0);
      }, null, null, 2, 0, null, 0, [], "call"]
    },
    BasePane_buildSkeletonHtml2_closure0: {
      "^": "Closure:1;$this",
      call$1: [function(e) {
        A.PaneFactory_create(this.$this.paneKey, true);
      }, null, null, 2, 0, null, 0, [], "call"]
    },
    BasePane_buildSkeletonHtml2_closure1: {
      "^": "Closure:1;$this",
      call$1: [function(e) {
        A.PaneFactory_delete(this.$this);
      }, null, null, 2, 0, null, 0, [], "call"]
    }
  }], ["", "../client/pane/base_tree_pane.dart",, B, {
    "^": "",
    BaseTreePane: {
      "^": "BasePane;",
      init$1: ["super$BaseTreePane$init", function(pk) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, t1, t2, $async$temp1;
        var $async$init$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 2;
                return P._asyncHelper($async$self.super$BasePane$init(pk), $async$init$1, $async$completer);
              case 2:
                // returning from await.
                t1 = $async$self.paneClass;
                $async$self.buildSkeletonHtml2$3$iconName$paneClass$title($async$self.paneIconName, t1, $async$self.paneTitle);
                t1 = new X.CategoryQueryRequest(null, null);
                t1.kind = $async$self.categoryKind;
                $async$temp1 = $async$self;
                $async$goto = 3;
                return P._asyncHelper(L.RpcLib_categoryQuery(t1), $async$init$1, $async$completer);
              case 3:
                // returning from await.
                $async$temp1._allCats = $async$result.get$categories();
                t1 = new B.BaseTreePane_init_convertImmediateChildren($async$self);
                t2 = new B.BaseTreePane_init_buildRecur(t1);
                t1 = t1.call$1(null);
                $async$self._topCats = t1;
                for (t1 = J.get$iterator$ax(t1); t1.moveNext$0();)
                  t2.call$1(t1.__interceptors$_current);
                t1 = $async$self.bodyElement;
                t1.textContent = "";
                t1 = new B.BaseTreePane_init_addToOutlineRecur(new F.OutlineBuilder(t1, $async$self.get$_nodeSelectHandler()));
                for (t2 = J.get$iterator$ax($async$self._topCats); t2.moveNext$0();)
                  t1.call$3(null, t2.__interceptors$_current, 0);
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$init$1, $async$completer, null);
      }],
      _nodeSelectHandler$1: [function(node) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, t1, detailBoxParent, t2, bar;
        var $async$_nodeSelectHandler$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self._detailBox;
                if (t1 != null)
                  J.remove$0$ax(t1);
                detailBoxParent = node.querySelector(".outline-childbox");
                t1 = document;
                t1 = t1.createElement("div");
                t1.className = "subform-group";
                $async$self._detailBox = t1;
                detailBoxParent.insertBefore(t1, detailBoxParent.firstChild);
                $async$self._selectedCatId = H.Primitives_parseInt(node.getAttribute("data-" + new W._DataAttributeMap(new W._ElementAttributeMap(node))._toHyphenedName$1("id")), null, null);
                t1 = J.firstWhere$2$orElse$ax($async$self._allCats, new B.BaseTreePane__nodeSelectHandler_closure($async$self), new B.BaseTreePane__nodeSelectHandler_closure0());
                $async$self._selectedCat = t1;
                if (t1 == null) {
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t2 = $async$self._detailBox;
                t1 = J.get$description$x(t1);
                V.HtmlLib_insertCollapsed1(t2, t1 == null ? "" : t1, 150, false, null);
                $async$goto = 3;
                return P._asyncHelper($async$self.insertDetails$2($async$self._detailBox, $async$self._selectedCatId), $async$_nodeSelectHandler$1, $async$completer);
              case 3:
                // returning from await.
                bar = M.ButtonBarBuilder$($async$self._detailBox, null);
                $async$self.insertDetailButtons$2(bar, $async$self._selectedCatId);
                if ($.Globals_isSiteAdmin === true) {
                  bar.addButton$2("Delete Category", $async$self.get$deleteCategoryHandler());
                  bar.addButton$2("Create Category", $async$self.get$createCategoryHandler());
                  bar.addButton$2("Edit Category", $async$self.get$editCategoryHandler());
                  bar.addButton$2("Move Category", $async$self.get$moveCategoryHandler());
                  bar.addButton$2("Recategorize Contents", $async$self.get$moveContentsHandler());
                }
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$_nodeSelectHandler$1, $async$completer, null);
      }, "call$1", "get$_nodeSelectHandler", 2, 0, 50],
      insertDetails$2: function(detailBox, catId) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError;
        var $async$insertDetails$2 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$insertDetails$2, $async$completer, null);
      },
      insertDetailButtons$2: function(bar, catId) {
      },
      deleteCategoryHandler$1: [function(e) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, dialog, req, $async$temp1;
        var $async$deleteCategoryHandler$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                dialog = new L.ConfirmDialog("Delete category? Items at this level will be moved up a level", $.$get$ConfirmDialog_YesNoOptions(), false, null, null, null);
                dialog.DialogBox$0();
                $async$temp1 = J;
                $async$goto = 3;
                return P._asyncHelper(dialog.show$0(0), $async$deleteCategoryHandler$1, $async$completer);
              case 3:
                // returning from await.
                if (!$async$temp1.$eq$($async$result, 0)) {
                  // goto return
                  $async$goto = 1;
                  break;
                }
                req = new X.CategoryDeleteRequest(null, null, null);
                req.catId = $async$self._selectedCatId;
                req.kind = $async$self.categoryKind;
                $async$goto = 4;
                return P._asyncHelper(L.RpcLib_command("CategoryDelete", req), $async$deleteCategoryHandler$1, $async$completer);
              case 4:
                // returning from await.
                if ($async$result.get$isOK())
                  A.PaneFactory_create($async$self.paneKey, true);
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$deleteCategoryHandler$1, $async$completer, null);
      }, "call$1", "get$deleteCategoryHandler", 2, 0, 12],
      createCategoryHandler$1: [function(e) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, t1, dlg;
        var $async$createCategoryHandler$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.categoryKind;
                dlg = new S.CategoryDialog($async$self._selectedCatId, null, t1, J.get$title$x($async$self._selectedCat), null, null, false, null, null, null);
                dlg.DialogBox$0();
                $async$goto = 2;
                return P._asyncHelper(dlg.show$0(0), $async$createCategoryHandler$1, $async$completer);
              case 2:
                // returning from await.
                if ($async$result === true)
                  A.PaneFactory_create($async$self.paneKey, true);
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$createCategoryHandler$1, $async$completer, null);
      }, "call$1", "get$createCategoryHandler", 2, 0, 12],
      editCategoryHandler$1: [function(e) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, t1, dlg;
        var $async$editCategoryHandler$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.categoryKind;
                dlg = new S.CategoryDialog(null, $async$self._selectedCatId, t1, null, J.get$title$x($async$self._selectedCat), J.get$description$x($async$self._selectedCat), false, null, null, null);
                dlg.DialogBox$0();
                $async$goto = 2;
                return P._asyncHelper(dlg.show$0(0), $async$editCategoryHandler$1, $async$completer);
              case 2:
                // returning from await.
                if ($async$result === true)
                  A.PaneFactory_create($async$self.paneKey, true);
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$editCategoryHandler$1, $async$completer, null);
      }, "call$1", "get$editCategoryHandler", 2, 0, 12],
      moveCategoryHandler$1: [function(e) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, dlg, referenceCatId, referenceCat, dlg2, moveMode, req;
        var $async$moveCategoryHandler$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                dlg = new K.NodeSelectDialog($async$self._topCats, false, null, null, null);
                dlg.DialogBox$0();
                $async$goto = 3;
                return P._asyncHelper(dlg.show$0(0), $async$moveCategoryHandler$1, $async$completer);
              case 3:
                // returning from await.
                referenceCatId = $async$result;
                if (referenceCatId == null) {
                  // goto return
                  $async$goto = 1;
                  break;
                }
                referenceCat = J.singleWhere$1$ax($async$self._allCats, new B.BaseTreePane_moveCategoryHandler_closure(referenceCatId));
                dlg2 = new L.CategoryMoveModeDialog(J.get$title$x($async$self._selectedCat), J.get$title$x(referenceCat), false, null, null, null);
                dlg2.DialogBox$0();
                $async$goto = 4;
                return P._asyncHelper(dlg2.show$0(0), $async$moveCategoryHandler$1, $async$completer);
              case 4:
                // returning from await.
                moveMode = $async$result;
                if (moveMode == null) {
                  // goto return
                  $async$goto = 1;
                  break;
                }
                req = new X.CategorySaveRequest(null, null, null, null, null, null, null);
                req.catId = $async$self._selectedCatId;
                req.kind = $async$self.categoryKind;
                req.referenceId = referenceCatId;
                req.referenceMode = moveMode;
                req.title = J.get$title$x($async$self._selectedCat);
                req.description = J.get$description$x($async$self._selectedCat);
                $async$goto = 5;
                return P._asyncHelper(L.RpcLib_command("CategorySave", req), $async$moveCategoryHandler$1, $async$completer);
              case 5:
                // returning from await.
                if ($async$result.get$isOK())
                  A.PaneFactory_create($async$self.paneKey, true);
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$moveCategoryHandler$1, $async$completer, null);
      }, "call$1", "get$moveCategoryHandler", 2, 0, 12],
      moveContentsHandler$1: [function(e) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, dlg1, titlesToMove, dlg2, targetCatId, targetCat, dlg3, idsToMove, req, $async$temp1;
        var $async$moveContentsHandler$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                dlg1 = new F.SelectMultipleDialog($async$self.getContentTitles$0(), "Choose items to move to a new category", false, null, null, null);
                dlg1.DialogBox$0();
                $async$goto = 3;
                return P._asyncHelper(dlg1.show$0(0), $async$moveContentsHandler$1, $async$completer);
              case 3:
                // returning from await.
                titlesToMove = $async$result;
                if (titlesToMove == null) {
                  // goto return
                  $async$goto = 1;
                  break;
                }
                dlg2 = new K.NodeSelectDialog($async$self._topCats, false, null, null, null);
                dlg2.DialogBox$0();
                $async$goto = 4;
                return P._asyncHelper(dlg2.show$0(0), $async$moveContentsHandler$1, $async$completer);
              case 4:
                // returning from await.
                targetCatId = $async$result;
                if (targetCatId == null) {
                  // goto return
                  $async$goto = 1;
                  break;
                }
                targetCat = J.singleWhere$1$ax($async$self._allCats, new B.BaseTreePane_moveContentsHandler_closure(targetCatId));
                dlg3 = new L.ConfirmDialog(H.S(J.get$length$asx(titlesToMove)) + ' items will be moved to the category "' + H.S(J.get$title$x(targetCat)) + '". Continue?', $.$get$ConfirmDialog_YesNoOptions(), false, null, null, null);
                dlg3.DialogBox$0();
                $async$temp1 = J;
                $async$goto = 5;
                return P._asyncHelper(dlg3.show$0(0), $async$moveContentsHandler$1, $async$completer);
              case 5:
                // returning from await.
                if (!$async$temp1.$eq$($async$result, 0)) {
                  // goto return
                  $async$goto = 1;
                  break;
                }
                idsToMove = $async$self.getContentIds$1(titlesToMove);
                req = new X.CategoryMoveContentsRequest(null, null, null, null);
                req.catId = targetCatId;
                req.kind = $async$self.categoryKind;
                req.relatedIds = idsToMove;
                $async$goto = 6;
                return P._asyncHelper(L.RpcLib_command("CategoryMoveContents", req), $async$moveContentsHandler$1, $async$completer);
              case 6:
                // returning from await.
                if ($async$result.get$isOK())
                  A.PaneFactory_create($async$self.paneKey, true);
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$moveContentsHandler$1, $async$completer, null);
      }, "call$1", "get$moveContentsHandler", 2, 0, 12],
      getContentTitles$0: function() {
        return;
      },
      getContentIds$1: function(contentTitles) {
        return;
      }
    },
    BaseTreePane_init_convertImmediateChildren: {
      "^": "Closure:52;$this",
      call$1: function(parentId) {
        return J.where$1$ax(this.$this._allCats, new B.BaseTreePane_init_convertImmediateChildren_closure(parentId)).map$1(0, new B.BaseTreePane_init_convertImmediateChildren_closure0()).toList$0(0);
      }
    },
    BaseTreePane_init_convertImmediateChildren_closure: {
      "^": "Closure:1;parentId",
      call$1: function(c) {
        return J.$eq$(c.get$parentId(), this.parentId);
      }
    },
    BaseTreePane_init_convertImmediateChildren_closure0: {
      "^": "Closure:1;",
      call$1: [function(c) {
        var t1, t2;
        t1 = new L.CategoryNode(null, null, null, null, null);
        t2 = J.getInterceptor$x(c);
        t1.title = t2.get$title(c);
        t1.description = t2.get$description(c);
        t1.id = t2.get$id(c);
        return t1;
      }, null, null, 2, 0, null, 42, [], "call"]
    },
    BaseTreePane_init_buildRecur: {
      "^": "Closure:53;convertImmediateChildren",
      call$1: function(node) {
        var t1, children;
        t1 = J.getInterceptor$x(node);
        children = this.convertImmediateChildren.call$1(t1.get$id(node));
        t1.set$children(node, children);
        for (t1 = J.get$iterator$ax(children); t1.moveNext$0();)
          this.call$1(t1.__interceptors$_current);
      }
    },
    BaseTreePane_init_addToOutlineRecur: {
      "^": "Closure:36;outline",
      call$3: function(parentElement, node, level) {
        var t1, el, t2;
        t1 = J.getInterceptor$x(node);
        el = this.outline.add$4$childrenCollapsed(0, parentElement, t1.get$title(node), J.toString$0$(t1.get$id(node)), level > 1);
        if (t1.get$children(node) != null)
          for (t1 = J.get$iterator$ax(t1.get$children(node)), t2 = level + 1; t1.moveNext$0();)
            this.call$3(el, t1.get$current(), t2);
      }
    },
    BaseTreePane__nodeSelectHandler_closure: {
      "^": "Closure:1;$this",
      call$1: function(c) {
        return J.$eq$(J.get$id$x(c), this.$this._selectedCatId);
      }
    },
    BaseTreePane__nodeSelectHandler_closure0: {
      "^": "Closure:4;",
      call$0: function() {
        return;
      }
    },
    BaseTreePane_moveCategoryHandler_closure: {
      "^": "Closure:1;referenceCatId",
      call$1: function(i) {
        return J.$eq$(J.get$id$x(i), this.referenceCatId);
      }
    },
    BaseTreePane_moveContentsHandler_closure: {
      "^": "Closure:1;targetCatId",
      call$1: function(c) {
        return J.$eq$(J.get$id$x(c), this.targetCatId);
      }
    }
  }], ["", "../client/lib/button_bar_builder.dart",, M, {
    "^": "",
    ButtonBarBuilder: {
      "^": "Object;_buttonsDiv",
      addButton$2: function(text, handler) {
        var t1, b;
        t1 = document;
        b = t1.createElement("button");
        b.textContent = text;
        b.className = "button";
        t1 = J.get$onClick$x(b);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new M.ButtonBarBuilder_addButton_closure(handler)), false), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
        this._buttonsDiv.appendChild(b);
        return b;
      },
      ButtonBarBuilder$2$className: function($parent, className) {
        var t1, t2, t3;
        if (className != null) {
          t1 = this._buttonsDiv;
          t2 = t1.className;
          t3 = " " + className;
          if (t2 == null)
            return t2.$add();
          t1.className = t2 + t3;
        }
        $parent.appendChild(this._buttonsDiv);
      },
      static: {
        ButtonBarBuilder$: function($parent, className) {
          var t1 = document;
          t1 = t1.createElement("div");
          t1.className = "button-bar";
          t1 = new M.ButtonBarBuilder(t1);
          t1.ButtonBarBuilder$2$className($parent, className);
          return t1;
        }
      }
    },
    ButtonBarBuilder_addButton_closure: {
      "^": "Closure:1;handler",
      call$1: [function(e) {
        var t1 = $.ButtonBarBuilder_systemButtonHandler;
        if (t1 != null)
          t1.call$0();
        this.handler.call$1(e);
      }, null, null, 2, 0, null, 0, [], "call"]
    }
  }], ["", "../client/lib/card_builder.dart",, Q, {
    "^": "",
    CardBuilder: {
      "^": "Object;_card_builder$_parent,_card_builder$_table",
      addAny$1: function(caption) {
        var row, t1;
        row = J.addRow$0$x(this._card_builder$_table);
        t1 = W._ElementFactoryProvider_createElement_tag("th", null);
        J.set$text$x(t1, caption);
        row.appendChild(t1);
        return J.addCell$0$x(row);
      },
      addText$3$useCollapser: function(caption, text, useCollapser) {
        var c = this.addAny$1(caption);
        if (useCollapser)
          V.HtmlLib_insertCollapsed1(c, text, 150, false, null);
        else
          c.textContent = text;
      },
      addText$2: function(caption, text) {
        return this.addText$3$useCollapser(caption, text, false);
      }
    }
  }], ["", "../client/dialog/category_dialog.dart",, S, {
    "^": "",
    CategoryDialog: {
      "^": "DialogBox;_referenceCatId,_existingCatId,_category_dialog$_kind,_category_dialog$_referenceTitle,_existingTitle,_existingDescription,_showing,_continuation,_backdrop,frame",
      build$0: function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, t1, form, titleInput, descrInput, subform, sameLevelRadio, subLevelRadio, t2, t3, t4, bar;
        var $async$build$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = {};
                form = O.FormBuilder$($async$self.frame, "Category");
                titleInput = form.addInput$4("Category title", 400, 500, $async$self._existingTitle);
                descrInput = form.addTextArea$5("Description", 400, 90, 10000, $async$self._existingDescription);
                t1.sameLevelRadio = null;
                t1.subLevelRadio = null;
                if ($async$self._existingCatId == null) {
                  subform = form.addSubformFrame$1("Position");
                  sameLevelRadio = W.InputElement_InputElement("radio");
                  J.set$name$x(sameLevelRadio, "catmode");
                  t1.sameLevelRadio = sameLevelRadio;
                  subLevelRadio = W.InputElement_InputElement("radio");
                  t2 = J.getInterceptor$x(subLevelRadio);
                  t2.set$name(subLevelRadio, "catmode");
                  t2.set$checked(subLevelRadio, true);
                  t1.subLevelRadio = subLevelRadio;
                  t2 = subform._parent;
                  t2.appendChild(sameLevelRadio);
                  t3 = $async$self._category_dialog$_referenceTitle;
                  t4 = "New category at same level as " + H.S(t3);
                  t2.appendChild(document.createTextNode(t4));
                  J.insertAdjacentHtml$4$treeSanitizer$validator$x(t2, "beforeend", "<br/>", null, null);
                  t2.appendChild(subLevelRadio);
                  t3 = "New category as sub-category of " + H.S(t3);
                  t2.appendChild(document.createTextNode(t3));
                }
                bar = M.ButtonBarBuilder$($async$self.frame, null);
                bar.addButton$2("Save", new S.CategoryDialog_build_closure(t1, $async$self, titleInput, descrInput));
                bar.addButton$2("Cancel", new S.CategoryDialog_build_closure0($async$self));
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$build$0, $async$completer, null);
      }
    },
    CategoryDialog_build_closure: {
      "^": "Closure:6;_box_0,$this,titleInput,descrInput",
      call$1: function(e) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, t1, t2, referenceMode, req;
        var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self._box_0;
                t2 = t1.sameLevelRadio;
                referenceMode = t2 != null && J.get$checked$x(t2) === true ? "S" : "";
                t1 = t1.subLevelRadio;
                if (t1 != null && J.get$checked$x(t1) === true)
                  referenceMode = "C";
                req = new X.CategorySaveRequest(null, null, null, null, null, null, null);
                t1 = $async$self.$this;
                req.catId = t1._existingCatId;
                req.kind = t1._category_dialog$_kind;
                req.referenceId = t1._referenceCatId;
                req.referenceMode = referenceMode;
                req.title = J.trim$0$s(J.get$value$x($async$self.titleInput));
                req.description = J.trim$0$s(J.get$value$x($async$self.descrInput));
                $async$goto = 2;
                return P._asyncHelper(L.RpcLib_command("CategorySave", req), $async$call$1, $async$completer);
              case 2:
                // returning from await.
                if ($async$result.get$isOK())
                  t1.hide$1(true);
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$call$1, $async$completer, null);
      }
    },
    CategoryDialog_build_closure0: {
      "^": "Closure:1;$this",
      call$1: function(e) {
        this.$this.hide$1(false);
      }
    }
  }], ["", "../client/dialog/category_move_mode_dialog.dart",, L, {
    "^": "",
    CategoryMoveModeDialog: {
      "^": "DialogBox;_category_move_mode_dialog$_title,_referenceTitle,_showing,_continuation,_backdrop,frame",
      dialogHeight$0: function() {
        return 100;
      },
      build$0: function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, sameLevelRadio, subLevelRadio, t1, t2, t3, t4, bar;
        var $async$build$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                O.FormBuilder$($async$self.frame, "Category Move");
                sameLevelRadio = W.InputElement_InputElement("radio");
                J.set$name$x(sameLevelRadio, "catmode");
                subLevelRadio = W.InputElement_InputElement("radio");
                t1 = J.getInterceptor$x(subLevelRadio);
                t1.set$name(subLevelRadio, "catmode");
                t1.set$checked(subLevelRadio, true);
                t1 = $async$self.frame;
                t1.appendChild(sameLevelRadio);
                t2 = $async$self._category_move_mode_dialog$_title;
                t3 = $async$self._referenceTitle;
                t4 = H.S(t2) + " at same level as " + H.S(t3);
                t1.appendChild(document.createTextNode(t4));
                J.insertAdjacentHtml$4$treeSanitizer$validator$x(t1, "beforeend", "<br/>", null, null);
                t1.appendChild(subLevelRadio);
                t3 = H.S(t2) + " as sub-category of " + H.S(t3);
                t1.appendChild(document.createTextNode(t3));
                bar = M.ButtonBarBuilder$($async$self.frame, null);
                bar.addButton$2("OK", new L.CategoryMoveModeDialog_build_closure($async$self, sameLevelRadio, subLevelRadio));
                bar.addButton$2("Cancel", new L.CategoryMoveModeDialog_build_closure0($async$self));
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$build$0, $async$completer, null);
      }
    },
    CategoryMoveModeDialog_build_closure: {
      "^": "Closure:1;$this,sameLevelRadio,subLevelRadio",
      call$1: function(e) {
        var t1 = this.sameLevelRadio;
        if (t1 != null && J.get$checked$x(t1) === true)
          this.$this.hide$1("S");
        t1 = this.subLevelRadio;
        if (t1 != null && J.get$checked$x(t1) === true)
          this.$this.hide$1("C");
      }
    },
    CategoryMoveModeDialog_build_closure0: {
      "^": "Closure:1;$this",
      call$1: function(e) {
        this.$this.hide$1(null);
      }
    }
  }], ["", "../client/lib/category_node.dart",, L, {
    "^": "",
    CategoryNode: {
      "^": "Object;title*,description*,id*,parent>,children*"
    }
  }], ["", "../client/client_store.dart",, E, {
    "^": "",
    ClientStore_lat: function() {
      var t1 = $.$get$ClientStore__store().getItem("lat");
      if (t1 == null)
        t1 = "0";
      return H.Primitives_parseDouble(t1, new E.ClientStore_lat_closure());
    },
    ClientStore_lon: function() {
      var t1 = $.$get$ClientStore__store().getItem("lon");
      if (t1 == null)
        t1 = "0";
      return H.Primitives_parseDouble(t1, new E.ClientStore_lon_closure());
    },
    ClientStore_registerReceiveMessage: function(f) {
      var t1 = H.setRuntimeTypeInfo(new W._EventStream(window, "storage", false), [H.getTypeArgumentByIndex(C.EventStreamProvider_storage, 0)]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new E.ClientStore_registerReceiveMessage_closure(f)), false), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    },
    ClientStore_lat_closure: {
      "^": "Closure:1;",
      call$1: function(bad) {
        return 0;
      }
    },
    ClientStore_lon_closure: {
      "^": "Closure:1;",
      call$1: function(bad) {
        return 0;
      }
    },
    ClientStore_registerReceiveMessage_closure: {
      "^": "Closure:1;f",
      call$1: [function(e) {
        this.f.call$1(C.JsonCodec_null_null.decode$1(J.get$newValue$x(e)));
      }, null, null, 2, 0, null, 0, [], "call"]
    }
  }], ["", "../client/dialog/confirm_dialog.dart",, L, {
    "^": "",
    ConfirmDialog: {
      "^": "DialogBox;_confirm_dialog$_message,_options,_showing,_continuation,_backdrop,frame",
      dialogHeight$0: function() {
        return 100;
      },
      build$0: function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, t1, bar, t2, t3, _i;
        var $async$build$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.frame;
                t1.toString;
                t1.appendChild(document.createTextNode($async$self._confirm_dialog$_message));
                t1 = new L.ConfirmDialog_build_buttonHandler($async$self);
                bar = M.ButtonBarBuilder$($async$self.frame, null);
                for (t2 = $async$self._options, t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i)
                  bar.addButton$2(t2[_i], t1);
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$build$0, $async$completer, null);
      }
    },
    ConfirmDialog_build_buttonHandler: {
      "^": "Closure:35;$this",
      call$1: function(e) {
        var t1 = this.$this;
        t1.hide$1(C.JSArray_methods.indexOf$1(t1._options, J.get$text$x(J.get$currentTarget$x(e))));
      }
    }
  }], ["", "../client/dialog/conv_dialog.dart",, K, {
    "^": "",
    ConvDialog: {
      "^": "DialogBox;_convId,_fromConvId,_projectId,_conv_dialog$_eventId,_openingPostId,_seedPostText,_convRules,_showing,_continuation,_backdrop,frame",
      dialogHeight$0: function() {
        return 160;
      },
      build$0: function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, t1, form, titleInput, postMaxSizeInput, userDailyMaxInput, bar;
        var $async$build$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = new X.ConvGetRulesResponse(new X.APIResponseBase(null, null, "Y", null), null, null, null);
                t1.postMaxSize = 5000;
                t1.userDailyMax = 3;
                $async$self._convRules = t1;
                form = O.FormBuilder$($async$self.frame, "Conversation");
                titleInput = form.addInput$4("Title", 400, 500, J.get$title$x($async$self._convRules));
                postMaxSizeInput = W.InputElement_InputElement("number");
                t1 = J.getInterceptor$x(postMaxSizeInput);
                t1.set$min(postMaxSizeInput, "10");
                t1.set$max(postMaxSizeInput, "100000");
                t1.set$valueAsNumber(postMaxSizeInput, $async$self._convRules.get$postMaxSize());
                form.addAny$2("Maximum post size (characters)", postMaxSizeInput);
                userDailyMaxInput = W.InputElement_InputElement("number");
                t1 = J.getInterceptor$x(userDailyMaxInput);
                t1.set$min(userDailyMaxInput, "1");
                t1.set$max(userDailyMaxInput, "100000");
                t1.set$valueAsNumber(userDailyMaxInput, $async$self._convRules.get$userDailyMax());
                form.addAny$2("Maximum times per day a user can post", userDailyMaxInput);
                bar = M.ButtonBarBuilder$($async$self.frame, null);
                bar.addButton$2("Save", new K.ConvDialog_build_closure($async$self, titleInput, postMaxSizeInput, userDailyMaxInput));
                bar.addButton$2("Cancel", new K.ConvDialog_build_closure0($async$self));
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$build$0, $async$completer, null);
      }
    },
    ConvDialog_build_closure: {
      "^": "Closure:6;$this,titleInput,postMaxSizeInput,userDailyMaxInput",
      call$1: function(e) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, req, t1, response;
        var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                req = new X.ConvSaveRequest(null, null, null, null, null, null, null, null, null);
                t1 = $async$self.$this;
                req.convId = t1._convId;
                req.projectId = t1._projectId;
                req.eventId = t1._conv_dialog$_eventId;
                req.fromConvId = t1._fromConvId;
                req.openingPostId = t1._openingPostId;
                req.title = J.trim$0$s(J.get$value$x($async$self.titleInput));
                req.postMaxSize = J.get$valueAsNumber$x($async$self.postMaxSizeInput);
                req.userDailyMax = J.get$valueAsNumber$x($async$self.userDailyMaxInput);
                $async$goto = 2;
                return P._asyncHelper(L.RpcLib_command("ConvSave", req), $async$call$1, $async$completer);
              case 2:
                // returning from await.
                response = $async$result;
                if (response.get$isOK())
                  t1.hide$1(response.get$newId());
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$call$1, $async$completer, null);
      }
    },
    ConvDialog_build_closure0: {
      "^": "Closure:1;$this",
      call$1: function(e) {
        this.$this.hide$1(null);
      }
    }
  }], ["", "../client/pane/conv_pane.dart",, R, {
    "^": "",
    ConvPane: {
      "^": "BasePane;_conv_pane$_convId,_conv,_hilite,_isJoined,_isManager,_postDiv,_postExpandBox,_postExpandBoxForPost,_autoReadPositionKey,postElements,_lastPost,_isCollapsed,paneKey,borderId,borderElement,bodyId,bodyElement,paneMenuBar,onCollapse,onChanePaneKey",
      init$1: function(pk) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, t1, part2, t2, card, postNo, post, replyAllowed, lastpos;
        var $async$init$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = pk._keyParts;
                if (1 >= t1.length) {
                  $async$returnValue = H.ioore(t1, 1);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                $async$self._conv_pane$_convId = H.Primitives_parseInt(t1[1], null, null);
                t1 = pk._keyParts;
                if (t1.length > 2) {
                  part2 = t1[2];
                  t1 = J.getInterceptor$s(part2);
                  if (t1.startsWith$1(part2, "h="))
                    $async$self._hilite = t1.substring$1(part2, 2);
                }
                $async$goto = 3;
                return P._asyncHelper($async$self.super$BasePane$init(pk), $async$init$1, $async$completer);
              case 3:
                // returning from await.
                t1 = new X.ConvGetRequest(null, null, null, null, null);
                t1.convId = $async$self._conv_pane$_convId;
                t1.mode = "U";
                $async$goto = 4;
                return P._asyncHelper(L.RpcLib_convGet(t1), $async$init$1, $async$completer);
              case 4:
                // returning from await.
                t1 = $async$result;
                $async$self._conv = t1;
                $async$self._isJoined = J.$eq$(t1.get$isJoined(), "Y");
                $async$self._isManager = J.$eq$($async$self._conv.get$isManager(), "Y");
                t1 = J.get$title$x($async$self._conv);
                $async$self.buildSkeletonHtml2$6$iconHoverText$iconName$paneClass$subtitle$subtitlePaneKey$title("Conversation", "paneconv", "conv", "in project: " + H.S($async$self._conv.get$parentTitle()), $async$self._conv.get$parentPaneKey(), t1);
                t1 = $async$self.bodyElement;
                t1.textContent = "";
                t2 = document;
                t2 = t2.createElement("table");
                t2.className = "cardtable";
                card = new Q.CardBuilder(null, t2);
                card._card_builder$_parent = t1;
                t1.appendChild(t2);
                card.addText$2("Title", J.get$title$x($async$self._conv));
                if (!$async$self._isJoined)
                  card.addText$2("Joined", "You have not yet joined this conversation");
                if ($async$self._conv.get$deleteMessage() != null)
                  card.addText$2("Status", $async$self._conv.get$deleteMessage());
                $async$self.bodyElement.appendChild($async$self._postDiv);
                for (t1 = J.get$iterator$ax($async$self._conv.get$posts()), postNo = 0; t1.moveNext$0();) {
                  post = t1.get$current();
                  $async$self._appendOnePost$1(post);
                  if (!$async$self._isJoined)
                    break;
                  if (postNo === 0 && J.$eq$($async$self._conv.get$anySkipped(), "Y"))
                    $async$self._appendMissingPosts$0();
                  ++postNo;
                  $async$self._lastPost = post;
                }
                if (J.$eq$($async$self._conv.get$replyAllowed(), "Y"))
                  $async$self._buildReplyControls$0();
                else {
                  t1 = document;
                  replyAllowed = t1.createElement("div");
                  replyAllowed.textContent = $async$self._conv.get$replyAllowedDesc();
                  replyAllowed.className = "instruct";
                  $async$self.bodyElement.appendChild(replyAllowed);
                }
                $async$self._buildMainButtonBar$0();
                if (J.$gt$n(J.get$length$asx($async$self._conv.get$posts()), 0)) {
                  lastpos = M.WLib_wireToDateTime(J.get$last$ax($async$self._conv.get$posts()).get$createdAtWDT());
                  if (M.WLib_wireToDateTime($async$self._conv.get$readPositionWDT())._value < lastpos._value) {
                    t1 = "c" + H.S($async$self._conv_pane$_convId) + "_readpos";
                    $async$self._autoReadPositionKey = t1;
                    $.$get$Globals_doOnUserAction().$indexSet(0, t1, new R.ConvPane_init_closure($async$self, lastpos));
                  }
                }
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$init$1, $async$completer, null);
      },
      _appendOnePost$2$afterElement: function(post, afterElement) {
        var t1, isFromServer, createdAt, readPos, isUnread, t2, postEl, t3, readDot, avatar, e, ago, div, mode, pos, t4, expandLinkText, expandWrap, expand, expandImg;
        t1 = {};
        isFromServer = post.get$createdAtWDT() != null;
        createdAt = M.WLib_wireToDateTime(post.get$createdAtWDT());
        readPos = M.WLib_wireToDateTime(this._conv.get$readPositionWDT());
        isUnread = isFromServer && createdAt._value > readPos._value;
        t2 = document;
        postEl = t2.createElement("div");
        postEl.className = "post";
        t2 = afterElement == null;
        if (t2)
          this._postDiv.appendChild(postEl);
        else
          J.insertAdjacentElement$2$x(afterElement, "afterEnd", postEl);
        this.postElements.$indexSet(0, post, postEl);
        if (isFromServer) {
          t3 = document;
          readDot = t3.createElement("div");
          readDot.className = "read-dot";
          postEl.appendChild(readDot);
          J.insertAdjacentHtml$4$treeSanitizer$validator$x(readDot, "beforeend", '<img src="images/' + (isUnread ? "unread-dot.png" : "read-dot.png") + '" title="Set read/unread"/>', null, null);
          t3 = document;
          avatar = t3.createElement("div");
          avatar.className = "avatar";
          postEl.appendChild(avatar);
          if (post.get$avatarUrl() != null)
            avatar.appendChild(W.ImageElement_ImageElement(null, post.get$avatarUrl(), null));
          t3 = document;
          e = t3.createElement("a");
          e.className = "nick";
          e.textContent = post.get$authorNick();
          J.set$href$x(e, "#user/" + H.S(post.get$authorId()));
          postEl.appendChild(e);
          t3 = document;
          ago = t3.createElement("span");
          ago.className = "ago";
          ago.textContent = post.get$ago();
          postEl.appendChild(ago);
        } else
          readDot = null;
        t3 = document;
        div = t3.createElement("div");
        postEl.appendChild(div);
        mode = post.get$collapseMode();
        pos = post.get$collapsePosition();
        t3 = J.getInterceptor(mode);
        t4 = t3.$eq(mode, "Normal");
        if (t3.$eq(mode, "AuthorBlocked"))
          expandLinkText = "Show content from blocked author";
        else if (t3.$eq(mode, "PostInappropriate"))
          expandLinkText = "View inappropriate content";
        else if (t3.$eq(mode, "UserSuspcicious"))
          expandLinkText = "View possibly inappropriate content";
        else
          expandLinkText = t3.$eq(mode, "Trigger") ? "Continue past trigger warning" : "More";
        V.HtmlLib_insertCollapsed1(div, post.get$ptext(), pos, !t4, expandLinkText);
        this._hilite != null;
        if (post.get$imageUrl() != null && J.$gt$n(J.get$length$asx(post.get$imageUrl()), 0)) {
          t3 = W.ImageElement_ImageElement(null, post.get$imageUrl(), null);
          t3.className = "post-image";
          postEl.appendChild(t3);
        }
        t1.expandImg = null;
        if (isFromServer) {
          t3 = document;
          expandWrap = t3.createElement("div");
          expandWrap.className = "post-expand-wrap";
          t3 = document;
          expand = t3.createElement("div");
          expand.className = "post-expand";
          expand.title = "Options for this post";
          expandImg = W.ImageElement_ImageElement(null, null, null);
          J.set$src$x(expandImg, "images/post-expand.png");
          t1.expandImg = expandImg;
          expand.appendChild(expandImg);
          if (t2)
            this._postDiv.appendChild(expandWrap);
          else
            J.insertAdjacentElement$2$x(afterElement, "afterEnd", expandWrap);
          expandWrap.appendChild(expand);
        } else
          expand = null;
        if (expand != null) {
          t2 = J.get$onClick$x(expand);
          t2 = H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._html$_target, t2._eventType, W._wrapZone(new R.ConvPane__appendOnePost_closure(t1, this, post, postEl)), false), [H.getTypeArgumentByIndex(t2, 0)]);
          t1 = t2._html$_onData;
          if (t1 != null && t2._pauseCount <= 0)
            J.addEventListener$3$x(t2._html$_target, t2._eventType, t1, false);
        }
        if (readDot != null) {
          t1 = J.get$onClick$x(readDot);
          t1 = H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new R.ConvPane__appendOnePost_closure0(this, post, isUnread)), false), [H.getTypeArgumentByIndex(t1, 0)]);
          t2 = t1._html$_onData;
          if (t2 != null && t1._pauseCount <= 0)
            J.addEventListener$3$x(t1._html$_target, t1._eventType, t2, false);
        }
        return postEl;
      },
      _appendOnePost$1: function(post) {
        return this._appendOnePost$2$afterElement(post, null);
      },
      _resetReadDotImages$1: function(readpos) {
        this.postElements.forEach$1(0, new R.ConvPane__resetReadDotImages_closure(readpos));
      },
      _buildPostExpandBox$2: function(post, postEl) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, t1, expandWrap;
        var $async$_buildPostExpandBox$2 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self._postExpandBoxForPost;
                if (t1 != null) {
                  expandWrap = t1.nextElementSibling;
                  if (J.get$classes$x(expandWrap).contains$1(0, "post-expand-wrap"))
                    J.set$src$x(expandWrap.querySelector("img"), "images/post-expand.png");
                }
                $async$self._postExpandBoxForPost = postEl;
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$_buildPostExpandBox$2, $async$completer, null);
      },
      _appendMissingPosts$0: function() {
        var t1, expander, t2;
        t1 = document;
        expander = t1.createElement("button");
        expander.textContent = "Show older posts";
        this._postDiv.appendChild(expander);
        t1 = J.get$onClick$x(expander);
        t1 = H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new R.ConvPane__appendMissingPosts_closure(this, expander)), false), [H.getTypeArgumentByIndex(t1, 0)]);
        t2 = t1._html$_onData;
        if (t2 != null && t1._pauseCount <= 0)
          J.addEventListener$3$x(t1._html$_target, t1._eventType, t2, false);
      },
      _buildReplyControls$0: function() {
        var t1, t2, replyInp, t3, postControlsBox, replyAllowed, twInp, t4, imageButton, postButton;
        t1 = {};
        t2 = document;
        replyInp = t2.createElement("textarea");
        t2 = J.getInterceptor$x(replyInp);
        t2.set$rows(replyInp, 1);
        t2.set$placeholder(replyInp, "Reply...");
        t2.set$maxLength(replyInp, this._conv.get$replyMaxLength());
        t3 = replyInp.style;
        t3.width = "100%";
        if (J.$eq$(J.get$length$asx(this._conv.get$posts()), 0))
          t2.set$placeholder(replyInp, "Start conversation");
        this.bodyElement.appendChild(replyInp);
        t2.focus$0(replyInp);
        t3 = document;
        postControlsBox = t3.createElement("div");
        t3 = postControlsBox.style;
        t3.display = "none";
        t1.isExpanded = false;
        this.bodyElement.appendChild(postControlsBox);
        t3 = document;
        replyAllowed = t3.createElement("div");
        replyAllowed.textContent = this._conv.get$replyAllowedDesc();
        replyAllowed.className = "instruct";
        postControlsBox.appendChild(replyAllowed);
        twInp = W.InputElement_InputElement("text");
        t3 = twInp.style;
        t4 = C.JSInt_methods.toString$0(125) + "px";
        t3.width = t4;
        t3 = J.getInterceptor$x(twInp);
        t3.set$maxLength(twInp, 100);
        t3.set$placeholder(twInp, "Trigger warning");
        postControlsBox.appendChild(twInp);
        t3 = document;
        imageButton = t3.createElement("button");
        imageButton.textContent = "Upload Image";
        imageButton.className = "button";
        postControlsBox.appendChild(imageButton);
        t3 = document;
        postButton = t3.createElement("button");
        postButton.textContent = "Post (ctrl-Enter)";
        postButton.className = "button";
        postControlsBox.appendChild(postButton);
        t1 = new R.ConvPane__buildReplyControls_expandCollapsePostControlsBox(t1, this, replyInp, postControlsBox);
        t3 = new R.ConvPane__buildReplyControls_setNonpostable(replyInp, postControlsBox, twInp, t1);
        t4 = J.get$onClick$x(imageButton);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t4._html$_target, t4._eventType, W._wrapZone(new R.ConvPane__buildReplyControls_closure(this, replyInp, t3)), false), [H.getTypeArgumentByIndex(t4, 0)])._tryResume$0();
        t3 = new R.ConvPane__buildReplyControls_doPost0(this, replyInp, twInp, t3);
        t4 = J.get$onClick$x(postButton);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t4._html$_target, t4._eventType, W._wrapZone(new R.ConvPane__buildReplyControls_closure0(t3)), false), [H.getTypeArgumentByIndex(t4, 0)])._tryResume$0();
        t2 = t2.get$onKeyDown(replyInp);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._html$_target, t2._eventType, W._wrapZone(new R.ConvPane__buildReplyControls_closure1(t1, t3)), false), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
      },
      _savePost$2: function(text, tw) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, t1, lastPostWDT, item;
        var $async$_savePost$2 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self._lastPost;
                lastPostWDT = t1 != null ? t1.get$createdAtWDT() : null;
                t1 = new X.ConvPostSaveRequest(null, null, null, null, null, null, null, null);
                t1.convId = $async$self._conv_pane$_convId;
                t1.triggerWarning = tw;
                t1.ptext = text;
                t1.lastKnownWDT = lastPostWDT;
                $async$goto = 2;
                return P._asyncHelper(L.RpcLib_command("ConvPostSave", t1), $async$_savePost$2, $async$completer);
              case 2:
                // returning from await.
                if ($async$result.get$isOK()) {
                  item = new X.ConvGetPostItem(null, null, null, null, null, null, null, null, null, null, null);
                  item.ptext = text;
                  item.collapseMode = "Normal";
                  item.collapsePosition = 300;
                  item.createdAtWDT = M.WLib_dateTimeToWire(new P.DateTime(Date.now(), false).toUtc$0());
                  $async$self._appendOnePost$1(item);
                }
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$_savePost$2, $async$completer, null);
      },
      _buildMainButtonBar$0: function() {
        if (!this._isJoined)
          this.paneMenuBar.addButton$2("Join", new R.ConvPane__buildMainButtonBar_closure(this));
      }
    },
    ConvPane_init_closure: {
      "^": "Closure:4;$this,lastpos",
      call$0: [function() {
        var t1, t2, t3;
        t1 = this.$this;
        t2 = this.lastpos;
        t1._resetReadDotImages$1(t2);
        t3 = new X.ConvSetReadPositionRequest(null, null, null);
        t3.convId = t1._conv_pane$_convId;
        t3.positionWDT = M.WLib_dateTimeToWire(t2);
        L.RpcLib_command("ConvSetReadPosition", t3);
      }, null, null, 0, 0, null, "call"]
    },
    ConvPane__appendOnePost_closure: {
      "^": "Closure:1;_box_0,$this,post,postEl",
      call$1: [function(e) {
        J.set$src$x(this._box_0.expandImg, "images/post-collapse.png");
        this.$this._buildPostExpandBox$2(this.post, this.postEl);
      }, null, null, 2, 0, null, 0, [], "call"]
    },
    ConvPane__appendOnePost_closure0: {
      "^": "Closure:6;$this,post,isUnread",
      call$1: [function(e) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, readpos, t1, t2;
        var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                readpos = M.WLib_wireToDateTime($async$self.post.get$createdAtWDT());
                if (!$async$self.isUnread) {
                  t1 = P.Duration$(0, 0, 0, 1, 0, 0);
                  readpos = P.DateTime$_withValue(readpos._value - C.JSNumber_methods._tdivFast$1(t1._duration, 1000), readpos.isUtc);
                }
                t1 = $async$self.$this;
                t1._resetReadDotImages$1(readpos);
                t2 = new X.ConvSetReadPositionRequest(null, null, null);
                t2.convId = t1._conv_pane$_convId;
                t2.positionWDT = M.WLib_dateTimeToWire(readpos);
                $async$goto = 2;
                return P._asyncHelper(L.RpcLib_command("ConvSetReadPosition", t2), $async$call$1, $async$completer);
              case 2:
                // returning from await.
                $.$get$Globals_doOnUserAction().remove$1(0, t1._autoReadPositionKey);
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$call$1, $async$completer, null);
      }, null, null, 2, 0, null, 0, [], "call"]
    },
    ConvPane__resetReadDotImages_closure: {
      "^": "Closure:9;readpos",
      call$2: function(post, div) {
        var readDotImageName = M.WLib_wireToDateTime(post.get$createdAtWDT())._value > this.readpos._value ? "unread-dot.png" : "read-dot.png";
        J.set$src$x(J.querySelector$1$x(div, ".read-dot img"), "images/" + readDotImageName);
      }
    },
    ConvPane__appendMissingPosts_closure: {
      "^": "Closure:6;$this,expander",
      call$1: [function(e) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, t1, t2, openingElement, req, priorElement, post, $async$temp1;
        var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.$this;
                if (J.$lt$n(J.get$length$asx(t1._conv.get$posts()), 2)) {
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t2 = $async$self.expander;
                openingElement = t2.previousElementSibling;
                J.remove$0$ax(t2);
                req = new X.ConvGetRequest(null, null, null, null, null);
                req.convId = t1._conv_pane$_convId;
                req.mode = "R";
                req.rangeFromWDT = J.$index$asx(t1._conv.get$posts(), 0).get$createdAtWDT();
                req.rangeToWDT = J.$index$asx(t1._conv.get$posts(), 1).get$createdAtWDT();
                $async$temp1 = J;
                $async$goto = 3;
                return P._asyncHelper(L.RpcLib_convGet(req), $async$call$1, $async$completer);
              case 3:
                // returning from await.
                t2 = $async$temp1.get$iterator$ax($async$result.get$posts()), priorElement = null;
              case 4:
                // for condition
                if (!t2.moveNext$0()) {
                  // goto after for
                  $async$goto = 5;
                  break;
                }
                post = t2.get$current();
                priorElement = t1._appendOnePost$2$afterElement(post, priorElement == null ? openingElement : priorElement);
                // goto for condition
                $async$goto = 4;
                break;
              case 5:
                // after for
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$call$1, $async$completer, null);
      }, null, null, 2, 0, null, 0, [], "call"]
    },
    ConvPane__buildReplyControls_expandCollapsePostControlsBox: {
      "^": "Closure:7;_box_0,$this,replyInp,postControlsBox",
      call$0: function() {
        var t1, t2, hasText, t3;
        t1 = this.replyInp;
        t2 = J.getInterceptor$x(t1);
        hasText = J.trim$0$s(t2.get$value(t1)).length > 0;
        t3 = this._box_0;
        if (hasText === t3.isExpanded)
          return;
        t3.isExpanded = hasText;
        t3 = this.postControlsBox;
        if (hasText) {
          t3 = t3.style;
          t3.display = "block";
          t2.set$rows(t1, 5);
        } else {
          t3 = t3.style;
          t3.display = "none";
          t2.set$rows(t1, 1);
        }
      }
    },
    ConvPane__buildReplyControls_setNonpostable: {
      "^": "Closure:4;replyInp,postControlsBox,twInp,expandCollapsePostControlsBox",
      call$0: function() {
        var t1, t2;
        t1 = this.replyInp;
        t2 = J.getInterceptor$x(t1);
        t2.set$value(t1, "");
        t2.remove$0(t1);
        this.twInp.textContent = "";
        J.remove$0$ax(this.postControlsBox);
        this.expandCollapsePostControlsBox.call$0();
      }
    },
    ConvPane__buildReplyControls_closure: {
      "^": "Closure:6;$this,replyInp,setNonpostable",
      call$1: [function(e) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, dialog, t1;
        var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                dialog = new X.ImageUploadDialog("P", "Image will be reduced if it is very large.", $async$self.$this._conv_pane$_convId, J.get$value$x($async$self.replyInp), false, null, null, null);
                dialog.DialogBox$0();
                $async$goto = 2;
                return P._asyncHelper(dialog.show$0(0), $async$call$1, $async$completer);
              case 2:
                // returning from await.
                if ($async$result === true) {
                  $async$self.setNonpostable.call$0();
                  t1 = {life: 5000};
                  self.jQuery.jGrowl("Posted. Refresh conversation to view post.", t1);
                }
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$call$1, $async$completer, null);
      }, null, null, 2, 0, null, 0, [], "call"]
    },
    ConvPane__buildReplyControls_doPost0: {
      "^": "Closure:11;$this,replyInp,twInp,setNonpostable",
      call$0: function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this;
        var $async$call$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 2;
                return P._asyncHelper($async$self.$this._savePost$2(J.trim$0$s(J.get$value$x($async$self.replyInp)), J.trim$0$s(J.get$value$x($async$self.twInp))), $async$call$0, $async$completer);
              case 2:
                // returning from await.
                $async$self.setNonpostable.call$0();
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$call$0, $async$completer, null);
      }
    },
    ConvPane__buildReplyControls_closure0: {
      "^": "Closure:1;doPost0",
      call$1: [function(e) {
        return this.doPost0.call$0();
      }, null, null, 2, 0, null, 0, [], "call"]
    },
    ConvPane__buildReplyControls_closure1: {
      "^": "Closure:1;expandCollapsePostControlsBox,doPost0",
      call$1: [function(e) {
        var t1 = J.getInterceptor$x(e);
        if (t1.get$ctrlKey(e) === true && J.$eq$(t1.get$keyCode(e), 13)) {
          this.doPost0.call$0();
          t1.preventDefault$0(e);
        }
        P.Timer_Timer(P.Duration$(0, 0, 0, 20, 0, 0), this.expandCollapsePostControlsBox);
      }, null, null, 2, 0, null, 0, [], "call"]
    },
    ConvPane__buildMainButtonBar_closure: {
      "^": "Closure:6;$this",
      call$1: function(e) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, t1, t2, response;
        var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                if (!F.Messages_checkLoggedIn()) {
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t1 = new X.ConvUserSaveRequest(null, null, null, null, null);
                t2 = $async$self.$this;
                t1.convId = t2._conv_pane$_convId;
                t1.status = "J";
                $async$goto = 3;
                return P._asyncHelper(L.RpcLib_convUserSave(t1), $async$call$1, $async$completer);
              case 3:
                // returning from await.
                response = $async$result;
                if (response.get$base().get$isOK())
                  A.PaneFactory_create(t2.paneKey, true);
                t1 = J.getInterceptor$x(response);
                if (t1.get$action(response) === "J") {
                  t2 = {life: 5000};
                  self.jQuery.jGrowl("Joined!", t2);
                }
                if (t1.get$action(response) === "R") {
                  t2 = {life: 5000};
                  self.jQuery.jGrowl("A join request was sent to the project leadership for their approval.", t2);
                }
                if (t1.get$action(response) === "X") {
                  t1 = {life: 5000};
                  self.jQuery.jGrowl("You are not allowed to join this private project.", t1);
                }
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$call$1, $async$completer, null);
      }
    }
  }], ["", "../client/pane/conv_search_pane.dart",, T, {
    "^": "",
    ConvSearchPane: {
      "^": "BasePane;_conv_search_pane$_resultDiv,_searchTerm,_isCollapsed,paneKey,borderId,borderElement,bodyId,bodyElement,paneMenuBar,onCollapse,onChanePaneKey",
      init$1: function(pk) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, t1, t2, termInp, key1;
        var $async$init$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 2;
                return P._asyncHelper($async$self.super$BasePane$init(pk), $async$init$1, $async$completer);
              case 2:
                // returning from await.
                $async$self.buildSkeletonHtml2$3$iconName$paneClass$title("paneconv", "convs", "Conversation Search");
                t1 = $async$self.bodyElement;
                t1.textContent = "";
                t1 = V.HtmlLib_appendScrollingDiv(t1, 200);
                t2 = t1.style;
                t2.display = "none";
                $async$self._conv_search_pane$_resultDiv = t1;
                termInp = O.FormBuilder$($async$self.bodyElement, "Criteria").addInput$3("Search term", 100, 50);
                $async$self.paneMenuBar.addButton$2("Search", new T.ConvSearchPane_init_closure($async$self, termInp));
                t1 = pk._keyParts;
                if (t1.length > 1) {
                  key1 = t1[1];
                  t1 = J.getInterceptor$s(key1);
                  if (t1.startsWith$1(key1, "s=")) {
                    $async$self._searchTerm = t1.substring$1(key1, 2);
                    $async$self._conv_search_pane$_doSearch$0();
                  }
                }
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$init$1, $async$completer, null);
      },
      _conv_search_pane$_doSearch$0: function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, t1, t2, response, conv, itemDiv, t3, t4, e, indented;
        var $async$_conv_search_pane$_doSearch$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self._conv_search_pane$_resultDiv;
                t2 = t1.style;
                t2.display = "block";
                J.set$innerHtml$x(t1, "Loading...");
                t1 = new X.ConvQueryRequest(null, null);
                t1.term = $async$self._searchTerm;
                $async$goto = 2;
                return P._asyncHelper(L.RpcLib_convQuery(t1), $async$_conv_search_pane$_doSearch$0, $async$completer);
              case 2:
                // returning from await.
                response = $async$result;
                $async$self.paneKey = Z.PaneKey$(C.JSString_methods.$add("convs/s=", $async$self._searchTerm));
                t1 = $async$self.onChanePaneKey;
                if (t1 != null)
                  t1.call$1($async$self);
                J.set$innerHtml$x($async$self._conv_search_pane$_resultDiv, "<h2>Conversations</h2>");
                for (t1 = J.get$iterator$ax(response.get$convs()); t1.moveNext$0();) {
                  conv = t1.get$current();
                  t2 = document;
                  itemDiv = t2.createElement("div");
                  itemDiv.className = "space1";
                  $async$self._conv_search_pane$_resultDiv.appendChild(itemDiv);
                  t2 = conv.get$hitText();
                  t3 = "conv/" + H.S(conv.get$convId()) + "/h=" + H.S($async$self._searchTerm);
                  t4 = document;
                  e = t4.createElement("a");
                  J.set$href$x(e, "#" + t3);
                  e.textContent = t2;
                  t2 = e.style;
                  t2.display = "block";
                  itemDiv.appendChild(e);
                  t2 = document;
                  indented = t2.createElement("div");
                  t2 = indented.style;
                  t3 = C.JSInt_methods.toString$0(18) + "px";
                  t2.marginLeft = t3;
                  itemDiv.appendChild(indented);
                  for (t2 = J.get$iterator$ax(conv.get$posts()), t3 = J.getInterceptor$x(indented); t2.moveNext$0();) {
                    t4 = t2.get$current().get$hitText();
                    indented.appendChild(document.createTextNode(t4));
                    t3.insertAdjacentHtml$4$treeSanitizer$validator(indented, "beforeend", "<br/>", null, null);
                  }
                }
                if (J.$eq$(J.get$length$asx(response.get$convs()), 0))
                  J.set$innerHtml$x($async$self._conv_search_pane$_resultDiv, "(none)");
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$_conv_search_pane$_doSearch$0, $async$completer, null);
      }
    },
    ConvSearchPane_init_closure: {
      "^": "Closure:1;$this,termInp",
      call$1: function(e) {
        var t1 = this.$this;
        t1._searchTerm = J.trim$0$s(J.get$value$x(this.termInp));
        t1._conv_search_pane$_doSearch$0();
      }
    }
  }], ["", "../client/lib/dialog_box.dart",, D, {
    "^": "",
    DialogBox: {
      "^": "Object;",
      build$0: function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError;
        var $async$build$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$build$0, $async$completer, null);
      },
      afterShown$0: function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError;
        var $async$afterShown$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$afterShown$0, $async$completer, null);
      },
      dialogHeight$0: function() {
        return 300;
      },
      show$0: function(_) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, t1, width, t2, height, fontTheme;
        var $async$show$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                if ($async$self._showing) {
                  $async$returnValue = $async$self._continuation.future;
                  // goto return
                  $async$goto = 1;
                  break;
                }
                $async$goto = 3;
                return P._asyncHelper($async$self.build$0(), $async$show$0, $async$completer);
              case 3:
                // returning from await.
                t1 = window.innerWidth;
                if (typeof t1 !== "number") {
                  $async$returnValue = t1.$sub();
                  // goto return
                  $async$goto = 1;
                  break;
                }
                width = P.min(600, t1 - 10);
                t1 = $async$self.dialogHeight$0();
                t2 = window.innerHeight;
                if (typeof t2 !== "number") {
                  $async$returnValue = t2.$sub();
                  // goto return
                  $async$goto = 1;
                  break;
                }
                height = P.min(t1, t2 - 90);
                t2 = $async$self.frame.style;
                t1 = C.JSInt_methods.toString$0(height) + "px";
                t2.height = t1;
                t1 = $async$self.frame.style;
                t2 = C.JSInt_methods.toString$0(width) + "px";
                t1.width = t2;
                fontTheme = $.$get$ClientStore__store().getItem("font-theme");
                if (fontTheme == null)
                  fontTheme = "";
                if (fontTheme.length > 0)
                  J.get$classes$x($async$self.frame).add$1(0, fontTheme);
                document.body.appendChild($async$self._backdrop);
                document.body.appendChild($async$self.frame);
                $async$self._showing = true;
                $async$goto = 4;
                return P._asyncHelper($async$self.afterShown$0(), $async$show$0, $async$completer);
              case 4:
                // returning from await.
                t1 = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null])), [null]);
                $async$self._continuation = t1;
                $async$goto = 5;
                return P._asyncHelper(t1.future, $async$show$0, $async$completer);
              case 5:
                // returning from await.
                $async$returnValue = $async$result;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$show$0, $async$completer, null);
      },
      hide$1: ["super$DialogBox$hide", function(value) {
        if (!this._showing)
          return;
        J.remove$0$ax(this.frame);
        J.remove$0$ax(this._backdrop);
        this._showing = false;
        this._continuation.complete$1(0, value);
      }],
      DialogBox$0: function() {
        var t1 = document;
        t1 = t1.createElement("div");
        t1.className = "dialog-backdrop";
        this._backdrop = t1;
        t1 = document;
        t1 = t1.createElement("div");
        t1.className = "dialog-frame";
        this.frame = t1;
      }
    }
  }], ["", "../client/pane/doc_pane.dart",, Q, {
    "^": "",
    DocPane: {
      "^": "BasePane;_doc_pane$_doc,_docContentElement,_isCollapsed,paneKey,borderId,borderElement,bodyId,bodyElement,paneMenuBar,onCollapse,onChanePaneKey",
      init$1: function(pk) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, req, t1, docIdOrCode, t2, docHtml, editableMessage;
        var $async$init$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 2;
                return P._asyncHelper($async$self.super$BasePane$init(pk), $async$init$1, $async$completer);
              case 2:
                // returning from await.
                req = new X.DocGetRequest(null, null, null, null, null);
                t1 = pk._keyParts;
                docIdOrCode = t1.length >= 2 ? t1[1] : null;
                t1 = J.getInterceptor$s(docIdOrCode);
                if (t1.startsWith$1(docIdOrCode, "s="))
                  req.specialCode = t1.substring$1(docIdOrCode, 2);
                else
                  req.docId = H.Primitives_parseInt(docIdOrCode, null, null);
                $async$goto = 3;
                return P._asyncHelper(L.RpcLib_docGet(req), $async$init$1, $async$completer);
              case 3:
                // returning from await.
                t1 = $async$result;
                $async$self._doc_pane$_doc = t1;
                $async$self.buildSkeletonHtml2$4$iconHoverText$iconName$paneClass$title("Document", "panedoc", "doc", J.get$title$x(t1));
                t1 = $async$self.bodyElement;
                t1.textContent = "";
                t2 = document;
                t2 = t2.createElement("div");
                t2.textContent = C.JSString_methods.$add("Created on ", $async$self._doc_pane$_doc.get$createdAt());
                t1.appendChild(t2);
                docHtml = J.makeHtml$1$x(self.Markdown.getSanitizingConverter(), J.get$body$x($async$self._doc_pane$_doc));
                t2 = document;
                t1 = t2.createElement("div");
                t1.className = "content";
                $async$self._docContentElement = t1;
                $async$self.bodyElement.appendChild(t1);
                J.setInnerHtml$3$treeSanitizer$validator$x($async$self._docContentElement, docHtml, null, null);
                editableMessage = $async$self._doc_pane$_doc.get$reasonNotEditable();
                if (editableMessage == null)
                  editableMessage = $async$self._doc_pane$_doc.get$projectId() != null ? "You can save changes to this document" : "You can make changes and submit the proposed changes for a vote";
                t1 = $async$self.bodyElement;
                t2 = document;
                t2 = t2.createElement("div");
                t2.textContent = editableMessage;
                t1.appendChild(t2);
                if (J.$eq$($async$self._doc_pane$_doc.get$allowSave(), "Y"))
                  $async$self.paneMenuBar.addButton$2("Edit Document", new Q.DocPane_init_closure($async$self));
                if (J.$eq$($async$self._doc_pane$_doc.get$allowSave(), "Y") && J.$eq$($async$self._doc_pane$_doc.get$isProjectManager(), "Y"))
                  $async$self.paneMenuBar.addButton$2("Retitle", new Q.DocPane_init_closure0($async$self));
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$init$1, $async$completer, null);
      },
      _proposeRootDocChanges$1: function(newbody) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, titleDialog, t1, summary, req, $async$temp1;
        var $async$_proposeRootDocChanges$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                titleDialog = new T.TitleDescDialog("Enter short summary of your changes for voting", false, "", "", false, null, null, null);
                t1 = document;
                t1 = t1.createElement("div");
                t1.className = "dialog-backdrop";
                titleDialog._backdrop = t1;
                t1 = document;
                t1 = t1.createElement("div");
                t1.className = "dialog-frame";
                titleDialog.frame = t1;
                titleDialog.title = "Changes proposed to: " + H.S(J.get$title$x($async$self._doc_pane$_doc));
                $async$goto = 3;
                return P._asyncHelper(titleDialog.show$0(0), $async$_proposeRootDocChanges$1, $async$completer);
              case 3:
                // returning from await.
                if ($async$result !== true) {
                  // goto return
                  $async$goto = 1;
                  break;
                }
                summary = titleDialog.description;
                req = new X.DocSaveRequest(null, null, null, null, null, null, null);
                req.docId = $async$self._doc_pane$_doc.get$docId();
                req.title = J.get$title$x($async$self._doc_pane$_doc);
                req.body = newbody;
                req.summary = summary;
                $async$temp1 = J;
                $async$goto = 4;
                return P._asyncHelper(L.RpcLib_command("DocSave", req), $async$_proposeRootDocChanges$1, $async$completer);
              case 4:
                // returning from await.
                if ($async$temp1.$eq$($async$result.get$ok(), "Y"))
                  F.Messages_criticalMessage("Document changes awaiting review. Once they are approved as non-spam, all users will have the opportunity to vote on the changes.");
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$_proposeRootDocChanges$1, $async$completer, null);
      },
      _saveProjectDocChanges$1: function(newbody) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, req, t1, docHtml, $async$temp1;
        var $async$_saveProjectDocChanges$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                req = new X.DocSaveRequest(null, null, null, null, null, null, null);
                req.docId = $async$self._doc_pane$_doc.get$docId();
                req.projectId = $async$self._doc_pane$_doc.get$projectId();
                req.title = J.get$title$x($async$self._doc_pane$_doc);
                req.body = newbody;
                $async$temp1 = J;
                $async$goto = 2;
                return P._asyncHelper(L.RpcLib_command("DocSave", req), $async$_saveProjectDocChanges$1, $async$completer);
              case 2:
                // returning from await.
                if ($async$temp1.$eq$($async$result.get$ok(), "Y")) {
                  t1 = {life: 5000};
                  self.jQuery.jGrowl("Document saved.", t1);
                }
                docHtml = J.makeHtml$1$x(self.Markdown.getSanitizingConverter(), newbody);
                J.setInnerHtml$3$treeSanitizer$validator$x($async$self._docContentElement, docHtml, null, null);
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$_saveProjectDocChanges$1, $async$completer, null);
      }
    },
    DocPane_init_closure: {
      "^": "Closure:6;$this",
      call$1: function(e) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, t1, newbody, editDialog, t2, conf, btnIdx;
        var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                if (!F.Messages_checkLoggedIn()) {
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t1 = $async$self.$this;
                $async$goto = t1._doc_pane$_doc.get$projectId() == null ? 3 : 4;
                break;
              case 3:
                // then
                $async$goto = 5;
                return P._asyncHelper(F.Messages_criticalMessage("You may make proposed edits to this document, then those changes will be voted on by all users. Once you submit the proposal, it cannot be modified."), $async$call$1, $async$completer);
              case 5:
                // returning from await.
              case 4:
                // join
                newbody = J.get$body$x(t1._doc_pane$_doc);
              case 6:
                // for condition
                // trivial condition
                editDialog = new L.EditMarkdownDialog(newbody, null, false, null, null, null);
                t2 = document;
                t2 = t2.createElement("div");
                t2.className = "dialog-backdrop";
                editDialog._backdrop = t2;
                t2 = document;
                t2 = t2.createElement("div");
                t2.className = "dialog-frame";
                editDialog.frame = t2;
                $async$goto = 8;
                return P._asyncHelper(editDialog.show$0(0), $async$call$1, $async$completer);
              case 8:
                // returning from await.
                newbody = $async$result;
                if (newbody == null) {
                  // goto return
                  $async$goto = 1;
                  break;
                }
                $async$goto = t1._doc_pane$_doc.get$projectId() != null ? 9 : 10;
                break;
              case 9:
                // then
                $async$goto = 11;
                return P._asyncHelper(t1._saveProjectDocChanges$1(newbody), $async$call$1, $async$completer);
              case 11:
                // returning from await.
                // goto return
                $async$goto = 1;
                break;
              case 10:
                // join
                conf = new L.ConfirmDialog("Submit proposed changes for vote now?", ["Yes", "Make More Edits", "Abandon Edits"], false, null, null, null);
                t2 = document;
                t2 = t2.createElement("div");
                t2.className = "dialog-backdrop";
                conf._backdrop = t2;
                t2 = document;
                t2 = t2.createElement("div");
                t2.className = "dialog-frame";
                conf.frame = t2;
                $async$goto = 12;
                return P._asyncHelper(conf.show$0(0), $async$call$1, $async$completer);
              case 12:
                // returning from await.
                btnIdx = $async$result;
                t2 = J.getInterceptor(btnIdx);
                if (t2.$eq(btnIdx, 2)) {
                  // goto return
                  $async$goto = 1;
                  break;
                }
                $async$goto = t2.$eq(btnIdx, 0) ? 13 : 14;
                break;
              case 13:
                // then
                $async$goto = 15;
                return P._asyncHelper(t1._proposeRootDocChanges$1(newbody), $async$call$1, $async$completer);
              case 15:
                // returning from await.
                // goto return
                $async$goto = 1;
                break;
              case 14:
                // join
                // goto for condition
                $async$goto = 6;
                break;
              case 7:
                // after for
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$call$1, $async$completer, null);
      }
    },
    DocPane_init_closure0: {
      "^": "Closure:6;$this",
      call$1: function(e) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, t1, title, req, t2, $async$temp1;
        var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.$this;
                $async$goto = 2;
                return P._asyncHelper(K.StringDialog$("New Title", J.get$title$x(t1._doc_pane$_doc), 500).show$0(0), $async$call$1, $async$completer);
              case 2:
                // returning from await.
                title = $async$result;
                $async$goto = title != null ? 3 : 4;
                break;
              case 3:
                // then
                req = new X.DocSaveRequest(null, null, null, null, null, null, null);
                req.docId = t1._doc_pane$_doc.get$docId();
                req.projectId = t1._doc_pane$_doc.get$projectId();
                req.retitleMode = "R";
                req.title = title;
                $async$temp1 = J;
                $async$goto = 5;
                return P._asyncHelper(L.RpcLib_command("DocSave", req), $async$call$1, $async$completer);
              case 5:
                // returning from await.
                if ($async$temp1.$eq$($async$result.get$ok(), "Y")) {
                  t2 = {life: 5000};
                  self.jQuery.jGrowl("Title changed.", t2);
                  J.set$title$x(t1._doc_pane$_doc, title);
                  t1.borderElement.querySelector(".pane-title").textContent = title;
                }
              case 4:
                // join
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$call$1, $async$completer, null);
      }
    }
  }], ["", "../client/dialog/edit_markdown_dialog.dart",, L, {
    "^": "",
    EditMarkdownDialog: {
      "^": "DialogBox;_edit_markdown_dialog$_dtext,_idSuffix,_showing,_continuation,_backdrop,frame",
      dialogHeight$0: function() {
        var t1 = window.innerHeight;
        if (typeof t1 !== "number")
          return t1.$sub();
        return t1 - 10;
      },
      build$0: function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, t1, t2, edElement, bar;
        var $async$build$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $.HtmlLib__maxid + 1;
                $.HtmlLib__maxid = t1;
                $async$self._idSuffix = "-" + ("e" + C.JSInt_methods.toString$0(t1));
                t1 = $async$self.frame;
                t2 = document;
                t2 = t2.createElement("div");
                t2.id = C.JSString_methods.$add("wmd-button-bar", $async$self._idSuffix);
                t1.appendChild(t2);
                t2 = document;
                edElement = t2.createElement("textarea");
                edElement.id = C.JSString_methods.$add("wmd-input", $async$self._idSuffix);
                t1 = edElement.style;
                t2 = C.JSInt_methods.toString$0(550) + "px";
                t1.width = t2;
                t1 = edElement.style;
                t2 = window.innerHeight;
                if (typeof t2 !== "number") {
                  $async$returnValue = t2.$sub();
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t2 = C.JSInt_methods.toString$0(C.JSNumber_methods.round$0((t2 - 10) * 0.6)) + "px";
                t1.height = t2;
                t1 = $async$self._edit_markdown_dialog$_dtext;
                J.set$value$x(edElement, t1 == null ? "" : t1);
                $async$self.frame.appendChild(edElement);
                J.insertAdjacentHtml$4$treeSanitizer$validator$x($async$self.frame, "beforeend", '<div class="explain">This site uses <a target="_blank" href="https://gist.github.com/budparr/9257428">Markdown</a> for editing.</div>', C.C__TrustedHtmlTreeSanitizer, null);
                bar = M.ButtonBarBuilder$($async$self.frame, null);
                bar.addButton$2("OK", new L.EditMarkdownDialog_build_closure($async$self, edElement));
                bar.addButton$2("Cancel", new L.EditMarkdownDialog_build_closure0($async$self));
                J.insertAdjacentHtml$4$treeSanitizer$validator$x($async$self.frame, "beforeend", "<h2>Preview</h2>", null, null);
                t1 = $async$self.frame;
                t2 = document;
                t2 = t2.createElement("div");
                t2.id = C.JSString_methods.$add("wmd-preview", $async$self._idSuffix);
                t1.appendChild(t2);
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$build$0, $async$completer, null);
      },
      afterShown$0: function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, converter, t1;
        var $async$afterShown$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                converter = self.Markdown.getSanitizingConverter();
                t1 = $async$self._idSuffix;
                J.run$0$x(new self.Markdown.Editor(converter, t1));
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$afterShown$0, $async$completer, null);
      }
    },
    EditMarkdownDialog_build_closure: {
      "^": "Closure:1;$this,edElement",
      call$1: function(e) {
        this.$this.hide$1(J.get$value$x(this.edElement));
      }
    },
    EditMarkdownDialog_build_closure0: {
      "^": "Closure:1;$this",
      call$1: function(e) {
        this.$this.hide$1(null);
      }
    }
  }], ["", "../client/dialog/event_dialog.dart",, K, {
    "^": "",
    EventDialog: {
      "^": "DialogBox;_event_dialog$_eventId,_event,_changedLat,_changedLon,_showing,_continuation,_backdrop,frame",
      dialogHeight$0: function() {
        return 400;
      },
      build$0: function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, isNewEvent, nowLocal, t1, form, titleInput, descInput, startsAtDiv, t2, t3, t4, startsAtInput, year, month, day, hour, minute, durationInput, mapButton, locationInput, bar;
        var $async$build$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                isNewEvent = J.$eq$($async$self._event_dialog$_eventId, 0);
                if (isNewEvent) {
                  nowLocal = new P.DateTime(Date.now(), false);
                  t1 = new X.EventGetResponse(new X.APIResponseBase(null, null, "Y", null), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
                  t1.startTimeU = M.WLib_packDateEntry(H.Primitives_getYear(nowLocal), H.Primitives_getMonth(nowLocal), H.Primitives_getDay(nowLocal), H.Primitives_getHours(nowLocal), H.Primitives_getMinutes(nowLocal));
                  $async$self._event = t1;
                }
                form = O.FormBuilder$($async$self.frame, "Event");
                titleInput = form.addInput$4("Title", 400, 500, J.get$title$x($async$self._event));
                descInput = form.addTextArea$5("Description", 400, 90, 10000, J.get$description$x($async$self._event));
                t1 = document;
                startsAtDiv = t1.createElement("div");
                form.addAny$2("Starts at", startsAtDiv);
                t1 = document;
                t1 = t1.createElement("select");
                t2 = document;
                t2 = t2.createElement("select");
                t3 = document;
                t3 = t3.createElement("select");
                t4 = document;
                t4 = t4.createElement("select");
                startsAtInput = new B.PrimitiveDateTime(["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], startsAtDiv, t1, t2, t3, t4);
                t4 = $async$self._event.get$startTimeU();
                t1 = J.getInterceptor$s(t4);
                if (!t1.startsWith$1(t4, "LDT:"))
                  H.throwExpression(P.Exception_Exception("packed date is not in the right format"));
                year = H.Primitives_parseInt(t1.substring$2(t4, 4, 8), null, null);
                month = H.Primitives_parseInt(t1.substring$2(t4, 8, 10), null, null);
                day = H.Primitives_parseInt(t1.substring$2(t4, 10, 12), null, null);
                hour = H.Primitives_parseInt(t1.substring$2(t4, 12, 14), null, null);
                minute = H.Primitives_parseInt(t1.substring$2(t4, 14, 16), null, null);
                startsAtInput.render$1(new P.DateTime(H.checkInt(H.Primitives_valueFromDecomposedDate(year, month, day, hour, minute, 0, C.JSInt_methods.round$0(0), false)), false));
                durationInput = form.addInput$4("Duration", 400, 500, J.get$duration$x($async$self._event));
                t1 = document;
                mapButton = t1.createElement("button");
                mapButton.textContent = isNewEvent ? "Set Location On Map" : "Change Map Location";
                form.addAny$2("Map location", mapButton);
                locationInput = form.addTextArea$5("Location/directions", 400, 90, 10000, J.get$location$x($async$self._event));
                t1 = J.get$onClick$x(mapButton);
                H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new K.EventDialog_build_closure($async$self, mapButton)), false), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
                bar = M.ButtonBarBuilder$($async$self.frame, null);
                bar.addButton$2("OK", new K.EventDialog_build_closure0($async$self, isNewEvent, form, titleInput, descInput, startsAtInput, durationInput, locationInput));
                bar.addButton$2("Cancel", new K.EventDialog_build_closure1($async$self));
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$build$0, $async$completer, null);
      },
      _currentLatLon$0: function() {
        var lat, lon;
        lat = this._changedLat;
        lon = this._changedLon;
        if (lat == null) {
          if (this._event.get$lat() == null)
            return [null, null];
          lat = H.Primitives_parseDouble(this._event.get$lat(), null);
          lon = H.Primitives_parseDouble(this._event.get$lon(), null);
        }
        return [lat, lon];
      }
    },
    EventDialog_build_closure: {
      "^": "Closure:6;$this,mapButton",
      call$1: [function(e) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, t1, latlon, dlgResult, t2;
        var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.$this;
                latlon = t1._currentLatLon$0();
                $async$goto = 2;
                return P._asyncHelper(Z.LocationDialog$(latlon[0], latlon[1]).show$0(0), $async$call$1, $async$completer);
              case 2:
                // returning from await.
                dlgResult = $async$result;
                if (dlgResult != null) {
                  t2 = J.getInterceptor$asx(dlgResult);
                  t1._changedLat = t2.$index(dlgResult, 0);
                  t1._changedLon = t2.$index(dlgResult, 1);
                  $async$self.mapButton.textContent = "Change Map Location";
                }
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$call$1, $async$completer, null);
      }, null, null, 2, 0, null, 0, [], "call"]
    },
    EventDialog_build_closure0: {
      "^": "Closure:6;$this,isNewEvent,form,titleInput,descInput,startsAtInput,durationInput,locationInput",
      call$1: function(e) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, t1, newTitle, t2, latlon, t3, totalMinutes, t4, t5, t6, t7, startsAt, saveArgs;
        var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.isNewEvent;
                if (t1 && $async$self.$this._changedLat == null) {
                  t1 = $async$self.form._form_builder$_error;
                  t1.textContent = "You must choose a map location to save an event.";
                  J.scrollIntoView$0$x(t1);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                newTitle = J.trim$0$s(J.get$value$x($async$self.titleInput));
                if (newTitle.length === 0) {
                  t1 = $async$self.form._form_builder$_error;
                  t1.textContent = "Title is required";
                  J.scrollIntoView$0$x(t1);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t2 = $async$self.$this;
                latlon = t2._currentLatLon$0();
                t3 = $async$self.startsAtInput;
                totalMinutes = H.Primitives_parseInt(J.get$value$x(t3._time), null, null);
                t4 = H.Primitives_parseInt(J.get$value$x(t3._year), null, null);
                t5 = H.Primitives_parseInt(J.get$value$x(t3._month), null, null);
                t3 = H.Primitives_parseInt(J.get$value$x(t3._day), null, null);
                t6 = J.getInterceptor$n(totalMinutes);
                t7 = C.JSNumber_methods.floor$0(t6.$div(totalMinutes, 60));
                t6 = t6.$mod(totalMinutes, 60);
                startsAt = new P.DateTime(H.checkInt(H.Primitives_valueFromDecomposedDate(t4, t5, t3, t7, t6, 0, C.JSInt_methods.round$0(0), false)), false);
                saveArgs = new X.EventSaveRequest(null, null, null, null, null, null, null, null, null);
                saveArgs.eventId = t2._event_dialog$_eventId;
                saveArgs.title = newTitle;
                saveArgs.description = J.trim$0$s(J.get$value$x($async$self.descInput));
                saveArgs.duration = J.trim$0$s(J.get$value$x($async$self.durationInput));
                saveArgs.location = J.trim$0$s(J.get$value$x($async$self.locationInput));
                saveArgs.startTime = M.WLib_packDateEntry(H.Primitives_getYear(startsAt), H.Primitives_getMonth(startsAt), H.Primitives_getDay(startsAt), H.Primitives_getHours(startsAt), H.Primitives_getMinutes(startsAt));
                saveArgs.lat = J.toString$0$(latlon[0]);
                saveArgs.lon = J.toString$0$(latlon[1]);
                $async$goto = 3;
                return P._asyncHelper(L.RpcLib_command("EventSave", saveArgs), $async$call$1, $async$completer);
              case 3:
                // returning from await.
                if ($async$result.get$isOK()) {
                  if (t1)
                    F.Messages_criticalMessage("The event will be reviewed and posted later");
                  t2.hide$1(true);
                }
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$call$1, $async$completer, null);
      }
    },
    EventDialog_build_closure1: {
      "^": "Closure:1;$this",
      call$1: function(e) {
        this.$this.hide$1(false);
      }
    }
  }], ["", "../client/pane/event_pane.dart",, F, {
    "^": "",
    EventPane: {
      "^": "BasePane;_eventId,_isCollapsed,paneKey,borderId,borderElement,bodyId,bodyElement,paneMenuBar,onCollapse,onChanePaneKey",
      init$1: function(pk) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, t1, t2, getArgs, $event, loggedIn, editable, t3, t4, card, myselfs, myStatus, myVoteCell, myVoteChk, $scroll, conv, e, user, d1;
        var $async$init$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = {};
                $async$goto = 3;
                return P._asyncHelper($async$self.super$BasePane$init(pk), $async$init$1, $async$completer);
              case 3:
                // returning from await.
                t2 = pk._keyParts;
                if (1 >= t2.length) {
                  $async$returnValue = H.ioore(t2, 1);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t2 = H.Primitives_parseInt(t2[1], null, null);
                $async$self._eventId = t2;
                getArgs = new X.EventRequest(null, null);
                getArgs.eventId = t2;
                $async$goto = 4;
                return P._asyncHelper(L.RpcLib_eventGet(getArgs), $async$init$1, $async$completer);
              case 4:
                // returning from await.
                $event = $async$result;
                loggedIn = !J.$eq$($.Globals_userId, 0);
                editable = J.$eq$($event.get$isCreator(), "Y");
                t2 = J.getInterceptor$x($event);
                $async$self.buildSkeletonHtml2$4$iconHoverText$iconName$paneClass$title("Event", "paneevent", "event", t2.get$title($event));
                t3 = $async$self.bodyElement;
                t3.textContent = "";
                t4 = document;
                t4 = t4.createElement("table");
                t4.className = "cardtable";
                card = new Q.CardBuilder(null, t4);
                card._card_builder$_parent = t3;
                t3.appendChild(t4);
                card.addText$2("Title", t2.get$title($event));
                card.addText$2("Date/time", $event.get$startTimeR());
                card.addText$2("Duration", t2.get$duration($event));
                card.addText$2("Description", t2.get$description($event));
                card.addText$2("Location", t2.get$location($event));
                t2 = $event.get$creatorNick();
                t4 = "user/" + H.S($event.get$creatorId());
                V.HtmlLib_appendLinkToPane(card.addAny$1("Created by"), t2, t4, true);
                t1.myStatusDesc = "";
                if (loggedIn) {
                  myselfs = J.where$1$ax($event.get$users(), new F.EventPane_init_closure());
                  if (J.$gt$n(myselfs.get$length(myselfs), 0)) {
                    myStatus = J.get$status$x(myselfs.get$first(myselfs));
                    t1.myStatusDesc = myselfs.get$first(myselfs).get$statusDesc();
                  } else
                    myStatus = "D";
                } else
                  myStatus = "D";
                myVoteCell = card.addAny$1("My response");
                myVoteChk = W.InputElement_InputElement("checkbox");
                t2 = J.getInterceptor$x(myVoteChk);
                t2.set$checked(myVoteChk, J.$eq$(myStatus, "A"));
                myVoteCell.appendChild(myVoteChk);
                myVoteCell.appendChild(document.createTextNode(" I am attending"));
                t2 = t2.get$onChange(myVoteChk);
                H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._html$_target, t2._eventType, W._wrapZone(new F.EventPane_init_closure0(t1, $async$self, myVoteChk)), false), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
                if ($event.get$convs() != null && J.$gt$n(J.get$length$asx($event.get$convs()), 0)) {
                  J.insertAdjacentHtml$4$treeSanitizer$validator$x($async$self.bodyElement, "beforeend", '<h2><img src="images/paneconv.png"/>Conversations</h2>', null, null);
                  $scroll = V.HtmlLib_appendScrollingDiv($async$self.bodyElement, 200);
                  for (t1 = J.get$iterator$ax($event.get$convs()); t1.moveNext$0();) {
                    conv = t1.get$current();
                    t2 = J.getInterceptor$x(conv);
                    t3 = t2.get$title(conv);
                    t2 = "conv/" + H.S(t2.get$id(conv));
                    t4 = document;
                    e = t4.createElement("a");
                    J.set$href$x(e, "#" + t2);
                    e.textContent = t3;
                    t2 = e.style;
                    t2.display = "block";
                    $scroll.appendChild(e);
                  }
                }
                if ($event.get$users() != null && J.$gt$n(J.get$length$asx($event.get$users()), 0)) {
                  J.insertAdjacentHtml$4$treeSanitizer$validator$x($async$self.bodyElement, "beforeend", '<h2><img src="images/paneuser.png"/>Attendees</h2>', null, null);
                  $scroll = V.HtmlLib_appendScrollingDiv($async$self.bodyElement, 200);
                  for (t1 = J.get$iterator$ax($event.get$users()); t1.moveNext$0();) {
                    user = t1.get$current();
                    if (!J.$eq$(J.get$status$x(user), "A"))
                      continue;
                    t2 = document;
                    d1 = t2.createElement("div");
                    d1.className = "avatar";
                    $scroll.appendChild(d1);
                    if (user.get$avatarUrl() != null)
                      d1.appendChild(W.ImageElement_ImageElement(null, user.get$avatarUrl(), null));
                    t2 = user.get$nick();
                    t3 = "user/" + H.S(user.get$userId());
                    t4 = document;
                    e = t4.createElement("a");
                    J.set$href$x(e, "#" + t3);
                    e.textContent = t2;
                    d1.appendChild(e);
                    t2 = " (" + H.S(user.get$publicName()) + ") " + H.S(user.get$statusDesc());
                    d1.appendChild(document.createTextNode(t2));
                  }
                }
                if (loggedIn && editable) {
                  $async$self.paneMenuBar.addButton$2("Edit", new F.EventPane_init_closure1($async$self, $event));
                  $async$self.paneMenuBar.addButton$2("Delete Event", new F.EventPane_init_closure2($async$self));
                }
                if (loggedIn)
                  $async$self.paneMenuBar.addButton$2("New Conversation", new F.EventPane_init_closure3($async$self));
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$init$1, $async$completer, null);
      }
    },
    EventPane_init_closure: {
      "^": "Closure:1;",
      call$1: function(u) {
        return J.$eq$(u.get$userId(), $.Globals_userId);
      }
    },
    EventPane_init_closure0: {
      "^": "Closure:6;_box_0,$this,myVoteChk",
      call$1: [function(e) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, vote, t1, newStatusDesc, myStatusDesc, req;
        var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                if (!F.Messages_checkLoggedIn()) {
                  // goto return
                  $async$goto = 1;
                  break;
                }
                vote = J.get$checked$x($async$self.myVoteChk) === true ? "A" : "D";
                t1 = $async$self._box_0;
                $async$goto = 3;
                return P._asyncHelper(K.StringDialog$("Optionally enter a reason or message for your attendance", t1.myStatusDesc, 100).show$0(0), $async$call$1, $async$completer);
              case 3:
                // returning from await.
                newStatusDesc = $async$result;
                myStatusDesc = newStatusDesc == null ? t1.myStatusDesc : newStatusDesc;
                t1.myStatusDesc = myStatusDesc;
                req = new X.EventUserSaveRequest(null, null, null, null);
                req.eventId = $async$self.$this._eventId;
                req.status = vote;
                req.statusDesc = myStatusDesc;
                $async$goto = 4;
                return P._asyncHelper(L.RpcLib_command("EventUserSave", req), $async$call$1, $async$completer);
              case 4:
                // returning from await.
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$call$1, $async$completer, null);
      }, null, null, 2, 0, null, 0, [], "call"]
    },
    EventPane_init_closure1: {
      "^": "Closure:6;$this,event",
      call$1: function(e) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, t1, editDialog;
        var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.$this;
                editDialog = new K.EventDialog(t1._eventId, $async$self.event, null, null, false, null, null, null);
                editDialog.DialogBox$0();
                $async$goto = 2;
                return P._asyncHelper(editDialog.show$0(0), $async$call$1, $async$completer);
              case 2:
                // returning from await.
                if ($async$result === true)
                  A.PaneFactory_create(t1.paneKey, true);
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$call$1, $async$completer, null);
      }
    },
    EventPane_init_closure2: {
      "^": "Closure:6;$this",
      call$1: function(e) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, dlg, t1, t2, $async$temp1;
        var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                dlg = new L.ConfirmDialog("Really delete event?", $.$get$ConfirmDialog_YesNoOptions(), false, null, null, null);
                dlg.DialogBox$0();
                $async$temp1 = J;
                $async$goto = 4;
                return P._asyncHelper(dlg.show$0(0), $async$call$1, $async$completer);
              case 4:
                // returning from await.
                $async$goto = $async$temp1.$eq$($async$result, 0) ? 2 : 3;
                break;
              case 2:
                // then
                t1 = new X.EventRequest(null, null);
                t2 = $async$self.$this;
                t1.eventId = t2._eventId;
                $async$goto = 5;
                return P._asyncHelper(L.RpcLib_command("EventDelete", t1), $async$call$1, $async$completer);
              case 5:
                // returning from await.
                A.PaneFactory_delete(t2);
              case 3:
                // join
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$call$1, $async$completer, null);
      }
    },
    EventPane_init_closure3: {
      "^": "Closure:6;$this",
      call$1: function(e) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, t1, dlg, convId;
        var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.$this;
                dlg = new K.ConvDialog(null, null, null, t1._eventId, null, null, null, false, null, null, null);
                dlg.DialogBox$0();
                $async$goto = 3;
                return P._asyncHelper(dlg.show$0(0), $async$call$1, $async$completer);
              case 3:
                // returning from await.
                convId = $async$result;
                if (convId == null) {
                  // goto return
                  $async$goto = 1;
                  break;
                }
                A.PaneFactory_create(t1.paneKey, true);
                A.PaneFactory_createFromString("conv/" + H.S(convId));
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$call$1, $async$completer, null);
      }
    }
  }], ["", "../client/pane/event_search_pane.dart",, T, {
    "^": "",
    EventSearchPane: {
      "^": "BasePane;_resultDiv,_myLocKnown,_isCollapsed,paneKey,borderId,borderElement,bodyId,bodyElement,paneMenuBar,onCollapse,onChanePaneKey",
      init$1: function(pk) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, t1, t2, t3, form, titleInp, locDiv, locCheck, milesInp, setLocationButton, dateInput;
        var $async$init$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 2;
                return P._asyncHelper($async$self.super$BasePane$init(pk), $async$init$1, $async$completer);
              case 2:
                // returning from await.
                $async$self._myLocKnown = !J.$eq$(E.ClientStore_lon(), 0);
                $async$self.buildSkeletonHtml2$3$iconName$paneClass$title("paneevent", "events", "Event Search");
                t1 = $async$self.bodyElement;
                t1.textContent = "";
                t1 = V.HtmlLib_appendScrollingDiv(t1, 200);
                t2 = t1.style;
                t3 = C.JSInt_methods.toString$0(6) + "px";
                t2.marginBottom = t3;
                t2 = t1.style;
                t2.display = "hidden";
                $async$self._resultDiv = t1;
                form = O.FormBuilder$($async$self.bodyElement, "Criteria");
                titleInp = form.addInput$3("Title", 100, 50);
                t1 = document;
                locDiv = t1.createElement("div");
                locCheck = W.InputElement_InputElement("checkbox");
                J.set$checked$x(locCheck, $async$self._myLocKnown);
                locDiv.appendChild(locCheck);
                locDiv.appendChild(document.createTextNode(" Within "));
                milesInp = W.InputElement_InputElement("number");
                t1 = milesInp.style;
                t1.width = "60px";
                t1 = J.getInterceptor$x(milesInp);
                t1.set$valueAsNumber(milesInp, 20);
                t1.set$min(milesInp, "1");
                t1.set$max(milesInp, "9999");
                locDiv.appendChild(milesInp);
                locDiv.appendChild(document.createTextNode(" miles of "));
                t1 = document;
                setLocationButton = t1.createElement("button");
                setLocationButton.textContent = "My Location";
                setLocationButton.className = "linkbutton";
                locDiv.appendChild(setLocationButton);
                form.addAny$2("Location", locDiv);
                t1 = document;
                dateInput = t1.createElement("select");
                t1 = W.OptionElement_OptionElement$_("", "", null, false);
                t1.value = "7";
                t1.textContent = "Next week";
                dateInput.appendChild(t1);
                t1 = W.OptionElement_OptionElement$_("", "", null, false);
                t1.value = "30";
                t1.textContent = "Next month";
                dateInput.appendChild(t1);
                t1 = W.OptionElement_OptionElement$_("", "", null, false);
                t1.value = "60";
                t1.textContent = "Next 2 months";
                dateInput.appendChild(t1);
                t1 = W.OptionElement_OptionElement$_("", "", null, false);
                t1.value = "180";
                t1.textContent = "Next 6 months";
                dateInput.appendChild(t1);
                t1 = W.OptionElement_OptionElement$_("", "", null, false);
                t1.value = "365";
                t1.textContent = "Next year";
                dateInput.appendChild(t1);
                J.set$value$x(dateInput, "60");
                form.addAny$2("When", dateInput);
                t1 = new T.EventSearchPane_init__doSearch($async$self, form, titleInp, locCheck, milesInp, dateInput);
                if ($async$self._myLocKnown)
                  t1.call$0();
                t2 = J.get$onClick$x(setLocationButton);
                H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._html$_target, t2._eventType, W._wrapZone(new T.EventSearchPane_init_closure($async$self, locCheck)), false), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
                $async$self.paneMenuBar.addButton$2("Search", new T.EventSearchPane_init_closure0(t1));
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$init$1, $async$completer, null);
      }
    },
    EventSearchPane_init__doSearch: {
      "^": "Closure:11;$this,form,titleInp,locCheck,milesInp,dateInput",
      call$0: function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, t1, t2, today, dateTo, req, t3, response, $event, itemDiv, t4, t5, e;
        var $async$call$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.$this;
                if (!t1._myLocKnown && J.get$checked$x($async$self.locCheck) === true) {
                  t1 = $async$self.form._form_builder$_error;
                  t1.textContent = "You have not yet set your location.";
                  J.scrollIntoView$0$x(t1);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t2 = Date.now();
                today = new P.DateTime(t2, false);
                dateTo = P.DateTime$_withValue(t2 + P.Duration$(H.Primitives_parseInt(J.get$value$x($async$self.dateInput), null, null), 0, 0, 0, 0, 0).get$inMilliseconds(), false);
                req = new X.EventQueryRequest(null, null, null, null, null, null, null);
                req.title = J.trim$0$s(J.get$value$x($async$self.titleInp));
                req.dateFrom = M.WLib_packDateEntry(H.Primitives_getYear(today), H.Primitives_getMonth(today), H.Primitives_getDay(today), 0, 0);
                req.dateTo = M.WLib_packDateEntry(H.Primitives_getYear(dateTo), H.Primitives_getMonth(dateTo), H.Primitives_getDay(dateTo), 0, 0);
                if (J.get$checked$x($async$self.locCheck) === true) {
                  req.miles = J.get$valueAsNumber$x($async$self.milesInp);
                  req.lat = J.toString$0$(E.ClientStore_lat());
                  req.lon = J.toString$0$(E.ClientStore_lon());
                }
                t2 = t1._resultDiv;
                t3 = t2.style;
                t3.display = "block";
                J.set$innerHtml$x(t2, "Loading...");
                $async$goto = 3;
                return P._asyncHelper(L.RpcLib_eventQuery(req), $async$call$0, $async$completer);
              case 3:
                // returning from await.
                response = $async$result;
                J.set$innerHtml$x(t1._resultDiv, "");
                for (t2 = J.get$iterator$ax(response.get$events()); t2.moveNext$0();) {
                  $event = t2.get$current();
                  t3 = document;
                  itemDiv = t3.createElement("div");
                  itemDiv.className = "space1";
                  t1._resultDiv.appendChild(itemDiv);
                  t3 = J.getInterceptor$x($event);
                  t4 = t3.get$startTime($event);
                  itemDiv.appendChild(document.createTextNode(t4));
                  itemDiv.appendChild(document.createTextNode(" - "));
                  t4 = t3.get$title($event);
                  t3 = "event/" + H.S(t3.get$id($event));
                  t5 = document;
                  e = t5.createElement("a");
                  J.set$href$x(e, "#" + t3);
                  e.textContent = t4;
                  itemDiv.appendChild(e);
                }
                if (J.$eq$(J.get$length$asx(response.get$events()), 0))
                  J.set$innerHtml$x(t1._resultDiv, "(none)");
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$call$0, $async$completer, null);
      }
    },
    EventSearchPane_init_closure: {
      "^": "Closure:6;$this,locCheck",
      call$1: [function(e) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, t1;
        var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 2;
                return P._asyncHelper(L.MainController_userSetLocation(true), $async$call$1, $async$completer);
              case 2:
                // returning from await.
                t1 = !J.$eq$(E.ClientStore_lon(), 0);
                $async$self.$this._myLocKnown = t1;
                if (t1)
                  J.set$checked$x($async$self.locCheck, true);
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$call$1, $async$completer, null);
      }, null, null, 2, 0, null, 0, [], "call"]
    },
    EventSearchPane_init_closure0: {
      "^": "Closure:1;_doSearch",
      call$1: function(e) {
        return this._doSearch.call$0();
      }
    }
  }], ["", "../client/lib/form_builder.dart",, O, {
    "^": "",
    FormBuilder: {
      "^": "Object;_parent,_table,_form_builder$_error",
      get$parent: function(_) {
        return this._parent;
      },
      addInput$4: function(caption, width, maxLength, value) {
        var inp, t1, t2;
        inp = W.InputElement_InputElement("text");
        t1 = inp.style;
        t2 = C.JSInt_methods.toString$0(width) + "px";
        t1.width = t2;
        t1 = J.getInterceptor$x(inp);
        t1.set$maxLength(inp, maxLength);
        t1.set$value(inp, value);
        this.addAny$2(caption, inp);
        return inp;
      },
      addInput$3: function(caption, width, maxLength) {
        return this.addInput$4(caption, width, maxLength, "");
      },
      addPasswordInput$4: function(caption, width, maxLength, value) {
        var inp, t1, t2;
        inp = W.InputElement_InputElement("password");
        t1 = inp.style;
        t2 = C.JSInt_methods.toString$0(width) + "px";
        t1.width = t2;
        t1 = J.getInterceptor$x(inp);
        t1.set$maxLength(inp, maxLength);
        t1.set$value(inp, value);
        this.addAny$2(caption, inp);
        return inp;
      },
      addPasswordInput$3: function(caption, width, maxLength) {
        return this.addPasswordInput$4(caption, width, maxLength, "");
      },
      addTextArea$5: function(caption, width, height, maxLength, value) {
        var t1, inp, t2;
        t1 = document;
        inp = t1.createElement("textarea");
        t1 = inp.style;
        t2 = C.JSInt_methods.toString$0(width) + "px";
        t1.width = t2;
        t1 = inp.style;
        t2 = C.JSInt_methods.toString$0(height) + "px";
        t1.height = t2;
        t1 = J.getInterceptor$x(inp);
        t1.set$maxLength(inp, maxLength);
        t1.set$value(inp, value);
        this.addAny$2(caption, inp);
        return inp;
      },
      addTextArea$4: function(caption, width, height, maxLength) {
        return this.addTextArea$5(caption, width, height, maxLength, "");
      },
      addAny$2: function(caption, ctrl) {
        var row, t1, t2;
        row = J.addRow$0$x(this._table);
        t1 = J.getInterceptor$x(row);
        t2 = t1.addCell$0(row);
        t2.textContent = caption;
        t2 = t2.style;
        t2.verticalAlign = "top";
        t1.addCell$0(row).appendChild(ctrl);
      },
      addExplanation$2: function(el, text) {
        var t1, div;
        t1 = document;
        div = t1.createElement("div");
        div.className = "explain";
        div.textContent = text;
        J.insertAdjacentElement$2$x(el, "afterEnd", div);
      },
      addSubformFrame$1: function(caption) {
        var cell, t1, border;
        cell = J.addCell$0$x(J.addRow$0$x(this._table));
        J.set$colSpan$x(cell, 2);
        t1 = document;
        border = t1.createElement("div");
        border.className = "subform-group";
        cell.appendChild(border);
        return O.FormBuilder$(border, caption);
      },
      FormBuilder$2: function($parent, formTitle) {
        this._parent = $parent;
        J.insertAdjacentHtml$4$treeSanitizer$validator$x($parent, "beforeend", "<b>" + formTitle + "</b>", null, null);
        this._parent.appendChild(this._form_builder$_error);
        this._parent.appendChild(this._table);
      },
      static: {
        FormBuilder$: function($parent, formTitle) {
          var t1, t2;
          t1 = document;
          t1 = t1.createElement("table");
          t1.className = "formtable";
          t2 = document;
          t2 = t2.createElement("div");
          t2.className = "error";
          t2 = new O.FormBuilder(null, t1, t2);
          t2.FormBuilder$2($parent, formTitle);
          return t2;
        }
      }
    }
  }], ["", "../client/root/globals.dart",, E, {
    "^": ""
  }], ["", "../client/lib/html_lib.dart",, V, {
    "^": "",
    HtmlLib_insertCollapsed1: function($parent, collapsible, collapsePosition, hideInitial, moreMessage) {
      var t1, val;
      t1 = J.getInterceptor$asx(collapsible);
      if (J.$gt$n(t1.get$length(collapsible), J.$add$ns(collapsePosition, 20)))
        V.HtmlLib_insertCollapsed2($parent, t1.substring$2(collapsible, 0, collapsePosition), t1.substring$1(collapsible, collapsePosition), hideInitial, moreMessage);
      else {
        val = C.HtmlEscape_gsm._convert$3(collapsible, 0, t1.get$length(collapsible));
        t1 = J.replaceAll$2$s(val == null ? collapsible : val, "\r", "");
        J.insertAdjacentHtml$4$treeSanitizer$validator$x($parent, "beforeend", H.stringReplaceAllUnchecked(t1, "\n", "<br/>"), C.C__TrustedHtmlTreeSanitizer, null);
      }
    },
    HtmlLib_insertCollapsed2: function($parent, first, second, hideInitial, moreMessage) {
      var t1, firstE, moreE, secondE;
      if (moreMessage == null)
        moreMessage = "More";
      t1 = document;
      firstE = t1.createElement("span");
      J.setInnerHtml$3$treeSanitizer$validator$x(firstE, V.HtmlLib_unsafeStringToSafeHtmlWithLineBreaks(first), C.C__TrustedHtmlTreeSanitizer, null);
      t1 = document;
      moreE = t1.createElement("span");
      moreE.textContent = moreMessage;
      moreE.className = "text-expander";
      t1 = document;
      secondE = t1.createElement("span");
      t1 = secondE.style;
      t1.display = "none";
      J.setInnerHtml$3$treeSanitizer$validator$x(secondE, V.HtmlLib_unsafeStringToSafeHtmlWithLineBreaks(second), C.C__TrustedHtmlTreeSanitizer, null);
      $parent.appendChild(firstE);
      $parent.appendChild(moreE);
      $parent.appendChild(secondE);
      t1 = J.get$onClick$x(moreE);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new V.HtmlLib_insertCollapsed2_closure(hideInitial, firstE, moreE, secondE)), false), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    },
    HtmlLib_addOptionElements: function(sel, options) {
      var t1, opt, t2, t3;
      for (t1 = J.get$iterator$ax(options); t1.moveNext$0();) {
        opt = t1.get$current();
        t2 = W.OptionElement_OptionElement$_("", "", null, false);
        t3 = J.getInterceptor(opt);
        t2.value = t3.toString$0(opt);
        t2.textContent = t3.toString$0(opt);
        sel.appendChild(t2);
      }
    },
    HtmlLib_appendScrollingDiv: function($parent, maxHeight) {
      var t1, s, t2;
      t1 = document;
      s = t1.createElement("div");
      s.className = "scroll-list";
      t1 = s.style;
      t2 = C.JSInt_methods.toString$0(maxHeight) + "px";
      t1.maxHeight = t2;
      $parent.appendChild(s);
      return s;
    },
    HtmlLib_appendLinkToPane: function($parent, title, paneKey, asDiv) {
      var t1, e;
      t1 = document;
      e = t1.createElement("a");
      J.set$href$x(e, C.JSString_methods.$add("#", paneKey));
      e.textContent = title;
      if (asDiv) {
        t1 = e.style;
        t1.display = "block";
      }
      $parent.appendChild(e);
    },
    HtmlLib_textAreaValueToLines: function(el, removeBlanks) {
      var lines, t1;
      lines = H.setRuntimeTypeInfo(new H.MappedListIterable(J.split$1$s(J.get$value$x(el), "\n"), new V.HtmlLib_textAreaValueToLines_closure()), [null, null]).toList$0(0);
      t1 = H.setRuntimeTypeInfo(new H.MappedListIterable(lines, new V.HtmlLib_textAreaValueToLines_closure0()), [null, null]);
      t1 = t1.super$Iterable$where(t1, new V.HtmlLib_textAreaValueToLines_closure1());
      lines = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "Iterable", 0));
      return lines;
    },
    HtmlLib_unsafeStringToSafeHtmlWithLineBreaks: function(s) {
      var val, t1;
      val = C.HtmlEscape_gsm._convert$3(s, 0, J.get$length$asx(s));
      t1 = J.replaceAll$2$s(val == null ? s : val, "\r", "");
      H.checkString("<br/>");
      return H.stringReplaceAllUnchecked(t1, "\n", "<br/>");
    },
    HtmlLib_insertCollapsed2_closure: {
      "^": "Closure:1;hideInitial,firstE,moreE,secondE",
      call$1: [function(e) {
        var t1;
        if (this.hideInitial)
          J.remove$0$ax(this.firstE);
        J.remove$0$ax(this.moreE);
        t1 = this.secondE.style;
        t1.display = "";
      }, null, null, 2, 0, null, 0, [], "call"]
    },
    HtmlLib_textAreaValueToLines_closure: {
      "^": "Closure:1;",
      call$1: [function(s) {
        return J.replaceAll$2$s(s, "\r", "");
      }, null, null, 2, 0, null, 8, [], "call"]
    },
    HtmlLib_textAreaValueToLines_closure0: {
      "^": "Closure:1;",
      call$1: [function(o) {
        return J.trim$0$s(o);
      }, null, null, 2, 0, null, 10, [], "call"]
    },
    HtmlLib_textAreaValueToLines_closure1: {
      "^": "Closure:1;",
      call$1: function(o) {
        return J.$gt$n(J.get$length$asx(o), 0);
      }
    }
  }], ["", "../client/dialog/image_upload_dialog.dart",, X, {
    "^": "",
    ImageUploadDialog: {
      "^": "DialogBox;_mode,_helpText,_image_upload_dialog$_convId,_priorPostText,_showing,_continuation,_backdrop,frame",
      dialogHeight$0: function() {
        return this._mode === "P" ? 300 : 150;
      },
      build$0: function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, t1, form, fileInput, t2, bar;
        var $async$build$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = {};
                form = O.FormBuilder$($async$self.frame, "Upload Image");
                fileInput = W.InputElement_InputElement("file");
                J.set$accept$x(fileInput, "image/*");
                form.addAny$2("Image", fileInput);
                t1.ptext = null;
                if ($async$self._mode === "P") {
                  t2 = $async$self._priorPostText;
                  t1.ptext = form.addTextArea$5("Image description", 400, 70, 10000, t2 == null ? "" : t2);
                }
                t2 = $async$self.frame;
                t2.toString;
                t2.appendChild(document.createTextNode($async$self._helpText));
                bar = M.ButtonBarBuilder$($async$self.frame, null);
                t1.uploadButton = null;
                t1.uploadButton = bar.addButton$2("Upload", new X.ImageUploadDialog_build_closure(t1, $async$self, form, fileInput));
                bar.addButton$2("Cancel", new X.ImageUploadDialog_build_closure0($async$self));
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$build$0, $async$completer, null);
      },
      _uploadPost$2: function(imageBytes, ptext) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, req;
        var $async$_uploadPost$2 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                req = new X.ConvPostImageSaveRequest(null, null, null, null);
                req.imageBytes = imageBytes;
                req.ptext = ptext;
                req.convId = $async$self._image_upload_dialog$_convId;
                $async$goto = 3;
                return P._asyncHelper(L.RpcLib_command("ConvPostImageSave", req), $async$_uploadPost$2, $async$completer);
              case 3:
                // returning from await.
                $async$returnValue = $async$result.get$isOK();
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$_uploadPost$2, $async$completer, null);
      },
      _uploadAvatar$1: function(imageBytes) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, req;
        var $async$_uploadAvatar$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                req = new X.UserAvatarSaveRequest(null, null);
                req.imageBytes = imageBytes;
                $async$goto = 3;
                return P._asyncHelper(L.RpcLib_command("UserAvatarSave", req), $async$_uploadAvatar$1, $async$completer);
              case 3:
                // returning from await.
                $async$returnValue = $async$result.get$isOK();
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$_uploadAvatar$1, $async$completer, null);
      }
    },
    ImageUploadDialog_build_closure: {
      "^": "Closure:6;_box_0,$this,form,fileInput",
      call$1: function(e) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, t1, rdr, t2, file;
        var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self._box_0;
                J.set$disabled$x(t1.uploadButton, true);
                rdr = new FileReader();
                t2 = H.setRuntimeTypeInfo(new W._EventStream(rdr, "load", false), [H.getTypeArgumentByIndex(C.EventStreamProvider_load, 0)]);
                H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._html$_target, t2._eventType, W._wrapZone(new X.ImageUploadDialog_build__closure(t1, $async$self.$this, rdr)), false), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
                t1 = $async$self.fileInput;
                t2 = J.getInterceptor$x(t1);
                if (t2.get$files(t1).length === 0) {
                  t1 = $async$self.form._form_builder$_error;
                  t1.textContent = "Select a file first.";
                  J.scrollIntoView$0$x(t1);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t1 = t2.get$files(t1);
                if (0 >= t1.length) {
                  $async$returnValue = H.ioore(t1, 0);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                file = t1[0];
                t1 = file.size;
                if (typeof t1 !== "number") {
                  $async$returnValue = t1.$gt();
                  // goto return
                  $async$goto = 1;
                  break;
                }
                if (t1 > 5000000) {
                  t1 = $async$self.form._form_builder$_error;
                  t1.textContent = "The file exceeds the maximum size of 5BM.";
                  J.scrollIntoView$0$x(t1);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                rdr.readAsArrayBuffer(file.slice());
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$call$1, $async$completer, null);
      }
    },
    ImageUploadDialog_build__closure: {
      "^": "Closure:6;_box_0,$this,rdr",
      call$1: [function(e) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, imageBytes, t1, t2, ok;
        var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                imageBytes = C.FileReader_methods.get$result($async$self.rdr);
                t1 = $async$self.$this;
                t2 = t1._mode;
                $async$goto = t2 === "P" ? 2 : 4;
                break;
              case 2:
                // then
                $async$goto = 5;
                return P._asyncHelper(t1._uploadPost$2(imageBytes, J.get$value$x($async$self._box_0.ptext)), $async$call$1, $async$completer);
              case 5:
                // returning from await.
                // goto join
                $async$goto = 3;
                break;
              case 4:
                // else
                $async$result = null;
              case 3:
                // join
                ok = $async$result;
                $async$goto = t2 === "U" ? 6 : 8;
                break;
              case 6:
                // then
                $async$goto = 9;
                return P._asyncHelper(t1._uploadAvatar$1(imageBytes), $async$call$1, $async$completer);
              case 9:
                // returning from await.
                // goto join
                $async$goto = 7;
                break;
              case 8:
                // else
                $async$result = ok;
              case 7:
                // join
                if ($async$result === true)
                  t1.hide$1(true);
                J.set$disabled$x($async$self._box_0.uploadButton, false);
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$call$1, $async$completer, null);
      }, null, null, 2, 0, null, 0, [], "call"]
    },
    ImageUploadDialog_build_closure0: {
      "^": "Closure:1;$this",
      call$1: function(e) {
        this.$this.hide$1(false);
      }
    }
  }], ["interop", "../client/lib/js_interop.dart",, X, {
    "^": "",
    JGrowlOptions: {
      "^": "JavaScriptObject;",
      "%": ""
    },
    MarkdownConverter: {
      "^": "JavaScriptObject;",
      "%": ""
    },
    MarkdownEditor: {
      "^": "JavaScriptObject;",
      "%": ""
    }
  }], ["", "../client/dialog/location_dialog.dart",, Z, {
    "^": "",
    LocationDialog: {
      "^": "DialogBox;_latLon,_marker,_mapClickSubscription,_showing,_continuation,_backdrop,frame",
      dialogHeight$0: function() {
        return 500;
      },
      build$0: function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, t1, streetDiv, streetInp, streetBtn, mapBorrower, bar;
        var $async$build$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = document;
                streetDiv = t1.createElement("div");
                streetInp = W.InputElement_InputElement("text");
                J.set$maxLength$x(streetInp, 400);
                t1 = streetInp.style;
                t1.width = "170px";
                streetDiv.appendChild(streetInp);
                t1 = document;
                streetBtn = t1.createElement("button");
                streetBtn.textContent = "Lookup Address or Zip/Postal code";
                streetDiv.appendChild(streetBtn);
                $async$self.frame.appendChild(streetDiv);
                t1 = document;
                mapBorrower = t1.createElement("div");
                $async$self.frame.appendChild(mapBorrower);
                t1 = $async$self.frame;
                t1.toString;
                t1.appendChild(document.createTextNode("You can drag the map to scroll, zoom in or out, then click on the exact location to set the marker."));
                Z.LocationDialog__staticInit();
                mapBorrower.appendChild($.LocationDialog__mapDiv);
                if ($async$self._latLon != null)
                  $async$self._setMarker$2(P.JsObject_JsObject(J.$index$asx($.LocationDialog__googleMaps, "LatLng"), $async$self._latLon), true);
                t1 = J.get$onClick$x(streetBtn);
                H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new Z.LocationDialog_build_closure($async$self, streetInp)), false), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
                $async$self._mapClickSubscription = J.$index$asx($.LocationDialog__googleMaps, "event").callMethod$2("addListener", [$.LocationDialog__map, "click", new Z.LocationDialog_build_closure0($async$self)]);
                bar = M.ButtonBarBuilder$($async$self.frame, null);
                bar.addButton$2("Use This Location", new Z.LocationDialog_build_closure1($async$self));
                bar.addButton$2("Cancel", new Z.LocationDialog_build_closure2($async$self));
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$build$0, $async$completer, null);
      },
      hide$1: function(value) {
        var t1 = this._marker;
        if (t1 != null) {
          t1.callMethod$2("setMap", [null]);
          this._marker = null;
        }
        $.LocationDialog__mapCubbyhole.appendChild($.LocationDialog__mapDiv);
        this.super$DialogBox$hide(value);
        J.$index$asx($.LocationDialog__googleMaps, "event").callMethod$2("removeListener", [this._mapClickSubscription]);
      },
      _setMarker$2: function(loc, centerMap) {
        var t1, markerOptions, s, parts, lat;
        t1 = this._marker;
        if (t1 != null) {
          t1.callMethod$2("setMap", [null]);
          this._marker = null;
        }
        if (centerMap)
          $.LocationDialog__map.callMethod$2("setCenter", [loc]);
        markerOptions = P.JsObject_JsObject$jsify(P.LinkedHashMap__makeLiteral(["map", $.LocationDialog__map, "position", loc]));
        this._marker = P.JsObject_JsObject(J.$index$asx($.LocationDialog__googleMaps, "Marker"), [markerOptions]);
        s = J.toString$0$(J.toString$0$(loc));
        t1 = J.getInterceptor$asx(s);
        parts = t1.substring$2(s, 1, J.$sub$n(t1.get$length(s), 2)).split(",");
        if (0 >= parts.length)
          return H.ioore(parts, 0);
        lat = H.Primitives_parseDouble(parts[0], null);
        if (1 >= parts.length)
          return H.ioore(parts, 1);
        this._latLon = [lat, H.Primitives_parseDouble(parts[1], null)];
      },
      LocationDialog$2: function(lat, lon) {
        if (lat != null && !J.$eq$(lat, 0))
          this._latLon = [lat, lon];
      },
      static: {
        LocationDialog__staticInit: function() {
          var t1, t2, mapOptions;
          if ($.LocationDialog__googleMaps != null)
            return;
          $.LocationDialog__googleMaps = J.$index$asx(J.$index$asx($.$get$context(), "google"), "maps");
          t1 = document;
          t1 = t1.createElement("div");
          t2 = t1.style;
          t2.display = "none";
          $.LocationDialog__mapCubbyhole = t1;
          document.body.appendChild(t1);
          t1 = document;
          t1 = t1.createElement("div");
          t2 = $.HtmlLib__maxid + 1;
          $.HtmlLib__maxid = t2;
          t1.id = "e" + C.JSInt_methods.toString$0(t2);
          $.LocationDialog__mapDiv = t1;
          $.LocationDialog__mapCubbyhole.appendChild(t1);
          t1 = $.LocationDialog__mapDiv.style;
          t1.zIndex = "5";
          t1.margin = "4px";
          t1.width = "100%";
          t1.height = "380px";
          mapOptions = P.JsObject_JsObject$jsify(P.LinkedHashMap__makeLiteral(["zoom", 15, "mapTypeId", J.$index$asx(J.$index$asx($.LocationDialog__googleMaps, "MapTypeId"), "ROADMAP"), "mapTypeControl", false, "streetViewControl", false, "fullscreenControl", false]));
          $.LocationDialog__map = P.JsObject_JsObject(J.$index$asx($.LocationDialog__googleMaps, "Map"), [$.LocationDialog__mapDiv, mapOptions]);
          $.LocationDialog__geocoder = P.JsObject_JsObject(J.$index$asx($.LocationDialog__googleMaps, "Geocoder"), []);
        },
        LocationDialog$: function(lat, lon) {
          var t1 = new Z.LocationDialog(null, null, null, false, null, null, null);
          t1.DialogBox$0();
          t1.LocationDialog$2(lat, lon);
          return t1;
        }
      }
    },
    LocationDialog_build_closure: {
      "^": "Closure:1;$this,streetInp",
      call$1: [function(e) {
        var addr, geoOptions;
        addr = J.trim$0$s(J.get$value$x(this.streetInp));
        if (addr.length === 0)
          return;
        geoOptions = P.JsObject_JsObject$jsify(P.LinkedHashMap__makeLiteral(["address", addr]));
        $.LocationDialog__geocoder.callMethod$2("geocode", [geoOptions, new Z.LocationDialog_build__closure(this.$this)]);
      }, null, null, 2, 0, null, 0, [], "call"]
    },
    LocationDialog_build__closure: {
      "^": "Closure:9;$this",
      call$2: [function(results, $status) {
        var t1, t2;
        if (J.$eq$($status, J.$index$asx(J.$index$asx($.LocationDialog__googleMaps, "GeocoderStatus"), "OK")))
          this.$this._setMarker$2(J.$index$asx(J.$index$asx(J.$index$asx(results, 0), "geometry"), "location"), true);
        else {
          t1 = C.JSString_methods.$add("Geocode was not successful: ", $status);
          t2 = {life: 5000};
          self.jQuery.jGrowl(t1, t2);
        }
      }, null, null, 4, 0, null, 43, [], 44, [], "call"]
    },
    LocationDialog_build_closure0: {
      "^": "Closure:1;$this",
      call$1: [function(e) {
        this.$this._setMarker$2(J.$index$asx(e, "latLng"), false);
      }, null, null, 2, 0, null, 0, [], "call"]
    },
    LocationDialog_build_closure1: {
      "^": "Closure:1;$this",
      call$1: function(e) {
        var t1, t2;
        t1 = this.$this;
        t2 = t1._latLon;
        if (t2 == null) {
          t1 = {life: 5000};
          self.jQuery.jGrowl("Search for location or click map first", t1);
          return;
        }
        t1.hide$1(t2);
      }
    },
    LocationDialog_build_closure2: {
      "^": "Closure:1;$this",
      call$1: function(e) {
        this.$this.hide$1(null);
      }
    }
  }], ["", "../client/dialog/login_dialog.dart",, R, {
    "^": "",
    LoginDialog: {
      "^": "DialogBox;_loginHandler,_showing,_continuation,_backdrop,frame",
      dialogHeight$0: function() {
        return 150;
      },
      build$0: function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, form, nickInput, pwInput, saveChk, bar;
        var $async$build$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                form = O.FormBuilder$($async$self.frame, "Log In");
                nickInput = form.addInput$3("Nickname", 200, 40);
                pwInput = form.addPasswordInput$3("Password", 200, 40);
                saveChk = W.InputElement_InputElement("checkbox");
                form.addAny$2("Save password on this computer", saveChk);
                bar = M.ButtonBarBuilder$($async$self.frame, null);
                bar.addButton$2("Log In", new R.LoginDialog_build_closure($async$self, form, nickInput, pwInput, saveChk));
                bar.addButton$2("Create Account", new R.LoginDialog_build_closure0($async$self));
                bar.addButton$2("Recover Password", new R.LoginDialog_build_closure1($async$self, form, nickInput));
                bar.addButton$2("Cancel", new R.LoginDialog_build_closure2($async$self));
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$build$0, $async$completer, null);
      }
    },
    LoginDialog_build_closure: {
      "^": "Closure:6;$this,form,nickInput,pwInput,saveChk",
      call$1: function(e) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, t1, t2, t3, t4, message;
        var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.$this;
                t2 = J.trim$0$s(J.get$value$x($async$self.nickInput));
                t3 = J.trim$0$s(J.get$value$x($async$self.pwInput));
                t4 = J.get$checked$x($async$self.saveChk);
                $async$goto = 2;
                return P._asyncHelper(t1._loginHandler.call$3(t2, t3, t4), $async$call$1, $async$completer);
              case 2:
                // returning from await.
                message = $async$result;
                if (message == null)
                  t1.hide$1(true);
                else {
                  t1 = $async$self.form._form_builder$_error;
                  t1.textContent = message;
                  J.scrollIntoView$0$x(t1);
                }
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$call$1, $async$completer, null);
      }
    },
    LoginDialog_build_closure0: {
      "^": "Closure:1;$this",
      call$1: function(e) {
        var ud;
        this.$this.hide$1(false);
        ud = new Z.UserDialog(0, false, null, null, null);
        ud.DialogBox$0();
        ud.show$0(0);
      }
    },
    LoginDialog_build_closure1: {
      "^": "Closure:6;$this,form,nickInput",
      call$1: function(e) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, t1, t2, nick, args, response, rd;
        var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.nickInput;
                t2 = J.getInterceptor$x(t1);
                nick = J.trim$0$s(t2.get$value(t1));
                if (nick.length === 0) {
                  t1 = $async$self.form._form_builder$_error;
                  t1.textContent = "First enter the nickname, then press Recover Password";
                  J.scrollIntoView$0$x(t1);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                args = new X.UserRecoverPasswordRequest(null, null, null, null, null);
                args.recoveryNick = J.trim$0$s(t2.get$value(t1));
                args.mode = "E";
                $async$goto = 3;
                return P._asyncHelper(L.RpcLib_command("UserRecoverPassword", args), $async$call$1, $async$completer);
              case 3:
                // returning from await.
                response = $async$result;
                if (!response.get$isOK()) {
                  t1 = $async$self.form._form_builder$_error;
                  t1.textContent = response.get$errorMessage();
                  J.scrollIntoView$0$x(t1);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                $async$self.$this.hide$1(false);
                rd = new R.LoginRecoveryDialog(nick, false, null, null, null);
                rd.DialogBox$0();
                rd.show$0(0);
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$call$1, $async$completer, null);
      }
    },
    LoginDialog_build_closure2: {
      "^": "Closure:1;$this",
      call$1: function(e) {
        this.$this.hide$1(false);
      }
    }
  }], ["", "../client/dialog/login_recovery_dialog.dart",, R, {
    "^": "",
    LoginRecoveryDialog: {
      "^": "DialogBox;_nick,_showing,_continuation,_backdrop,frame",
      build$0: function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, form, nickInput, codeInput, pw1Input, pw2Input, bar;
        var $async$build$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                form = O.FormBuilder$($async$self.frame, "Recover Password");
                nickInput = form.addInput$4("Nickname", 400, 40, $async$self._nick);
                J.set$disabled$x(nickInput, true);
                form.addExplanation$2(nickInput, "An email has been sent to you. Leave this open, but go check your email and note the code given in the email. Then copy the code below.");
                codeInput = form.addInput$3("Recovery code from email", 200, 10);
                pw1Input = form.addInput$3("New password", 200, 40);
                pw2Input = form.addInput$3("Repeat password", 200, 40);
                bar = M.ButtonBarBuilder$($async$self.frame, null);
                bar.addButton$2("Recover", new R.LoginRecoveryDialog_build_closure($async$self, form, nickInput, codeInput, pw1Input, pw2Input));
                bar.addButton$2("Cancel", new R.LoginRecoveryDialog_build_closure0($async$self));
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$build$0, $async$completer, null);
      }
    },
    LoginRecoveryDialog_build_closure: {
      "^": "Closure:6;$this,form,nickInput,codeInput,pw1Input,pw2Input",
      call$1: function(e) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, pw1, pw2, code, nick, t1, err, args, response;
        var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                pw1 = J.trim$0$s(J.get$value$x($async$self.pw1Input));
                pw2 = J.trim$0$s(J.get$value$x($async$self.pw2Input));
                code = J.trim$0$s(J.get$value$x($async$self.codeInput));
                nick = J.trim$0$s(J.get$value$x($async$self.nickInput));
                if (pw1 !== pw2) {
                  t1 = $async$self.form._form_builder$_error;
                  t1.textContent = "Passwords do not match";
                  J.scrollIntoView$0$x(t1);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                err = M.WLib_passwordComplexityError(pw1);
                if (err != null) {
                  t1 = $async$self.form._form_builder$_error;
                  t1.textContent = err;
                  J.scrollIntoView$0$x(t1);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                args = new X.UserRecoverPasswordRequest(null, null, null, null, null);
                args.recoveryNick = nick;
                args.recoveryPassword = pw1;
                args.code = code;
                args.mode = "V";
                $async$goto = 3;
                return P._asyncHelper(L.RpcLib_command("UserRecoverPassword", args), $async$call$1, $async$completer);
              case 3:
                // returning from await.
                response = $async$result;
                if (!response.get$isOK()) {
                  t1 = $async$self.form._form_builder$_error;
                  t1.textContent = response.get$errorMessage();
                  J.scrollIntoView$0$x(t1);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t1 = {life: 5000};
                self.jQuery.jGrowl("Account recovered. Please log in again.", t1);
                $async$self.$this.hide$1(false);
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$call$1, $async$completer, null);
      }
    },
    LoginRecoveryDialog_build_closure0: {
      "^": "Closure:1;$this",
      call$1: function(e) {
        this.$this.hide$1(false);
      }
    }
  }], ["", "../client/main.dart",, F, {
    "^": "",
    main: [function() {
      var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError;
      var $async$main = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              P.Timer_Timer(C.Duration_0, new F.main_closure());
              // implicit return
              return P._asyncHelper(null, 0, $async$completer, null);
            case 1:
              // rethrow
              return P._asyncHelper($async$currentError, 1, $async$completer);
          }
      });
      return P._asyncHelper(null, $async$main, $async$completer, null);
    }, "call$0", "main__main$closure", 0, 0, 4],
    main_closure: {
      "^": "Closure:4;",
      call$0: function() {
        return L.MainController_startApp();
      }
    }
  }, 1], ["", "../client/main_controller.dart",, L, {
    "^": "",
    MainController_startApp: function() {
      var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$next = [], nick, t1, nick0, exception, $async$exception, $async$exception1, $async$exception2;
      var $async$MainController_startApp = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (window.location.protocol === "file:")
                $.RpcLib_serverBaseUrl = "http://localhost:8083/servant/v1/";
              else
                $.RpcLib_serverBaseUrl = "https://www.autistic.zone/servant/v1/";
              self.jQuery.jGrowl.defaults.position = "bottom-left";
              G.MainMenuHandler_init();
              $.UserDialog_onLogoutAccount = new L.MainController_startApp_closure();
              $.UserDialog_onChangeAccount = L.main_controller_MainController_setVisibility$closure();
              $.ButtonBarBuilder_systemButtonHandler = L.main_controller_MainController_doOnUserAction$closure();
              t1 = {life: 5000};
              self.jQuery.jGrowl("Welcome!", t1);
              L.MainController_logOut(false, false);
              L.MainController_setVisibility();
              L.MainController_sizeEverything();
              L.MainController_applyThemes();
              t1 = J.get$onClick$x(document.querySelector("#button-mystuff"));
              H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new L.MainController_startApp_closure0()), false), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
              t1 = J.get$onClick$x(document.querySelector("#button-menu"));
              H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new L.MainController_startApp_closure1()), false), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
              t1 = J.get$onClick$x(document.querySelector("#button-next"));
              H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new L.MainController_startApp_closure2()), false), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
              t1 = J.get$onClick$x(document.querySelector("#button-refresh"));
              H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new L.MainController_startApp_closure3()), false), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
              t1 = H.setRuntimeTypeInfo(new W._EventStream(window, "hashchange", false), [H.getTypeArgumentByIndex(C.EventStreamProvider_hashchange, 0)]);
              H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new L.MainController_startApp_closure4()), false), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
              t1 = H.setRuntimeTypeInfo(new W._EventStream(window, "resize", false), [H.getTypeArgumentByIndex(C.EventStreamProvider_resize, 0)]);
              H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new L.MainController_startApp_closure5()), false), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
              t1 = H.setRuntimeTypeInfo(new W._EventStream(document, "keydown", false), [H.getTypeArgumentByIndex(C.EventStreamProvider_keydown, 0)]);
              H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new L.MainController_startApp_closure6()), false), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
              nick0 = $.$get$ClientStore__store().getItem("nick");
              nick = nick0 == null ? "" : nick0;
              $async$goto = J.get$length$asx(nick) > 0 ? 2 : 3;
              break;
            case 2:
              // then
              $async$handler = 5;
              $async$goto = 8;
              return P._asyncHelper(L.MainController_logIn(nick, $.$get$ClientStore__store().getItem("password"), false, true), $async$MainController_startApp, $async$completer);
            case 8:
              // returning from await.
              $async$handler = 1;
              // goto after finally
              $async$goto = 7;
              break;
            case 5:
              // catch
              $async$handler = 4;
              $async$exception = $async$currentError;
              H.unwrapException($async$exception);
              // goto after finally
              $async$goto = 7;
              break;
            case 4:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 7:
              // after finally
            case 3:
              // join
              $async$handler = 10;
              $async$goto = 13;
              return P._asyncHelper(L.MainController_processUrl(), $async$MainController_startApp, $async$completer);
            case 13:
              // returning from await.
              $async$handler = 1;
              // goto after finally
              $async$goto = 12;
              break;
            case 10:
              // catch
              $async$handler = 9;
              $async$exception1 = $async$currentError;
              H.unwrapException($async$exception1);
              // goto after finally
              $async$goto = 12;
              break;
            case 9:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 12:
              // after finally
              $async$handler = 15;
              $async$goto = $.Globals_nick == null && $.$get$Globals_panes().length === 0 ? 18 : 19;
              break;
            case 18:
              // then
              $async$goto = 20;
              return P._asyncHelper(A.PaneFactory_create(Z.PaneKey$("doc/s=PUB"), false), $async$MainController_startApp, $async$completer);
            case 20:
              // returning from await.
              $async$goto = 21;
              return P._asyncHelper(A.PaneFactory_create(Z.PaneKey$("resourcetree"), false), $async$MainController_startApp, $async$completer);
            case 21:
              // returning from await.
            case 19:
              // join
              $async$handler = 1;
              // goto after finally
              $async$goto = 17;
              break;
            case 15:
              // catch
              $async$handler = 14;
              $async$exception2 = $async$currentError;
              H.unwrapException($async$exception2);
              // goto after finally
              $async$goto = 17;
              break;
            case 14:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 17:
              // after finally
              if ($.Globals_isLargeScreen === true)
                if ($.Globals_nick == null)
                  L.MainController_showMenu(false);
                else
                  L.MainController_showMyStuff(false);
              else if ($.$get$Globals_panes().length === 0 && $.Globals_nick != null)
                L.MainController_showMyStuff(false);
              E.ClientStore_registerReceiveMessage(T.push_queue_handler_PushQueueHandler__receiveFromOtherWindow$closure());
              P.Timer_Timer(P.Duration$(0, 0, 0, 0, 0, 1), T.push_queue_handler_PushQueueHandler__timerTick$closure());
              // implicit return
              return P._asyncHelper(null, 0, $async$completer, null);
            case 1:
              // rethrow
              return P._asyncHelper($async$currentError, 1, $async$completer);
          }
      });
      return P._asyncHelper(null, $async$MainController_startApp, $async$completer, null);
    },
    MainController_doOnUserAction: [function() {
      $.Globals_lastActivityUtc = new P.DateTime(Date.now(), false).toUtc$0();
      $.$get$Globals_doOnUserAction().forEach$1(0, new L.MainController_doOnUserAction_closure());
      $.$get$Globals_doOnUserAction().clear$0(0);
    }, "call$0", "main_controller_MainController_doOnUserAction$closure", 0, 0, 7],
    MainController_logOut: function(forget, notifyUser) {
      var wasLoggedIn, t1;
      wasLoggedIn = $.Globals_nick != null;
      $.Globals_nick = null;
      $.Globals_userId = 0;
      $.Globals_publicName = null;
      $.Globals_lastPollUtc = new P.DateTime(H.checkInt(H.Primitives_valueFromDecomposedDate(1970, 1, 1, 0, 0, 0, C.JSInt_methods.round$0(0), false)), false);
      $.Globals_lastFullPollUtc = new P.DateTime(H.checkInt(H.Primitives_valueFromDecomposedDate(1970, 1, 1, 0, 0, 0, C.JSInt_methods.round$0(0), false)), false);
      t1 = $.$get$Globals_pushQueue();
      (t1 && C.JSArray_methods).set$length(t1, 0);
      L.MainController_setVisibility();
      L.MainController_collapseAll();
      if (forget) {
        $.$get$ClientStore__store().setItem("nick", null);
        $.$get$ClientStore__store().setItem("password", null);
      }
      if (notifyUser && wasLoggedIn) {
        t1 = {life: 5000};
        self.jQuery.jGrowl("Logged out", t1);
      }
    },
    MainController_toggleLogin: function() {
      if ($.Globals_nick != null) {
        L.MainController_logOut(true, true);
        return;
      }
      var dlg = new R.LoginDialog(new L.MainController_toggleLogin_loginHandlerFromDialog(), false, null, null, null);
      dlg.DialogBox$0();
      dlg.show$0(0);
    },
    MainController_logIn: function(nick, password, notifyUser, savePW) {
      var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, req, auth, t1;
      var $async$MainController_logIn = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              req = new X.APIRequestBase(null, null);
              req.nick = nick;
              req.password = password;
              $async$goto = 3;
              return P._asyncHelper(L.RpcLib_authenticate(req), $async$MainController_logIn, $async$completer);
            case 3:
              // returning from await.
              auth = $async$result;
              if (auth.get$base().get$isOK()) {
                $.Globals_nick = auth.get$nick();
                $.Globals_password = password;
                $.Globals_userId = auth.get$userId();
                $.Globals_publicName = auth.get$publicName();
                $.Globals_isSiteAdmin = J.$eq$(auth.get$isSiteAdmin(), "Y");
                if (savePW === true) {
                  $.$get$ClientStore__store().setItem("nick", nick);
                  $.$get$ClientStore__store().setItem("password", password);
                } else
                  $.$get$ClientStore__store().setItem("password", null);
                if (notifyUser) {
                  t1 = {life: 5000};
                  self.jQuery.jGrowl("Logged in.", t1);
                }
                L.MainController_setVisibility();
                L.MainController_sizeEverything();
                if ($.Globals_isLargeScreen === true)
                  L.MainController_showMyStuff(false);
              } else if (notifyUser) {
                t1 = {life: 5000};
                self.jQuery.jGrowl("Account nickname or password is incorrect.", t1);
              }
              $async$returnValue = auth.get$base().get$isOK();
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncHelper($async$returnValue, 0, $async$completer, null);
            case 2:
              // rethrow
              return P._asyncHelper($async$currentError, 1, $async$completer);
          }
      });
      return P._asyncHelper(null, $async$MainController_logIn, $async$completer, null);
    },
    MainController_sizeScrollSpace: function(big) {
      var t1, h, t2;
      t1 = window.innerHeight;
      if (typeof t1 !== "number")
        return t1.$sub();
      h = P.max(20, t1 - 500);
      if (big)
        h = 500;
      t1 = document.querySelector("#scrollspace").style;
      t2 = C.JSInt_methods.toString$0(h) + "px";
      t1.height = t2;
    },
    MainController_sizeEverything: function() {
      P.Timer_Timer(C.Duration_0, new L.MainController_sizeEverything_closure());
    },
    MainController_applyThemes: function() {
      var page, t1, fontTheme, colorTheme;
      page = Q.$("#page", null);
      for (t1 = $.$get$MainController_fontThemes(), t1 = H.SubListIterable$(t1, 1, null, H.getTypeArgumentByIndex(t1, 0)), t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.get$length(t1), 0, null), [H.getRuntimeTypeArgument(t1, "ListIterable", 0)]); t1.moveNext$0();)
        page.removeClass$1(t1.__internal$_current);
      for (t1 = $.$get$MainController_colorThemes(), t1 = H.SubListIterable$(t1, 1, null, H.getTypeArgumentByIndex(t1, 0)), t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.get$length(t1), 0, null), [H.getRuntimeTypeArgument(t1, "ListIterable", 0)]); t1.moveNext$0();)
        page.removeClass$1(t1.__internal$_current);
      fontTheme = $.$get$ClientStore__store().getItem("font-theme");
      if (fontTheme == null)
        fontTheme = "";
      if (fontTheme.length > 0)
        page.addClass$1(fontTheme);
      colorTheme = $.$get$ClientStore__store().getItem("color-theme");
      if (colorTheme == null)
        colorTheme = "";
      if (colorTheme.length > 0)
        page.addClass$1(colorTheme);
    },
    MainController_changeUrlFragment: function(pkfull) {
      var newUrl;
      if (P.Uri_base().get$fragment() === pkfull)
        return;
      newUrl = J.$add$ns(J.$add$ns(P.Uri_base().removeFragment$0().toString$0(0), "#"), pkfull);
      $.Globals_urlChangedInCode = true;
      window.location.assign(newUrl);
    },
    MainController_processUrl: function() {
      var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, paneKey, t1, lastPane;
      var $async$MainController_processUrl = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($.Globals_urlChangedInCode) {
                $.Globals_urlChangedInCode = false;
                // goto return
                $async$goto = 1;
                break;
              }
              paneKey = P.Uri_base().get$fragment();
              t1 = $.$get$Globals_panes();
              if (t1.length > 0) {
                lastPane = (t1 && C.JSArray_methods).get$last(t1);
                if (J.$eq$(lastPane.get$paneKey()._key, paneKey) && J.get$isCollapsed$x(lastPane) !== true) {
                  // goto return
                  $async$goto = 1;
                  break;
                }
              }
              if (paneKey.length === 0) {
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = 3;
              return P._asyncHelper(A.PaneFactory_create(Z.PaneKey$(paneKey), true), $async$MainController_processUrl, $async$completer);
            case 3:
              // returning from await.
            case 1:
              // return
              return P._asyncHelper($async$returnValue, 0, $async$completer, null);
            case 2:
              // rethrow
              return P._asyncHelper($async$currentError, 1, $async$completer);
          }
      });
      return P._asyncHelper(null, $async$MainController_processUrl, $async$completer, null);
    },
    MainController_setVisibility: [function() {
      var t1, logInOut, hello, isLoggedIn, t2;
      t1 = document;
      logInOut = t1.createElement("button");
      t1 = J.get$onClick$x(logInOut);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new L.MainController_setVisibility_closure()), false), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = Q.$("#hello", null);
      hello = t1.get$first(t1);
      t1 = J.getInterceptor$x(hello);
      t1.set$innerHtml(hello, "");
      isLoggedIn = $.Globals_nick != null;
      t2 = Q.$("#button-next", null);
      if (J.get$display$x(J.get$style$x(t2.get$first(t2))) !== "hidden" !== isLoggedIn)
        L.MainController_hideMenuPanels();
      if (isLoggedIn) {
        logInOut.textContent = "Log Out";
        t1.appendText$1(hello, "Hello " + H.S($.Globals_publicName) + " ");
        Q._showHide(Q.$("#button-next", null)._elements, true);
        Q._showHide(Q.$("#button-mystuff", null)._elements, true);
      } else {
        logInOut.textContent = "Log In";
        t1.appendText$1(hello, "(not logged in) ");
        Q._showHide(Q.$("#mystuff1", null)._elements, false);
        Q._showHide(Q.$("#button-next", null)._elements, false);
        Q._showHide(Q.$("#button-mystuff", null)._elements, false);
      }
      t1.append$1(hello, logInOut);
      G.MainMenuHandler_setVisibility(isLoggedIn);
    }, "call$0", "main_controller_MainController_setVisibility$closure", 0, 0, 7],
    MainController_hideMenuPanels: function() {
      $.Globals_myStuffShowing = false;
      $.Globals_menuShowing = false;
      Q._showHide(Q.$("#mystuff1", null)._elements, false);
      Q._showHide(Q.$("#menu1", null)._elements, false);
      Q._showHide(Q.$("#popupconnector", null)._elements, false);
      var t1 = Q.$("#button-mystuff", null);
      J.set$borderTopWidth$x(J.get$style$x(t1.get$first(t1)), "1px");
      t1 = Q.$("#button-menu", null);
      J.set$borderTopWidth$x(J.get$style$x(t1.get$first(t1)), "1px");
    },
    MainController_showMyStuff: function(allowHide) {
      var wasShowing, t1;
      wasShowing = $.Globals_myStuffShowing;
      L.MainController_hideMenuPanels();
      if (allowHide && wasShowing)
        return;
      Q._showHide(Q.$("#mystuff1", null)._elements, true);
      $.Globals_myStuffShowing = true;
      t1 = Q.$("#button-mystuff", null);
      L.MainController__showPopupConnector(t1.get$first(t1));
    },
    MainController_showMenu: function(allowHide) {
      var wasShowing, t1;
      wasShowing = $.Globals_menuShowing;
      L.MainController_hideMenuPanels();
      if (allowHide && wasShowing)
        return;
      Q._showHide(Q.$("#menu1", null)._elements, true);
      $.Globals_menuShowing = true;
      t1 = Q.$("#button-menu", null);
      L.MainController__showPopupConnector(t1.get$first(t1));
    },
    MainController__showPopupConnector: function(over) {
      var btnrect, t1, t2, t3, t4;
      btnrect = J.getBoundingClientRect$0$x(over);
      t1 = Q.$("#popupconnector", null);
      t1 = J.get$style$x(t1.get$first(t1));
      t2 = J.getInterceptor$x(t1);
      t2.set$display(t1, "block");
      t3 = J.getInterceptor$x(btnrect);
      t4 = t3.get$width(btnrect);
      if (typeof t4 !== "number")
        return t4.$sub();
      t2.set$width(t1, C.JSNumber_methods.toString$0(t4 - 2) + "px");
      t2.set$left(t1, J.toString$0$(t3.get$left(btnrect)) + "px");
    },
    MainController_collapseAll: function() {
      var t1, t2, _i;
      for (t1 = $.$get$Globals_panes(), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        J.collapse$0$x(t1[_i]);
    },
    MainController_userSetLocation: function(forced) {
      var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, latlon, t1, t2;
      var $async$MainController_userSetLocation = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return P._asyncHelper(Z.LocationDialog$(E.ClientStore_lat(), E.ClientStore_lon()).show$0(0), $async$MainController_userSetLocation, $async$completer);
            case 2:
              // returning from await.
              latlon = $async$result;
              if (latlon != null) {
                t1 = J.getInterceptor$asx(latlon);
                t2 = t1.$index(latlon, 0);
                $.$get$ClientStore__store().setItem("lat", J.toString$0$(t2));
                t1 = t1.$index(latlon, 1);
                $.$get$ClientStore__store().setItem("lon", J.toString$0$(t1));
              }
              // implicit return
              return P._asyncHelper(null, 0, $async$completer, null);
            case 1:
              // rethrow
              return P._asyncHelper($async$currentError, 1, $async$completer);
          }
      });
      return P._asyncHelper(null, $async$MainController_userSetLocation, $async$completer, null);
    },
    MainController_startApp_closure: {
      "^": "Closure:4;",
      call$0: function() {
        return L.MainController_logOut(true, true);
      }
    },
    MainController_startApp_closure0: {
      "^": "Closure:1;",
      call$1: [function(e) {
        return L.MainController_showMyStuff(true);
      }, null, null, 2, 0, null, 0, [], "call"]
    },
    MainController_startApp_closure1: {
      "^": "Closure:1;",
      call$1: [function(e) {
        return L.MainController_showMenu(true);
      }, null, null, 2, 0, null, 0, [], "call"]
    },
    MainController_startApp_closure2: {
      "^": "Closure:1;",
      call$1: [function(e) {
        T.PushQueueHandler_showNext();
        return;
      }, null, null, 2, 0, null, 0, [], "call"]
    },
    MainController_startApp_closure3: {
      "^": "Closure:1;",
      call$1: [function(e) {
        T.PushQueueHandler__showHideRefreshButton(false);
        $.Globals_pollExplicitlyRequested = true;
        return;
      }, null, null, 2, 0, null, 0, [], "call"]
    },
    MainController_startApp_closure4: {
      "^": "Closure:1;",
      call$1: [function(e) {
        return L.MainController_processUrl();
      }, null, null, 2, 0, null, 0, [], "call"]
    },
    MainController_startApp_closure5: {
      "^": "Closure:1;",
      call$1: [function(e) {
        return L.MainController_sizeEverything();
      }, null, null, 2, 0, null, 0, [], "call"]
    },
    MainController_startApp_closure6: {
      "^": "Closure:1;",
      call$1: [function(e) {
        var t1, handled, t2;
        t1 = J.getInterceptor$x(e);
        if (t1.get$ctrlKey(e) === true)
          if (J.$eq$(t1.get$keyCode(e), 32)) {
            T.PushQueueHandler_showNext();
            handled = true;
          } else if (J.$eq$(t1.get$keyCode(e), 77)) {
            L.MainController_showMenu(false);
            handled = true;
          } else if (J.$eq$(t1.get$keyCode(e), 73)) {
            L.MainController_showMyStuff(false);
            handled = true;
          } else if (J.$eq$(t1.get$keyCode(e), 81)) {
            L.MainController_logOut(true, true);
            handled = true;
          } else if (J.$eq$(t1.get$keyCode(e), 72)) {
            L.MainController_collapseAll();
            handled = true;
          } else
            handled = false;
        else
          handled = false;
        if (!handled && $.$get$Globals_panes().length > 1) {
          t2 = $.$get$Globals_panes();
          (t2 && C.JSArray_methods).get$last(t2).handleHotKey$1(e);
          handled = false;
        }
        if (!handled && J.$eq$(t1.get$keyCode(e), 27)) {
          L.MainController_hideMenuPanels();
          handled = true;
        }
        if (handled)
          t1.preventDefault$0(e);
        return;
      }, null, null, 2, 0, null, 0, [], "call"]
    },
    MainController_doOnUserAction_closure: {
      "^": "Closure:9;",
      call$2: function(k, v) {
        return v.call$0();
      }
    },
    MainController_toggleLogin_loginHandlerFromDialog: {
      "^": "Closure:56;",
      call$3: [function(nick, pw, savePW) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError;
        var $async$call$3 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return P._asyncHelper(L.MainController_logIn(nick, pw, true, savePW), $async$call$3, $async$completer);
              case 3:
                // returning from await.
                if ($async$result === true) {
                  // goto return
                  $async$goto = 1;
                  break;
                }
                $async$returnValue = "Account nickname or password is incorrect.";
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$call$3, $async$completer, null);
      }, null, null, 6, 0, null, 45, [], 46, [], 47, [], "call"]
    },
    MainController_sizeEverything_closure: {
      "^": "Closure:4;",
      call$0: function() {
        var wh, t1, t2, hh, mh, isLargeScreen, leftw, t3, popupmax, btnrect;
        wh = window.innerHeight;
        t1 = Q.$("#header", null)._elements;
        t2 = J.getInterceptor$asx(t1);
        hh = t2.get$isEmpty(t1) ? null : J.get$offsetHeight$x(t2.get$first(t1));
        if (typeof wh !== "number")
          return wh.$sub();
        if (typeof hh !== "number")
          return H.iae(hh);
        mh = wh - hh - 20;
        t1 = window.innerWidth;
        if (typeof t1 !== "number")
          return t1.$gt();
        isLargeScreen = t1 > 1200;
        leftw = isLargeScreen ? 400 : 0;
        t1 = $.Globals_isLargeScreen;
        $.Globals_isLargeScreen = isLargeScreen;
        t2 = document.querySelector("#middle").style;
        t3 = C.JSInt_methods.toString$0(mh) + "px";
        t2.height = t3;
        L.MainController_sizeScrollSpace(false);
        t2 = window.innerWidth;
        if (typeof t2 !== "number")
          return t2.$sub();
        t2 = P.min(700, t2 - leftw - 2);
        t3 = document.querySelector("#main1").style;
        t2 = C.JSInt_methods.toString$0(t2) + "px";
        t3.width = t2;
        popupmax = C.JSInt_methods.toString$0(mh - 70) + "px";
        t2 = Q.$("#mystuff1", null);
        J.set$maxHeight$x(J.get$style$x(t2.get$first(t2)), popupmax);
        t2 = Q.$("#menu1", null);
        J.set$maxHeight$x(J.get$style$x(t2.get$first(t2)), popupmax);
        t2 = Q.$("#mystuff2", null);
        J.set$maxHeight$x(J.get$style$x(t2.get$first(t2)), popupmax);
        t2 = Q.$("#menu2", null);
        J.set$maxHeight$x(J.get$style$x(t2.get$first(t2)), popupmax);
        t2 = Q.$("#button-menu", null);
        btnrect = J.getBoundingClientRect$0$x(t2.get$first(t2));
        t2 = Q.$("#popupconnector", null);
        t2 = J.get$style$x(t2.get$first(t2));
        t3 = J.get$top$x(btnrect);
        if (typeof t3 !== "number")
          return H.iae(t3);
        J.set$bottom$x(t2, C.JSNumber_methods.toString$0(wh - t3 - 1) + "px");
        if (isLargeScreen !== t1) {
          t1 = document.querySelector("#left").style;
          t2 = C.JSInt_methods.toString$0(leftw) + "px";
          t1.width = t2;
          L.MainController_hideMenuPanels();
        }
      }
    },
    MainController_setVisibility_closure: {
      "^": "Closure:1;",
      call$1: [function(e) {
        return L.MainController_toggleLogin();
      }, null, null, 2, 0, null, 0, [], "call"]
    }
  }], ["", "../client/main_menu_handler.dart",, G, {
    "^": "",
    MainMenuHandler_init: function() {
      var colorThemeIndex, fontThemeIndex, t1, year, loginItem, profileItem, logoutItem, createAccountItem, colorSelect, fontSelect;
      colorThemeIndex = C.JSArray_methods.indexOf$1($.$get$MainController_colorThemes(), $.$get$ClientStore__store().getItem("color-theme"));
      fontThemeIndex = C.JSArray_methods.indexOf$1($.$get$MainController_fontThemes(), $.$get$ClientStore__store().getItem("font-theme"));
      t1 = Q.$("#menu2", null);
      $.MainMenuHandler__panel = t1.get$first(t1);
      year = H.Primitives_getYear(new P.DateTime(Date.now(), false));
      J.appendHtml$1$x($.MainMenuHandler__panel, "<h2>Resources - books, web, etc.</h2>");
      G.MainMenuHandler_addItem("Browse/Create resources by category", "paneresource", new G.MainMenuHandler_init_closure(), null);
      G.MainMenuHandler_addItem("Search resources by keyword", "paneresource", new G.MainMenuHandler_init_closure0(), null);
      J.appendHtml$1$x($.MainMenuHandler__panel, "<h2>Projects and conversations</h2>");
      G.MainMenuHandler_addItem("Browse/Create projects by category", "paneproject", new G.MainMenuHandler_init_closure1(), null);
      G.MainMenuHandler_addItem("Search projects by keyword", "paneproject", new G.MainMenuHandler_init_closure2(), null);
      G.MainMenuHandler_addItem("Search in all conversations", "paneconv", new G.MainMenuHandler_init_closure3(), null);
      J.appendHtml$1$x($.MainMenuHandler__panel, "<h2>Local events</h2>");
      G.MainMenuHandler_addItem("Find events", "paneevent", new G.MainMenuHandler_init_closure4(), null);
      G.MainMenuHandler_addItem("Create an event", "paneevent", new G.MainMenuHandler_init_closure5(), null);
      J.appendHtml$1$x($.MainMenuHandler__panel, "<h2>Organizing the movement</h2>");
      G.MainMenuHandler_addItem("Movement agenda & documents", "panedoc", new G.MainMenuHandler_init_closure6(), null);
      G.MainMenuHandler_addItem("Proposed changes - active", "paneproposal", new G.MainMenuHandler_init_closure7(), null);
      G.MainMenuHandler_addItem("System changes", "paneproposal", new G.MainMenuHandler_init_closure8(year), null);
      J.appendHtml$1$x($.MainMenuHandler__panel, "<h2>Accounts and settings</h2>");
      loginItem = G.MainMenuHandler_addItem("Log In", null, new G.MainMenuHandler_init_closure9(), null);
      profileItem = G.MainMenuHandler_addItem("My Profile", "paneuser", new G.MainMenuHandler_init_closure10(), null);
      logoutItem = G.MainMenuHandler_addItem("Log Out", null, new G.MainMenuHandler_init_closure11(), "Shortcut: Ctrl-Q");
      createAccountItem = G.MainMenuHandler_addItem("Create Account", null, new G.MainMenuHandler_init_closure12(), null);
      G.MainMenuHandler_addItem("Find a user", "paneuser", new G.MainMenuHandler_init_closure13(), null);
      G.MainMenuHandler_addItem("Collapse All", null, new G.MainMenuHandler_init_closure14(), "Shortcut: Ctrl-H");
      colorSelect = G.MainMenuHandler_addDropdown("Colors", $.$get$MainController_colorThemeNames(), colorThemeIndex);
      fontSelect = G.MainMenuHandler_addDropdown(" Fonts", $.$get$MainController_fontThemeNames(), fontThemeIndex);
      $.MainMenuHandler__loggedInOnlyItems = [profileItem, logoutItem];
      $.MainMenuHandler__loggedOutOnlyItems = [loginItem, createAccountItem];
      t1 = J.get$onChange$x(colorSelect);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new G.MainMenuHandler_init_closure15(colorSelect)), false), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = J.get$onChange$x(fontSelect);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new G.MainMenuHandler_init_closure16(fontSelect)), false), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    },
    MainMenuHandler_setVisibility: function(isLoggedIn) {
      var t1, t2, _i, t3;
      t1 = new G.MainMenuHandler_setVisibility_makevis();
      for (t2 = $.MainMenuHandler__loggedInOnlyItems, t2.length, _i = 0; _i < 2; ++_i)
        t1.call$2(t2[_i], isLoggedIn);
      for (t2 = $.MainMenuHandler__loggedOutOnlyItems, t2.length, t3 = !isLoggedIn, _i = 0; _i < 2; ++_i)
        t1.call$2(t2[_i], t3);
    },
    MainMenuHandler_addItem: function(s, iconName, handler, hover) {
      var t1, div, t2, link;
      t1 = document;
      div = t1.createElement("div");
      J.append$1$x($.MainMenuHandler__panel, div);
      t1 = iconName == null;
      if (!t1)
        J.insertAdjacentHtml$4$treeSanitizer$validator$x(div, "beforeend", '<img src="images/' + iconName + '.png" />', null, null);
      t2 = document;
      link = t2.createElement("button");
      link.textContent = s;
      if (t1) {
        t1 = link.style;
        t1.marginLeft = "26px";
      }
      div.appendChild(link);
      if (hover != null)
        link.title = hover;
      t1 = J.get$onClick$x(link);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new G.MainMenuHandler_addItem_closure(handler)), false), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      return link;
    },
    MainMenuHandler_addDropdown: function(title, values, selectedIndex) {
      var t1, dd, div;
      t1 = document;
      dd = t1.createElement("select");
      V.HtmlLib_addOptionElements(dd, values);
      if (selectedIndex >= 0)
        J.set$selectedIndex$x(dd, selectedIndex);
      t1 = document;
      div = t1.createElement("div");
      t1 = div.style;
      t1.display = "inline-block";
      div.appendChild(document.createTextNode(title));
      div.appendChild(document.createTextNode(": "));
      div.appendChild(dd);
      J.append$1$x($.MainMenuHandler__panel, div);
      return dd;
    },
    MainMenuHandler_init_closure: {
      "^": "Closure:4;",
      call$0: function() {
        return A.PaneFactory_createFromString("resourcetree");
      }
    },
    MainMenuHandler_init_closure0: {
      "^": "Closure:4;",
      call$0: function() {
        return A.PaneFactory_createFromString("resources");
      }
    },
    MainMenuHandler_init_closure1: {
      "^": "Closure:4;",
      call$0: function() {
        return A.PaneFactory_createFromString("projecttree");
      }
    },
    MainMenuHandler_init_closure2: {
      "^": "Closure:4;",
      call$0: function() {
        return A.PaneFactory_createFromString("projectsearch");
      }
    },
    MainMenuHandler_init_closure3: {
      "^": "Closure:4;",
      call$0: function() {
        return A.PaneFactory_createFromString("convsearch");
      }
    },
    MainMenuHandler_init_closure4: {
      "^": "Closure:4;",
      call$0: function() {
        return A.PaneFactory_createFromString("events");
      }
    },
    MainMenuHandler_init_closure5: {
      "^": "Closure:4;",
      call$0: function() {
        var t1 = new K.EventDialog(0, null, null, null, false, null, null, null);
        t1.DialogBox$0();
        return t1.show$0(0);
      }
    },
    MainMenuHandler_init_closure6: {
      "^": "Closure:4;",
      call$0: function() {
        return A.PaneFactory_createFromString("rootdocs");
      }
    },
    MainMenuHandler_init_closure7: {
      "^": "Closure:4;",
      call$0: function() {
        return A.PaneFactory_createFromString("proposals-active");
      }
    },
    MainMenuHandler_init_closure8: {
      "^": "Closure:4;year",
      call$0: function() {
        return A.PaneFactory_createFromString("proposals-sys/" + this.year);
      }
    },
    MainMenuHandler_init_closure9: {
      "^": "Closure:4;",
      call$0: function() {
        return L.MainController_toggleLogin();
      }
    },
    MainMenuHandler_init_closure10: {
      "^": "Closure:4;",
      call$0: function() {
        return A.PaneFactory_createFromString("user/" + H.S($.Globals_userId));
      }
    },
    MainMenuHandler_init_closure11: {
      "^": "Closure:4;",
      call$0: function() {
        return L.MainController_toggleLogin();
      }
    },
    MainMenuHandler_init_closure12: {
      "^": "Closure:4;",
      call$0: function() {
        var t1 = new Z.UserDialog(0, false, null, null, null);
        t1.DialogBox$0();
        t1.show$0(0);
      }
    },
    MainMenuHandler_init_closure13: {
      "^": "Closure:4;",
      call$0: function() {
        return A.PaneFactory_createFromString("users");
      }
    },
    MainMenuHandler_init_closure14: {
      "^": "Closure:4;",
      call$0: function() {
        return L.MainController_collapseAll();
      }
    },
    MainMenuHandler_init_closure15: {
      "^": "Closure:1;colorSelect",
      call$1: [function(e) {
        var t1, t2, code;
        t1 = $.$get$MainController_colorThemes();
        t2 = J.get$selectedIndex$x(this.colorSelect);
        if (t2 >>> 0 !== t2 || t2 >= 5)
          return H.ioore(t1, t2);
        code = t1[t2];
        $.$get$ClientStore__store().setItem("color-theme", code);
        L.MainController_applyThemes();
      }, null, null, 2, 0, null, 0, [], "call"]
    },
    MainMenuHandler_init_closure16: {
      "^": "Closure:1;fontSelect",
      call$1: [function(e) {
        var t1, t2, code;
        t1 = $.$get$MainController_fontThemes();
        t2 = J.get$selectedIndex$x(this.fontSelect);
        if (t2 >>> 0 !== t2 || t2 >= 4)
          return H.ioore(t1, t2);
        code = t1[t2];
        $.$get$ClientStore__store().setItem("font-theme", code);
        L.MainController_applyThemes();
      }, null, null, 2, 0, null, 0, [], "call"]
    },
    MainMenuHandler_setVisibility_makevis: {
      "^": "Closure:57;",
      call$2: function(e2, v2) {
        var styleDisplay, t1, assocIcon;
        styleDisplay = v2 ? "inline-block" : "none";
        t1 = J.getInterceptor$x(e2);
        J.set$display$x(t1.get$style(e2), styleDisplay);
        assocIcon = t1.get$previousElementSibling(e2);
        if (!!J.getInterceptor(assocIcon).$isImageElement) {
          t1 = assocIcon.style;
          t1.display = styleDisplay;
        }
      }
    },
    MainMenuHandler_addItem_closure: {
      "^": "Closure:1;handler",
      call$1: [function(e) {
        this.handler.call$0();
      }, null, null, 2, 0, null, 0, [], "call"]
    }
  }], ["", "../client/messages.dart",, F, {
    "^": "",
    Messages_showAPIError: function(r) {
      var t1, t2;
      if (r.get$isOK())
        return;
      t1 = r.get$errorMessage();
      if (t1 == null)
        t1 = J.get$errorCode$x(r);
      t2 = {life: 5000};
      self.jQuery.jGrowl(t1, t2);
    },
    Messages_checkLoggedIn: function() {
      if ($.Globals_nick != null)
        return true;
      var t1 = {life: 5000};
      self.jQuery.jGrowl("That option is only available if you are logged in.", t1);
      return false;
    },
    Messages_criticalMessage: function(s) {
      var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, dlg;
      var $async$Messages_criticalMessage = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              dlg = new L.ConfirmDialog(s, ["OK"], false, null, null, null);
              dlg.DialogBox$0();
              $async$goto = 2;
              return P._asyncHelper(dlg.show$0(0), $async$Messages_criticalMessage, $async$completer);
            case 2:
              // returning from await.
              // implicit return
              return P._asyncHelper(null, 0, $async$completer, null);
            case 1:
              // rethrow
              return P._asyncHelper($async$currentError, 1, $async$completer);
          }
      });
      return P._asyncHelper(null, $async$Messages_criticalMessage, $async$completer, null);
    }
  }], ["", "../client/dialog/node_select_dialog.dart",, K, {
    "^": "",
    NodeSelectDialog: {
      "^": "DialogBox;_topOptions,_showing,_continuation,_backdrop,frame",
      build$0: function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, t1, t2;
        var $async$build$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = {};
                t1.outline = null;
                O.FormBuilder$($async$self.frame, "Choose a category");
                t1.outline = new F.OutlineBuilder($async$self.frame, new K.NodeSelectDialog_build__nodeSelectHandler($async$self));
                t1 = new K.NodeSelectDialog_build_addToOutlineRecur(t1);
                for (t2 = J.get$iterator$ax($async$self._topOptions); t2.moveNext$0();)
                  t1.call$3(null, t2.__interceptors$_current, 0);
                M.ButtonBarBuilder$($async$self.frame, null).addButton$2("Cancel", new K.NodeSelectDialog_build_closure($async$self));
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$build$0, $async$completer, null);
      }
    },
    NodeSelectDialog_build__nodeSelectHandler: {
      "^": "Closure:10;$this",
      call$1: function(node) {
        node.toString;
        this.$this.hide$1(H.Primitives_parseInt(node.getAttribute("data-" + new W._DataAttributeMap(new W._ElementAttributeMap(node))._toHyphenedName$1("id")), null, null));
      }
    },
    NodeSelectDialog_build_addToOutlineRecur: {
      "^": "Closure:36;_box_0",
      call$3: function(parentElement, node, level) {
        var t1, el, t2;
        t1 = J.getInterceptor$x(node);
        el = this._box_0.outline.add$4$childrenCollapsed(0, parentElement, t1.get$title(node), J.toString$0$(t1.get$id(node)), level > 1);
        if (t1.get$children(node) != null)
          for (t1 = J.get$iterator$ax(t1.get$children(node)), t2 = level + 1; t1.moveNext$0();)
            this.call$3(el, t1.get$current(), t2);
      }
    },
    NodeSelectDialog_build_closure: {
      "^": "Closure:1;$this",
      call$1: function(e) {
        this.$this.hide$1(null);
      }
    }
  }], ["", "../client/pane/notify_pane.dart",, G, {
    "^": "",
    NotifyPane: {
      "^": "BasePane;_item,_isCollapsed,paneKey,borderId,borderElement,bodyId,bodyElement,paneMenuBar,onCollapse,onChanePaneKey",
      init$1: function(pk) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, t1, notifyId, t2, chk, link;
        var $async$init$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return P._asyncHelper($async$self.super$BasePane$init(pk), $async$init$1, $async$completer);
              case 3:
                // returning from await.
                t1 = pk._keyParts;
                notifyId = t1.length >= 2 ? t1[1] : null;
                t1 = $.$get$Globals_pushQueue();
                t1 = (t1 && C.JSArray_methods).firstWhere$2$orElse(t1, new G.NotifyPane_init_closure(notifyId), new G.NotifyPane_init_closure0());
                $async$self._item = t1;
                if (t1 == null) {
                  // goto return
                  $async$goto = 1;
                  break;
                }
                $async$self.buildSkeletonHtml2$4$iconHoverText$iconName$paneClass$title("Notification", "panenotify", "notify", J.get$text$x(t1));
                t1 = $async$self.bodyElement;
                t1.textContent = "";
                t2 = document;
                t2 = t2.createElement("div");
                t2.textContent = J.get$text$x($async$self._item);
                t1.appendChild(t2);
                t2 = $async$self.bodyElement;
                t1 = document;
                t2.appendChild(t1.createElement("br"));
                chk = W.InputElement_InputElement("checkbox");
                $async$self.bodyElement.appendChild(chk);
                t1 = $async$self.bodyElement;
                t1.toString;
                t1.appendChild(document.createTextNode(" Dismiss "));
                t1 = $async$self._item.get$linkPaneKey();
                if (J.$gt$n(J.get$length$asx(t1 == null ? "" : t1), 0)) {
                  t1 = $async$self.bodyElement;
                  t1.toString;
                  t1.appendChild(document.createTextNode(" - "));
                  link = W.AnchorElement_AnchorElement(null);
                  J.set$href$x(link, C.JSString_methods.$add("#", $async$self._item.get$linkPaneKey()));
                  link.textContent = $async$self._item.get$linkText();
                  $async$self.bodyElement.appendChild(link);
                }
                t1 = J.get$onClick$x(chk);
                H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new G.NotifyPane_init_closure1($async$self, chk)), false), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$init$1, $async$completer, null);
      }
    },
    NotifyPane_init_closure: {
      "^": "Closure:1;notifyId",
      call$1: function(i) {
        return J.$eq$(i.get$sid(), this.notifyId) && J.$eq$(J.get$kind$x(i), "N");
      }
    },
    NotifyPane_init_closure0: {
      "^": "Closure:4;",
      call$0: function() {
        return;
      }
    },
    NotifyPane_init_closure1: {
      "^": "Closure:1;$this,chk",
      call$1: [function(e) {
        var t1, req;
        t1 = this.chk;
        J.set$disabled$x(t1, true);
        P.Timer_Timer(P.Duration$(0, 0, 0, 300, 0, 0), new G.NotifyPane_init__closure(t1));
        req = new X.UserNotifySaveRequest(null, null);
        req.notifyId = this.$this._item.get$sid();
        L.RpcLib_command("UserNotifySave", req);
      }, null, null, 2, 0, null, 0, [], "call"]
    },
    NotifyPane_init__closure: {
      "^": "Closure:4;chk",
      call$0: function() {
        return J.remove$0$ax(this.chk);
      }
    }
  }], ["", "../client/lib/outline_builder.dart",, F, {
    "^": "",
    OutlineBuilder: {
      "^": "Object;_outline_builder$_parent,_selectHandler",
      add$4$childrenCollapsed: function(_, parentNode, text, id, childrenCollapsed) {
        var t1, node, addTo, t2, expander, textSpan, childBox, parentIcon;
        t1 = document;
        node = t1.createElement("div");
        node.className = "outline-node";
        node.setAttribute("data-" + new W._DataAttributeMap(new W._ElementAttributeMap(node))._toHyphenedName$1("id"), id);
        addTo = this._outline_builder$_parent;
        t1 = parentNode != null;
        (t1 ? parentNode.querySelector(".outline-childbox") : addTo).appendChild(node);
        t2 = document;
        expander = t2.createElement("div");
        expander.className = "outline-icon outline-icon-leaf";
        node.appendChild(expander);
        t2 = document;
        textSpan = t2.createElement("span");
        textSpan.textContent = text;
        textSpan.className = "outline-text";
        node.appendChild(textSpan);
        t2 = document;
        childBox = t2.createElement("div");
        childBox.className = "outline-childbox";
        if (childrenCollapsed) {
          t2 = childBox.style;
          t2.display = "none";
        }
        node.appendChild(childBox);
        if (t1) {
          parentIcon = parentNode.querySelector(".outline-icon");
          t1 = J.getInterceptor$x(parentIcon);
          if (t1.get$classes(parentIcon).contains$1(0, "outline-icon-leaf")) {
            t1.get$classes(parentIcon).remove$1(0, "outline-icon-leaf");
            t1.get$classes(parentIcon).add$1(0, "outline-icon-branch");
          }
        }
        t1 = J.get$onClick$x(textSpan);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new F.OutlineBuilder_add_closure(this, node, textSpan, childBox)), false), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
        t1 = J.get$onClick$x(expander);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new F.OutlineBuilder_add_closure0(childBox)), false), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
        return node;
      }
    },
    OutlineBuilder_add_closure: {
      "^": "Closure:1;$this,node,textSpan,childBox",
      call$1: [function(e) {
        var t1, t2, t3;
        t1 = this.textSpan;
        t2 = J.getInterceptor$x(t1);
        if (t2.get$classes(t1).contains$1(0, "selected"))
          return;
        t3 = this.$this;
        W._MultiElementCssClassSet__MultiElementCssClassSet(H.setRuntimeTypeInfo(new W._FrozenElementList(t3._outline_builder$_parent.querySelectorAll(".outline-text.selected")), [null])).remove$1(0, "selected");
        t2.get$classes(t1).add$1(0, "selected");
        t1 = this.childBox.style;
        t1.display = "block";
        t1 = J.getInterceptor$x(e);
        t1.preventDefault$0(e);
        t1.stopPropagation$0(e);
        t3._selectHandler.call$1(this.node);
      }, null, null, 2, 0, null, 0, [], "call"]
    },
    OutlineBuilder_add_closure0: {
      "^": "Closure:1;childBox",
      call$1: [function(e) {
        var t1, t2;
        t1 = this.childBox.style;
        t2 = t1.display !== "none" ? "none" : "block";
        t1.display = t2;
        t1 = J.getInterceptor$x(e);
        t1.preventDefault$0(e);
        t1.stopPropagation$0(e);
      }, null, null, 2, 0, null, 0, [], "call"]
    }
  }], ["", "../client/pane_factory.dart",, A, {
    "^": "",
    PaneFactory_createFromString: function(pkfull) {
      var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError;
      var $async$PaneFactory_createFromString = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncHelper(A.PaneFactory_create(Z.PaneKey$(pkfull), true), $async$PaneFactory_createFromString, $async$completer);
            case 3:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncHelper($async$returnValue, 0, $async$completer, null);
            case 2:
              // rethrow
              return P._asyncHelper($async$currentError, 1, $async$completer);
          }
      });
      return P._asyncHelper(null, $async$PaneFactory_createFromString, $async$completer, null);
    },
    PaneFactory_create: function(pk, doScroll) {
      var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, main1, t1, t2, t3, isReopeningLastPane, existingSamePane, numExpanded, t4, _i, p, t5, paneType, t6, item;
      var $async$PaneFactory_create = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $.Globals_lastActivityUtc = new P.DateTime(Date.now(), false).toUtc$0();
              L.MainController_doOnUserAction();
              main1 = document.querySelector("#main1");
              t1 = C.JSNumber_methods.round$0(main1.scrollHeight);
              t2 = main1.clientHeight;
              if (typeof t2 !== "number") {
                $async$returnValue = H.iae(t2);
                // goto return
                $async$goto = 1;
                break;
              }
              t3 = $.$get$Globals_panes();
              isReopeningLastPane = t3.length > 0 && J.$eq$(J.get$last$ax(t3).get$paneKey()._key, pk._key);
              L.MainController_sizeScrollSpace(true);
              existingSamePane = J.firstWhere$2$orElse$ax($.$get$Globals_panes(), new A.PaneFactory_create_closure(pk), new A.PaneFactory_create_closure0());
              if (existingSamePane != null)
                A.PaneFactory_delete(existingSamePane);
              for (; t3 = $.$get$Globals_panes(), t3.length > 5000;)
                A.PaneFactory_delete(t3[0]);
              t3.toString;
              t3 = H.setRuntimeTypeInfo(new H.WhereIterable(t3, new A.PaneFactory_create_closure1()), [H.getTypeArgumentByIndex(t3, 0)]);
              numExpanded = t3.get$length(t3);
              for (t3 = $.$get$Globals_panes(), t4 = t3.length, _i = 0; _i < t3.length; t3.length === t4 || (0, H.throwConcurrentModificationError)(t3), ++_i) {
                p = t3[_i];
                if (numExpanded <= 10)
                  break;
                t5 = J.getInterceptor$x(p);
                if (t5.get$isCollapsed(p) !== true) {
                  t5.collapse$0(p);
                  --numExpanded;
                }
              }
              if ($.Globals_isLargeScreen !== true)
                L.MainController_hideMenuPanels();
              t3 = pk._keyParts;
              if (0 >= t3.length) {
                $async$returnValue = H.ioore(t3, 0);
                // goto return
                $async$goto = 1;
                break;
              }
              paneType = t3[0];
              t3 = J.getInterceptor(paneType);
              if (t3.$eq(paneType, "notify")) {
                t3 = $.HtmlLib__maxid + 1;
                $.HtmlLib__maxid = t3;
                t3 = "e" + C.JSInt_methods.toString$0(t3);
                t4 = $.HtmlLib__maxid + 1;
                $.HtmlLib__maxid = t4;
                p = new G.NotifyPane(null, false, null, t3, null, "e" + C.JSInt_methods.toString$0(t4), null, null, null, null);
              } else if (t3.$eq(paneType, "projecttree")) {
                t3 = $.HtmlLib__maxid + 1;
                $.HtmlLib__maxid = t3;
                t3 = "e" + C.JSInt_methods.toString$0(t3);
                t4 = $.HtmlLib__maxid + 1;
                $.HtmlLib__maxid = t4;
                p = new X.ProjectTreePane(0, null, null, null, null, null, null, null, null, null, null, false, null, t3, null, "e" + C.JSInt_methods.toString$0(t4), null, null, null, null);
              } else if (t3.$eq(paneType, "projectsearch")) {
                t3 = $.HtmlLib__maxid + 1;
                $.HtmlLib__maxid = t3;
                t3 = "e" + C.JSInt_methods.toString$0(t3);
                t4 = $.HtmlLib__maxid + 1;
                $.HtmlLib__maxid = t4;
                p = new F.ProjectSearchPane(null, false, null, t3, null, "e" + C.JSInt_methods.toString$0(t4), null, null, null, null);
              } else if (t3.$eq(paneType, "project")) {
                t3 = $.HtmlLib__maxid + 1;
                $.HtmlLib__maxid = t3;
                t3 = "e" + C.JSInt_methods.toString$0(t3);
                t4 = $.HtmlLib__maxid + 1;
                $.HtmlLib__maxid = t4;
                p = new X.ProjectPane(null, null, false, null, t3, null, "e" + C.JSInt_methods.toString$0(t4), null, null, null, null);
              } else if (t3.$eq(paneType, "project-members")) {
                t3 = $.HtmlLib__maxid + 1;
                $.HtmlLib__maxid = t3;
                t3 = "e" + C.JSInt_methods.toString$0(t3);
                t4 = $.HtmlLib__maxid + 1;
                $.HtmlLib__maxid = t4;
                p = new U.ProjectMembersPane(null, null, null, null, 0, false, null, t3, null, "e" + C.JSInt_methods.toString$0(t4), null, null, null, null);
              } else if (t3.$eq(paneType, "convsearch")) {
                t3 = $.HtmlLib__maxid + 1;
                $.HtmlLib__maxid = t3;
                t3 = "e" + C.JSInt_methods.toString$0(t3);
                t4 = $.HtmlLib__maxid + 1;
                $.HtmlLib__maxid = t4;
                p = new T.ConvSearchPane(null, null, false, null, t3, null, "e" + C.JSInt_methods.toString$0(t4), null, null, null, null);
              } else if (t3.$eq(paneType, "conv")) {
                t3 = document;
                t3 = t3.createElement("div");
                t4 = H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [X.ConvGetPostItem, W.Element]);
                t5 = $.HtmlLib__maxid + 1;
                $.HtmlLib__maxid = t5;
                t5 = "e" + C.JSInt_methods.toString$0(t5);
                t6 = $.HtmlLib__maxid + 1;
                $.HtmlLib__maxid = t6;
                p = new R.ConvPane(null, null, null, false, false, t3, null, null, null, t4, null, false, null, t5, null, "e" + C.JSInt_methods.toString$0(t6), null, null, null, null);
              } else if (t3.$eq(paneType, "rootdocs")) {
                t3 = $.HtmlLib__maxid + 1;
                $.HtmlLib__maxid = t3;
                t3 = "e" + C.JSInt_methods.toString$0(t3);
                t4 = $.HtmlLib__maxid + 1;
                $.HtmlLib__maxid = t4;
                p = new E.RootDocsPane(false, null, t3, null, "e" + C.JSInt_methods.toString$0(t4), null, null, null, null);
              } else if (t3.$eq(paneType, "doc")) {
                t3 = $.HtmlLib__maxid + 1;
                $.HtmlLib__maxid = t3;
                t3 = "e" + C.JSInt_methods.toString$0(t3);
                t4 = $.HtmlLib__maxid + 1;
                $.HtmlLib__maxid = t4;
                p = new Q.DocPane(null, null, false, null, t3, null, "e" + C.JSInt_methods.toString$0(t4), null, null, null, null);
              } else if (t3.$eq(paneType, "resourcetree")) {
                t3 = $.HtmlLib__maxid + 1;
                $.HtmlLib__maxid = t3;
                t3 = "e" + C.JSInt_methods.toString$0(t3);
                t4 = $.HtmlLib__maxid + 1;
                $.HtmlLib__maxid = t4;
                p = new T.ResourceTreePane(0, null, null, null, null, null, null, null, null, null, null, false, null, t3, null, "e" + C.JSInt_methods.toString$0(t4), null, null, null, null);
              } else if (t3.$eq(paneType, "resources")) {
                t3 = $.HtmlLib__maxid + 1;
                $.HtmlLib__maxid = t3;
                t3 = "e" + C.JSInt_methods.toString$0(t3);
                t4 = $.HtmlLib__maxid + 1;
                $.HtmlLib__maxid = t4;
                p = new T.ResourceSearchPane(null, false, null, t3, null, "e" + C.JSInt_methods.toString$0(t4), null, null, null, null);
              } else if (t3.$eq(paneType, "resource")) {
                t3 = $.HtmlLib__maxid + 1;
                $.HtmlLib__maxid = t3;
                t3 = "e" + C.JSInt_methods.toString$0(t3);
                t4 = $.HtmlLib__maxid + 1;
                $.HtmlLib__maxid = t4;
                p = new E.ResourcePane(null, false, false, null, t3, null, "e" + C.JSInt_methods.toString$0(t4), null, null, null, null);
              } else if (t3.$eq(paneType, "users")) {
                t3 = $.HtmlLib__maxid + 1;
                $.HtmlLib__maxid = t3;
                t3 = "e" + C.JSInt_methods.toString$0(t3);
                t4 = $.HtmlLib__maxid + 1;
                $.HtmlLib__maxid = t4;
                p = new G.UserSearchPane(null, false, null, t3, null, "e" + C.JSInt_methods.toString$0(t4), null, null, null, null);
              } else if (t3.$eq(paneType, "user")) {
                t3 = $.HtmlLib__maxid + 1;
                $.HtmlLib__maxid = t3;
                t3 = "e" + C.JSInt_methods.toString$0(t3);
                t4 = $.HtmlLib__maxid + 1;
                $.HtmlLib__maxid = t4;
                p = new T.UserPane(null, false, false, null, t3, null, "e" + C.JSInt_methods.toString$0(t4), null, null, null, null);
              } else if (t3.$eq(paneType, "proposals-active")) {
                t3 = $.HtmlLib__maxid + 1;
                $.HtmlLib__maxid = t3;
                t3 = "e" + C.JSInt_methods.toString$0(t3);
                t4 = $.HtmlLib__maxid + 1;
                $.HtmlLib__maxid = t4;
                p = new U.ActiveProposalListPane(null, null, null, false, null, t3, null, "e" + C.JSInt_methods.toString$0(t4), null, null, null, null);
              } else if (t3.$eq(paneType, "proposals-sys")) {
                t3 = $.HtmlLib__maxid + 1;
                $.HtmlLib__maxid = t3;
                t3 = "e" + C.JSInt_methods.toString$0(t3);
                t4 = $.HtmlLib__maxid + 1;
                $.HtmlLib__maxid = t4;
                p = new F.SysProposalListPane(null, null, null, null, false, null, t3, null, "e" + C.JSInt_methods.toString$0(t4), null, null, null, null);
              } else if (t3.$eq(paneType, "proposal")) {
                t3 = $.HtmlLib__maxid + 1;
                $.HtmlLib__maxid = t3;
                t3 = "e" + C.JSInt_methods.toString$0(t3);
                t4 = $.HtmlLib__maxid + 1;
                $.HtmlLib__maxid = t4;
                p = new K.ProposalPane(null, false, false, null, t3, null, "e" + C.JSInt_methods.toString$0(t4), null, null, null, null);
              } else if (t3.$eq(paneType, "events")) {
                t3 = $.HtmlLib__maxid + 1;
                $.HtmlLib__maxid = t3;
                t3 = "e" + C.JSInt_methods.toString$0(t3);
                t4 = $.HtmlLib__maxid + 1;
                $.HtmlLib__maxid = t4;
                p = new T.EventSearchPane(null, false, false, null, t3, null, "e" + C.JSInt_methods.toString$0(t4), null, null, null, null);
              } else if (t3.$eq(paneType, "event")) {
                t3 = $.HtmlLib__maxid + 1;
                $.HtmlLib__maxid = t3;
                t3 = "e" + C.JSInt_methods.toString$0(t3);
                t4 = $.HtmlLib__maxid + 1;
                $.HtmlLib__maxid = t4;
                p = new F.EventPane(null, false, null, t3, null, "e" + C.JSInt_methods.toString$0(t4), null, null, null, null);
              } else
                p = null;
              if (p == null) {
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = 3;
              return P._asyncHelper(p.init$1(pk), $async$PaneFactory_create, $async$completer);
            case 3:
              // returning from await.
              $.$get$Globals_panes().push(p);
              L.MainController_changeUrlFragment(pk._key);
              p.onCollapse = new A.PaneFactory_create_closure2();
              p.onChanePaneKey = new A.PaneFactory_create_closure3();
              item = new X.PushQueueItem(null, null, null, null, null, null, null);
              t3 = p.paneKey._key;
              item.linkPaneKey = t3;
              if (!!p.$isNotifyPane) {
                item.sid = J.substring$1$s(t3, 7);
                T.PushQueueHandler__removeNotifyItem(item, true);
              } else
                T.PushQueueHandler__removeItem(item, true);
              if (doScroll && !isReopeningLastPane) {
                t3 = new L.ElementAnimation(P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeEmpty(), main1, false, 500, null, null, 0, false, false, C.Easing_9, P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null));
                t3.toProperties = P.LinkedHashMap__makeLiteral(["scrollTop", t1 - t2 + 100 + 30]);
                t3.run$0(0);
              }
              L.MainController_sizeScrollSpace(false);
              $async$returnValue = p;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncHelper($async$returnValue, 0, $async$completer, null);
            case 2:
              // rethrow
              return P._asyncHelper($async$currentError, 1, $async$completer);
          }
      });
      return P._asyncHelper(null, $async$PaneFactory_create, $async$completer, null);
    },
    PaneFactory_delete: function(p) {
      var t1, t2, exception, lastPane;
      try {
        J.collapse$0$x(p);
        t1 = p.get$borderElement();
        t2 = t1.parentNode;
        if (t2 != null)
          t2.removeChild(t1);
        t1 = $.$get$Globals_panes();
        (t1 && C.JSArray_methods).remove$1(t1, p);
      } catch (exception) {
        H.unwrapException(exception);
      }
      t1 = $.$get$Globals_panes();
      if (t1.length > 0) {
        lastPane = (t1 && C.JSArray_methods).get$last(t1);
        if (J.get$isCollapsed$x(lastPane) !== true)
          L.MainController_changeUrlFragment(lastPane.get$paneKey()._key);
      }
    },
    PaneFactory_create_closure: {
      "^": "Closure:1;pk",
      call$1: function(p) {
        return p.get$paneKey().isLike$1(this.pk);
      }
    },
    PaneFactory_create_closure0: {
      "^": "Closure:4;",
      call$0: function() {
        return;
      }
    },
    PaneFactory_create_closure1: {
      "^": "Closure:1;",
      call$1: function(p) {
        return J.get$isCollapsed$x(p) !== true;
      }
    },
    PaneFactory_create_closure2: {
      "^": "Closure:1;",
      call$1: function(p2) {
        var t1 = $.$get$Globals_panes();
        if (J.get$isCollapsed$x((t1 && C.JSArray_methods).get$last(t1)) === true)
          L.MainController_changeUrlFragment("");
      }
    },
    PaneFactory_create_closure3: {
      "^": "Closure:1;",
      call$1: function(p2) {
        var t1 = $.$get$Globals_panes();
        if (J.$eq$((t1 && C.JSArray_methods).get$last(t1), p2))
          L.MainController_changeUrlFragment(p2.paneKey._key);
      }
    }
  }], ["", "../client/root/pane_key.dart",, Z, {
    "^": "",
    PaneKey: {
      "^": "Object;_keyParts,_key",
      get$length: function(_) {
        return this._keyParts.length;
      },
      isLike$1: function(k2) {
        var t1, t2;
        t1 = this._keyParts;
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        t1 = t1[0];
        t2 = k2._keyParts;
        if (0 >= t2.length)
          return H.ioore(t2, 0);
        if (!J.$eq$(t1, t2[0]))
          return false;
        t1 = this._keyParts;
        t2 = t1.length;
        if (t2 === 1)
          return true;
        if (1 >= t2)
          return H.ioore(t1, 1);
        t1 = t1[1];
        t2 = k2._keyParts;
        if (1 >= t2.length)
          return H.ioore(t2, 1);
        if (!J.$eq$(t1, t2[1]))
          return false;
        return true;
      },
      PaneKey$1: function(k) {
        var t1;
        this._key = k;
        t1 = J.split$1$s(k, "/");
        this._keyParts = t1;
        if (t1.length < 1)
          throw H.wrapException(P.Exception_Exception(C.JSString_methods.$add("Invalid pane key ", k)));
      },
      static: {
        PaneKey$: function(k) {
          var t1 = new Z.PaneKey(null, null);
          t1.PaneKey$1(k);
          return t1;
        }
      }
    }
  }], ["", "../client/lib/primitive_datetime.dart",, B, {
    "^": "",
    PrimitiveDateTime: {
      "^": "Object;monthAbbrevs,parentDiv,_year,_month,_day,_time",
      render$1: function(value) {
        var thisYear, year, t1, t2, t3, month, t4, day, hour, t5, minute, t6;
        thisYear = H.Primitives_getYear(new P.DateTime(Date.now(), false));
        for (year = thisYear - 4, t1 = thisYear + 5, t2 = this._year; year < t1; ++year) {
          t3 = W.OptionElement_OptionElement$_("", "", null, false);
          t3.value = C.JSInt_methods.toString$0(year);
          t3.textContent = C.JSInt_methods.toString$0(year);
          t2.appendChild(t3);
        }
        for (t1 = this._month, t3 = this.monthAbbrevs, month = 1; month <= 12; ++month) {
          t4 = W.OptionElement_OptionElement$_("", "", null, false);
          t4.value = C.JSInt_methods.toString$0(month);
          t4.textContent = "" + month + " - " + t3[month - 1];
          t1.appendChild(t4);
        }
        for (t3 = this._day, day = 1; day <= 31; ++day) {
          t4 = W.OptionElement_OptionElement$_("", "", null, false);
          t4.value = C.JSInt_methods.toString$0(day);
          t4.textContent = C.JSInt_methods.toString$0(day);
          t3.appendChild(t4);
        }
        for (t4 = this._time, hour = 0; hour < 24; ++hour)
          for (t5 = hour * 60, minute = 0; minute <= 45; minute += 15) {
            t6 = W.OptionElement_OptionElement$_("", "", null, false);
            t6.value = C.JSInt_methods.toString$0(t5 + minute);
            t6.textContent = "" + hour + ":" + C.JSString_methods.padLeft$2(C.JSInt_methods.toString$0(minute), 2, "0");
            t4.appendChild(t6);
          }
        t5 = this.parentDiv;
        t5.appendChild(t2);
        t5.appendChild(document.createTextNode(" - "));
        t5.appendChild(t1);
        t5.appendChild(document.createTextNode(" - "));
        t5.appendChild(t3);
        t5.appendChild(document.createTextNode(" at "));
        t5.appendChild(t4);
        J.set$value$x(t2, C.JSInt_methods.toString$0(H.Primitives_getYear(value)));
        J.set$value$x(t1, C.JSInt_methods.toString$0(H.Primitives_getMonth(value)));
        J.set$value$x(t3, C.JSInt_methods.toString$0(H.Primitives_getDay(value)));
        J.set$value$x(t4, C.JSInt_methods.toString$0(H.Primitives_getHours(value) * 60 + H.Primitives_getMinutes(value) - C.JSInt_methods.$mod(H.Primitives_getMinutes(value), 15)));
      }
    }
  }], ["", "../client/dialog/project_dialog.dart",, E, {
    "^": "",
    ProjectDialog: {
      "^": "DialogBox;_project_dialog$_projectId,_categoryId,project,_showing,_continuation,_backdrop,frame",
      build$0: function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, t1, t2, form, titleInput, descrInput, privacyInput, leadershipDiv, radioDemocratic, radioFixed, bar, $async$temp1;
        var $async$build$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self._project_dialog$_projectId;
                $async$goto = J.$eq$(t1, 0) ? 2 : 4;
                break;
              case 2:
                // then
                t1 = new X.ProjectGetResponse(new X.APIResponseBase(null, null, "Y", null), null, null, null, null, null, null, null, null, null, null);
                t1.leadership = "D";
                $async$self.project = t1;
                // goto join
                $async$goto = 3;
                break;
              case 4:
                // else
                t2 = new X.ProjectGetRequest(null, null);
                t2.projectId = t1;
                $async$temp1 = $async$self;
                $async$goto = 5;
                return P._asyncHelper(L.RpcLib_projectGet(t2), $async$build$0, $async$completer);
              case 5:
                // returning from await.
                $async$temp1.project = $async$result;
              case 3:
                // join
                form = O.FormBuilder$($async$self.frame, "Project");
                titleInput = form.addInput$4("Title", 400, 500, J.get$title$x($async$self.project));
                descrInput = form.addTextArea$5("Description", 400, 130, 10000, J.get$description$x($async$self.project));
                t1 = document;
                privacyInput = t1.createElement("select");
                $.$get$Globals_allProjectPrivacy().forEach$1(0, new E.ProjectDialog_build_closure(privacyInput));
                J.set$value$x(privacyInput, $async$self.project.get$privacy());
                form.addAny$2("Privacy", privacyInput);
                t1 = document;
                leadershipDiv = t1.createElement("div");
                radioDemocratic = W.InputElement_InputElement("radio");
                t1 = J.getInterceptor$x(radioDemocratic);
                t1.set$name(radioDemocratic, "leadermode");
                t1.set$checked(radioDemocratic, J.$eq$($async$self.project.get$leadership(), "D"));
                radioFixed = W.InputElement_InputElement("radio");
                t1 = J.getInterceptor$x(radioFixed);
                t1.set$name(radioFixed, "leadermode");
                t1.set$checked(radioFixed, J.$eq$($async$self.project.get$leadership(), "F"));
                leadershipDiv.appendChild(radioDemocratic);
                leadershipDiv.appendChild(document.createTextNode("Democratic - leadership changes over time by vote"));
                t1 = J.getInterceptor$x(leadershipDiv);
                t1.insertAdjacentHtml$4$treeSanitizer$validator(leadershipDiv, "beforeend", "<br/>", null, null);
                leadershipDiv.appendChild(radioFixed);
                leadershipDiv.appendChild(document.createTextNode("Fixed - leadership remains with those who create the project"));
                t1.insertAdjacentHtml$4$treeSanitizer$validator(leadershipDiv, "beforeend", "<br/>Note that once a project is democratic, it cannot go back to being fixed.", null, null);
                form.addAny$2("Leadership", leadershipDiv);
                bar = M.ButtonBarBuilder$($async$self.frame, null);
                bar.addButton$2("Save", new E.ProjectDialog_build_closure0($async$self, titleInput, descrInput, privacyInput, radioFixed));
                bar.addButton$2("Cancel", new E.ProjectDialog_build_closure1($async$self));
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$build$0, $async$completer, null);
      }
    },
    ProjectDialog_build_closure: {
      "^": "Closure:9;privacyInput",
      call$2: function(value, text) {
        var t1 = W.OptionElement_OptionElement$_("", "", null, false);
        t1.value = value;
        t1.textContent = text;
        this.privacyInput.appendChild(t1);
      }
    },
    ProjectDialog_build_closure0: {
      "^": "Closure:6;$this,titleInput,descrInput,privacyInput,radioFixed",
      call$1: function(e) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, leadershipCode, req, t1, t2;
        var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                leadershipCode = J.get$checked$x($async$self.radioFixed) === true ? "F" : "D";
                req = new X.ProjectSaveRequest(null, null, null, null, null, null, null);
                t1 = $async$self.$this;
                t2 = t1._project_dialog$_projectId;
                req.projectId = t2;
                req.title = J.trim$0$s(J.get$value$x($async$self.titleInput));
                req.description = J.trim$0$s(J.get$value$x($async$self.descrInput));
                req.privacy = J.get$value$x($async$self.privacyInput);
                req.leadership = leadershipCode;
                req.categoryId = t1._categoryId;
                $async$goto = 2;
                return P._asyncHelper(L.RpcLib_command("ProjectSave", req), $async$call$1, $async$completer);
              case 2:
                // returning from await.
                if ($async$result.get$isOK()) {
                  t1.hide$1(true);
                  if (J.$eq$(t2, 0)) {
                    t1 = {life: 5000};
                    self.jQuery.jGrowl("Project will be reviewed for spam, then posted later.", t1);
                  }
                }
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$call$1, $async$completer, null);
      }
    },
    ProjectDialog_build_closure1: {
      "^": "Closure:1;$this",
      call$1: function(e) {
        this.$this.hide$1(false);
      }
    }
  }], ["", "../client/pane/project_members_pane.dart",, U, {
    "^": "",
    ProjectMembersPane: {
      "^": "BasePane;_resultTable,_project_members_pane$_projectId,_project,_filteredUsers,_pageNo,_isCollapsed,paneKey,borderId,borderElement,bodyId,bodyElement,paneMenuBar,onCollapse,onChanePaneKey",
      init$1: function(pk) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, t1, $scroll, t2, t3, nameInp;
        var $async$init$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return P._asyncHelper($async$self.super$BasePane$init(pk), $async$init$1, $async$completer);
              case 3:
                // returning from await.
                t1 = pk._keyParts;
                if (1 >= t1.length) {
                  $async$returnValue = H.ioore(t1, 1);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                $async$self._project_members_pane$_projectId = H.Primitives_parseInt(t1[1], null, null);
                $async$goto = 4;
                return P._asyncHelper($async$self._loadProject$1(null), $async$init$1, $async$completer);
              case 4:
                // returning from await.
                $async$self.buildSkeletonHtml2$4$iconHoverText$iconName$paneClass$title("Project Members", "paneproject", "project-members", $async$self._project.get$projectTitle());
                t1 = $async$self.bodyElement;
                t1.textContent = "";
                $scroll = V.HtmlLib_appendScrollingDiv(t1, 200);
                t1 = document;
                t1 = t1.createElement("table");
                t1.className = "datatable";
                t2 = t1.style;
                t3 = C.JSInt_methods.toString$0(6) + "px";
                t2.marginBottom = t3;
                $async$self._resultTable = t1;
                $scroll.appendChild(t1);
                nameInp = O.FormBuilder$($async$self.bodyElement, "Criteria").addInput$3("Filter by name", 100, 50);
                $async$self.paneMenuBar.addButton$2("Search", new U.ProjectMembersPane_init_closure($async$self, nameInp));
                if (!J.$eq$($async$self._project.get$completeLoad(), "Y"))
                  $async$self.paneMenuBar.addButton$2("Next Page", new U.ProjectMembersPane_init_closure0($async$self, nameInp));
                $async$self._buildOutputTable$0();
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$init$1, $async$completer, null);
      },
      _project_members_pane$_doSearch$1: function($name) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, t1, t2;
        var $async$_project_members_pane$_doSearch$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = {};
                t1.name = $name;
                $name = $name.toLowerCase();
                t1.name = $name;
                J.set$innerHtml$x($async$self._resultTable, "<tr><td>Loading...</td></tr>");
                t2 = $async$self._project;
                $async$goto = t2 != null && J.$eq$(t2.get$completeLoad(), "Y") ? 2 : 4;
                break;
              case 2:
                // then
                $async$self._filteredUsers = J.where$1$ax($async$self._project.get$users(), new U.ProjectMembersPane__doSearch_closure(t1)).toList$0(0);
                // goto join
                $async$goto = 3;
                break;
              case 4:
                // else
                $async$self._pageNo = 0;
                $async$goto = 5;
                return P._asyncHelper($async$self._loadProject$1($name), $async$_project_members_pane$_doSearch$1, $async$completer);
              case 5:
                // returning from await.
              case 3:
                // join
                $async$self._buildOutputTable$0();
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$_project_members_pane$_doSearch$1, $async$completer, null);
      },
      _buildOutputTable$0: function() {
        var t1, user, tr, t2, td, t3, chk, t4, e;
        J.set$innerHtml$x(this._resultTable, "<tr><th>Type</th><th></th><th>Vote</th><th>Nickname (name)</th></tr>");
        for (t1 = J.get$iterator$ax(this._filteredUsers); t1.moveNext$0();) {
          user = t1.get$current();
          tr = J.addRow$0$x(this._resultTable);
          t2 = J.getInterceptor$x(tr);
          td = t2.addCell$0(tr);
          t3 = td.style;
          t3.textAlign = "right";
          td.appendChild(this._userKindImage$1(user));
          J.insertAdjacentHtml$4$treeSanitizer$validator$x(td, "beforeend", "<br/>", null, null);
          td.appendChild(this._userKindDropdown$1(user));
          td = t2.addCell$0(tr);
          td.className = "avatar";
          if (user.get$avatarUrl() != null)
            td.appendChild(W.ImageElement_ImageElement(null, user.get$avatarUrl(), null));
          td = t2.addCell$0(tr);
          chk = this._voteCheckbox$1(user);
          if (chk != null)
            td.appendChild(chk);
          td = t2.addCell$0(tr);
          t2 = user.get$nick();
          t3 = "user/" + H.S(user.get$userId());
          t4 = document;
          e = t4.createElement("a");
          J.set$href$x(e, "#" + t3);
          e.textContent = t2;
          td.appendChild(e);
          if (user.get$publicName() != null && J.$gt$n(J.get$length$asx(user.get$publicName()), 0)) {
            t2 = " - " + H.S(user.get$publicName());
            td.appendChild(document.createTextNode(t2));
          }
        }
      },
      _userKindImage$1: function(user) {
        var hoverText, imgName;
        if (user.get$throttle() != null) {
          hoverText = user.get$throttle();
          imgName = "user_throttled";
        } else if (J.$eq$(J.get$kind$x(user), "M")) {
          imgName = "user_manager";
          hoverText = "Project manager";
        } else {
          imgName = "user_reg";
          hoverText = "";
        }
        return W.Element_Element$html('<img src="images/' + imgName + '.png" title="' + H.S(hoverText) + '" />', null, null);
      },
      _voteCheckbox$1: function(user) {
        var t1, chk, t2;
        t1 = $.Globals_userId;
        if (t1 == null)
          return;
        if (J.$eq$(t1, user.get$userId()))
          return;
        chk = W.InputElement_InputElement("checkbox");
        t1 = J.getInterceptor$x(chk);
        t1.set$checked(chk, J.$eq$(user.get$voteKind(), "L"));
        chk.toString;
        t2 = J.toString$0$(user.get$userId());
        chk.setAttribute("data-" + new W._DataAttributeMap(new W._ElementAttributeMap(chk))._toHyphenedName$1("uid"), t2);
        t1 = t1.get$onChange(chk);
        t1 = H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new U.ProjectMembersPane__voteCheckbox_closure(this, user)), false), [H.getTypeArgumentByIndex(t1, 0)]);
        t2 = t1._html$_onData;
        if (t2 != null && t1._pauseCount <= 0)
          J.addEventListener$3$x(t1._html$_target, t1._eventType, t2, false);
        return chk;
      },
      _userKindDropdown$1: function(user) {
        var t1, sel, t2;
        if (!J.$eq$(this._project.get$editable(), "Y")) {
          t1 = document;
          t1 = t1.createElement("span");
          t1.textContent = $.$get$Globals_allProjectUserKinds().$index(0, J.get$kind$x(user));
          return t1;
        }
        t1 = document;
        sel = t1.createElement("select");
        $.$get$Globals_allProjectUserKinds().forEach$1(0, new U.ProjectMembersPane__userKindDropdown_closure(sel));
        t1 = J.getInterceptor$x(sel);
        t1.set$value(sel, J.get$kind$x(user));
        t2 = J.toString$0$(user.get$userId());
        sel.setAttribute("data-" + new W._DataAttributeMap(new W._ElementAttributeMap(sel))._toHyphenedName$1("uid"), t2);
        t1 = t1.get$onChange(sel);
        t1 = H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new U.ProjectMembersPane__userKindDropdown_closure0(this, user)), false), [H.getTypeArgumentByIndex(t1, 0)]);
        t2 = t1._html$_onData;
        if (t2 != null && t1._pauseCount <= 0)
          J.addEventListener$3$x(t1._html$_target, t1._eventType, t2, false);
        return sel;
      },
      _loadProject$1: function(nameFilter) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, req, t1;
        var $async$_loadProject$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                req = new X.ProjectUserQueryRequest(null, null, null, 0);
                req.projectId = $async$self._project_members_pane$_projectId;
                req.resultPage = $async$self._pageNo;
                req.name = nameFilter;
                $async$goto = 2;
                return P._asyncHelper(L.RpcLib_projectUserQuery(req), $async$_loadProject$1, $async$completer);
              case 2:
                // returning from await.
                t1 = $async$result;
                $async$self._project = t1;
                $async$self._filteredUsers = t1.get$users();
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$_loadProject$1, $async$completer, null);
      }
    },
    ProjectMembersPane_init_closure: {
      "^": "Closure:1;$this,nameInp",
      call$1: function(e) {
        return this.$this._project_members_pane$_doSearch$1(J.trim$0$s(J.get$value$x(this.nameInp)));
      }
    },
    ProjectMembersPane_init_closure0: {
      "^": "Closure:1;$this,nameInp",
      call$1: function(e) {
        var t1 = this.$this;
        ++t1._pageNo;
        t1._loadProject$1(J.trim$0$s(J.get$value$x(this.nameInp)));
        t1._buildOutputTable$0();
      }
    },
    ProjectMembersPane__doSearch_closure: {
      "^": "Closure:1;_box_0",
      call$1: function(u) {
        var t1 = this._box_0;
        return C.JSString_methods.contains$1(J.toLowerCase$0$s(u.get$nick()), t1.name) || C.JSString_methods.contains$1(J.toLowerCase$0$s(u.get$publicName()), t1.name);
      }
    },
    ProjectMembersPane__voteCheckbox_closure: {
      "^": "Closure:6;$this,user",
      call$1: [function(e) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, chk2, t1, t2, userId, voteKind, req;
        var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                chk2 = J.get$target$x(e);
                t1 = J.getInterceptor$x(chk2);
                t2 = t1.get$dataset(chk2);
                userId = H.Primitives_parseInt(t2._attributes._html$_element.getAttribute("data-" + t2._toHyphenedName$1("uid")), null, null);
                voteKind = t1.get$checked(chk2) === true ? "L" : null;
                req = new X.ProjectUserUserSaveRequest(null, null, null, null);
                req.projectId = $async$self.$this._project_members_pane$_projectId;
                req.aboutId = userId;
                req.kind = voteKind;
                $async$goto = 2;
                return P._asyncHelper(L.RpcLib_command("ProjectUserUserSave", req), $async$call$1, $async$completer);
              case 2:
                // returning from await.
                $async$self.user.set$voteKind(voteKind);
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$call$1, $async$completer, null);
      }, null, null, 2, 0, null, 0, [], "call"]
    },
    ProjectMembersPane__userKindDropdown_closure: {
      "^": "Closure:9;sel",
      call$2: function(code, text) {
        var t1 = W.OptionElement_OptionElement$_("", code, null, false);
        t1.textContent = text;
        this.sel.appendChild(t1);
      }
    },
    ProjectMembersPane__userKindDropdown_closure0: {
      "^": "Closure:6;$this,user",
      call$1: [function(e) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, sel2, t1, t2, userId, kind, req, t3;
        var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                sel2 = J.get$target$x(e);
                t1 = J.getInterceptor$x(sel2);
                t2 = t1.get$dataset(sel2);
                userId = H.Primitives_parseInt(t2._attributes._html$_element.getAttribute("data-" + t2._toHyphenedName$1("uid")), null, null);
                kind = t1.get$value(sel2);
                req = new X.ProjectUserSaveRequest(null, null, null, null);
                t2 = $async$self.$this;
                req.projectId = t2._project_members_pane$_projectId;
                req.userId = userId;
                req.kind = kind;
                $async$goto = 2;
                return P._asyncHelper(L.RpcLib_command("ProjectUserSave", req), $async$call$1, $async$completer);
              case 2:
                // returning from await.
                t3 = $async$self.user;
                J.set$kind$x(t3, kind);
                J.replaceWith$1$x(J.querySelector$1$x(t1.get$parent(sel2), "img"), t2._userKindImage$1(t3));
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$call$1, $async$completer, null);
      }, null, null, 2, 0, null, 0, [], "call"]
    }
  }], ["", "../client/dialog/project_membership_dialog.dart",, A, {
    "^": "",
    ProjectMembershipDialog: {
      "^": "DialogBox;_project_membership_dialog$_projectId,_userKind,_showing,_continuation,_backdrop,frame",
      dialogHeight$0: function() {
        return 160;
      },
      build$0: function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, form, t1, t2, oldRoleDesc, newRole, bar;
        var $async$build$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                form = O.FormBuilder$($async$self.frame, "Project Membership");
                t1 = $async$self._userKind;
                t2 = J.getInterceptor(t1);
                oldRoleDesc = t2.$eq(t1, "M") ? "You are a manager of this project." : "You are currently not connected to this project.";
                if (t2.$eq(t1, "A"))
                  oldRoleDesc = "You are an active participant of this project.";
                if (t2.$eq(t1, "V"))
                  oldRoleDesc = "You are a visiting participant of this project.";
                if (t2.$eq(t1, "O"))
                  oldRoleDesc = "You are an observer of this project - no posting permitted.";
                t1 = document;
                t1 = t1.createElement("span");
                t1.textContent = oldRoleDesc;
                form.addAny$2("Current role", t1);
                t1 = document;
                newRole = t1.createElement("select");
                t1 = W.OptionElement_OptionElement$_("", "", null, false);
                t1.value = "O";
                t1.textContent = "Join as observer - no posting";
                newRole.appendChild(t1);
                t1 = W.OptionElement_OptionElement$_("", "", null, false);
                t1.value = "V";
                t1.textContent = "Join as visitor (default)";
                newRole.appendChild(t1);
                t1 = W.OptionElement_OptionElement$_("", "", null, false);
                t1.value = "A";
                t1.textContent = "Join as active participant";
                newRole.appendChild(t1);
                t1 = W.OptionElement_OptionElement$_("", "", null, false);
                t1.value = "N";
                t1.textContent = "Quit";
                newRole.appendChild(t1);
                J.set$value$x(newRole, "A");
                form.addAny$2("New role", newRole);
                bar = M.ButtonBarBuilder$($async$self.frame, null);
                bar.addButton$2("Change Membership", new A.ProjectMembershipDialog_build_closure($async$self, newRole));
                bar.addButton$2("Cancel", new A.ProjectMembershipDialog_build_closure0($async$self));
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$build$0, $async$completer, null);
      }
    },
    ProjectMembershipDialog_build_closure: {
      "^": "Closure:6;$this,newRole",
      call$1: function(e) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, req, t1;
        var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                req = new X.ProjectUserSaveRequest(null, null, null, null);
                t1 = $async$self.$this;
                req.projectId = t1._project_membership_dialog$_projectId;
                req.userId = $.Globals_userId;
                req.kind = J.get$value$x($async$self.newRole);
                $async$goto = 2;
                return P._asyncHelper(L.RpcLib_command("ProjectUserSave", req), $async$call$1, $async$completer);
              case 2:
                // returning from await.
                if ($async$result.get$isOK())
                  t1.hide$1(true);
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$call$1, $async$completer, null);
      }
    },
    ProjectMembershipDialog_build_closure0: {
      "^": "Closure:1;$this",
      call$1: function(e) {
        this.$this.hide$1(false);
      }
    }
  }], ["", "../client/pane/project_pane.dart",, X, {
    "^": "",
    ProjectPane: {
      "^": "BasePane;_project_pane$_projectId,_project_pane$_project,_isCollapsed,paneKey,borderId,borderElement,bodyId,bodyElement,paneMenuBar,onCollapse,onChanePaneKey",
      init$1: function(pk) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, t1, t2, canView, card, $scroll, doc, t3, t4, e, conv, titlePlus, prop;
        var $async$init$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return P._asyncHelper($async$self.super$BasePane$init(pk), $async$init$1, $async$completer);
              case 3:
                // returning from await.
                t1 = pk._keyParts;
                if (1 >= t1.length) {
                  $async$returnValue = H.ioore(t1, 1);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t1 = H.Primitives_parseInt(t1[1], null, null);
                $async$self._project_pane$_projectId = t1;
                t2 = new X.ProjectGetRequest(null, null);
                t2.projectId = t1;
                $async$goto = 4;
                return P._asyncHelper(L.RpcLib_projectGet(t2), $async$init$1, $async$completer);
              case 4:
                // returning from await.
                t2 = $async$result;
                $async$self._project_pane$_project = t2;
                canView = C.JSArray_methods.contains$1(["O", "V", "A", "M"], t2.get$userKind());
                $async$self.buildSkeletonHtml2$4$iconHoverText$iconName$paneClass$title("Project", "paneproject", "project", J.get$title$x($async$self._project_pane$_project));
                t2 = $async$self.bodyElement;
                t2.textContent = "";
                t1 = document;
                t1 = t1.createElement("table");
                t1.className = "cardtable";
                card = new Q.CardBuilder(null, t1);
                card._card_builder$_parent = t2;
                t2.appendChild(t1);
                card.addText$2("Title", J.get$title$x($async$self._project_pane$_project));
                card.addText$2("Visible to", X.ProjectPane_privacyToReadble($async$self._project_pane$_project.get$privacy()));
                card.addText$2("Leadership", X.ProjectPane_leadershipToReadble($async$self._project_pane$_project.get$leadership()));
                card.addText$3$useCollapser("Description", J.get$description$x($async$self._project_pane$_project), true);
                if (canView && $async$self._project_pane$_project.get$docs() != null && J.$gt$n(J.get$length$asx($async$self._project_pane$_project.get$docs()), 0)) {
                  J.insertAdjacentHtml$4$treeSanitizer$validator$x($async$self.bodyElement, "beforeend", '<h2><img src="images/panedoc.png"/>Documents</h2>', null, null);
                  $scroll = V.HtmlLib_appendScrollingDiv($async$self.bodyElement, 200);
                  for (t1 = J.get$iterator$ax($async$self._project_pane$_project.get$docs()); t1.moveNext$0();) {
                    doc = t1.get$current();
                    t2 = J.getInterceptor$x(doc);
                    t3 = t2.get$title(doc);
                    t2 = "doc/" + H.S(t2.get$id(doc));
                    t4 = document;
                    e = t4.createElement("a");
                    J.set$href$x(e, "#" + t2);
                    e.textContent = t3;
                    t2 = e.style;
                    t2.display = "block";
                    $scroll.appendChild(e);
                  }
                }
                if ($async$self._project_pane$_project.get$convs() != null && J.$gt$n(J.get$length$asx($async$self._project_pane$_project.get$convs()), 0)) {
                  J.insertAdjacentHtml$4$treeSanitizer$validator$x($async$self.bodyElement, "beforeend", '<h2><img src="images/paneconv.png"/>Conversations</h2>', null, null);
                  $scroll = V.HtmlLib_appendScrollingDiv($async$self.bodyElement, 200);
                  for (t1 = J.get$iterator$ax($async$self._project_pane$_project.get$convs()); t1.moveNext$0();) {
                    conv = t1.get$current();
                    t2 = J.getInterceptor$x(conv);
                    t3 = t2.get$title(conv);
                    titlePlus = J.$add$ns(t3, !J.$eq$(t2.get$open(conv), "Y") ? " (closed)" : "");
                    t2 = "conv/" + H.S(t2.get$id(conv));
                    t3 = document;
                    e = t3.createElement("a");
                    J.set$href$x(e, "#" + t2);
                    e.textContent = titlePlus;
                    t2 = e.style;
                    t2.display = "block";
                    $scroll.appendChild(e);
                  }
                }
                if (canView && $async$self._project_pane$_project.get$proposals() != null && J.$gt$n(J.get$length$asx($async$self._project_pane$_project.get$proposals()), 0)) {
                  J.insertAdjacentHtml$4$treeSanitizer$validator$x($async$self.bodyElement, "beforeend", '<h2><img src="images/paneproposal.png"/>Proposals/Surveys</h2>', null, null);
                  $scroll = V.HtmlLib_appendScrollingDiv($async$self.bodyElement, 200);
                  for (t1 = J.get$iterator$ax($async$self._project_pane$_project.get$proposals()); t1.moveNext$0();) {
                    prop = t1.get$current();
                    t2 = J.getInterceptor$x(prop);
                    t3 = t2.get$title(prop);
                    t2 = "proposal/" + H.S(t2.get$id(prop));
                    t4 = document;
                    e = t4.createElement("a");
                    J.set$href$x(e, "#" + t2);
                    e.textContent = t3;
                    t2 = e.style;
                    t2.display = "block";
                    $scroll.appendChild(e);
                  }
                }
                if (J.$eq$($async$self._project_pane$_project.get$userKind(), "M"))
                  $async$self.paneMenuBar.addButton$2("Edit", new X.ProjectPane_init_closure($async$self));
                if (canView) {
                  $async$self.paneMenuBar.addButton$2("New Conversation", new X.ProjectPane_init_closure0($async$self));
                  $async$self.paneMenuBar.addButton$2("New Document", new X.ProjectPane_init_closure1($async$self));
                  $async$self.paneMenuBar.addButton$2("New Poll/Proposal", new X.ProjectPane_init_closure2($async$self));
                  $async$self.paneMenuBar.addButton$2("My Role", new X.ProjectPane_init_closure3($async$self));
                }
                $async$self.paneMenuBar.addButton$2("Members", new X.ProjectPane_init_closure4($async$self));
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$init$1, $async$completer, null);
      },
      _editHandler$0: function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, dlg;
        var $async$_editHandler$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                dlg = new E.ProjectDialog($async$self._project_pane$_projectId, $async$self._project_pane$_project.get$categoryId(), null, false, null, null, null);
                dlg.DialogBox$0();
                $async$goto = 2;
                return P._asyncHelper(dlg.show$0(0), $async$_editHandler$0, $async$completer);
              case 2:
                // returning from await.
                if ($async$result === true)
                  A.PaneFactory_create($async$self.paneKey, true);
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$_editHandler$0, $async$completer, null);
      },
      _myRoleHandler$0: function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, dlg;
        var $async$_myRoleHandler$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                dlg = new A.ProjectMembershipDialog($async$self._project_pane$_projectId, $async$self._project_pane$_project.get$userKind(), false, null, null, null);
                dlg.DialogBox$0();
                $async$goto = 2;
                return P._asyncHelper(dlg.show$0(0), $async$_myRoleHandler$0, $async$completer);
              case 2:
                // returning from await.
                if ($async$result === true)
                  A.PaneFactory_create($async$self.paneKey, true);
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$_myRoleHandler$0, $async$completer, null);
      },
      _membersHandler$0: function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this;
        var $async$_membersHandler$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                if (!F.Messages_checkLoggedIn()) {
                  // goto return
                  $async$goto = 1;
                  break;
                }
                A.PaneFactory_createFromString("project-members/" + H.S($async$self._project_pane$_projectId));
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$_membersHandler$0, $async$completer, null);
      },
      _newConvHandler$0: function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, dlg, convId;
        var $async$_newConvHandler$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                dlg = new K.ConvDialog(null, null, $async$self._project_pane$_projectId, null, null, null, null, false, null, null, null);
                dlg.DialogBox$0();
                $async$goto = 3;
                return P._asyncHelper(dlg.show$0(0), $async$_newConvHandler$0, $async$completer);
              case 3:
                // returning from await.
                convId = $async$result;
                if (convId == null) {
                  // goto return
                  $async$goto = 1;
                  break;
                }
                A.PaneFactory_create($async$self.paneKey, true);
                A.PaneFactory_createFromString("conv/" + H.S(convId));
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$_newConvHandler$0, $async$completer, null);
      },
      _newDocHandler$0: function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, title, req, resp, t1;
        var $async$_newDocHandler$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return P._asyncHelper(K.StringDialog$("Document title", "", 500).show$0(0), $async$_newDocHandler$0, $async$completer);
              case 3:
                // returning from await.
                title = $async$result;
                if (title == null || J.$eq$(J.get$length$asx(title), 0)) {
                  // goto return
                  $async$goto = 1;
                  break;
                }
                req = new X.DocSaveRequest(null, null, null, null, null, null, null);
                req.docId = 0;
                req.projectId = $async$self._project_pane$_projectId;
                req.body = "";
                req.title = title;
                $async$goto = 4;
                return P._asyncHelper(L.RpcLib_command("DocSave", req), $async$_newDocHandler$0, $async$completer);
              case 4:
                // returning from await.
                resp = $async$result;
                if (J.$eq$(resp.get$ok(), "Y")) {
                  t1 = {life: 5000};
                  self.jQuery.jGrowl("Document created. Press Edit to start entering content.", t1);
                  A.PaneFactory_createFromString("doc/" + H.S(resp.get$newId()));
                  A.PaneFactory_create($async$self.paneKey, true);
                }
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$_newDocHandler$0, $async$completer, null);
      },
      _newProposalHandler$0: function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, dlg, idOrBool;
        var $async$_newProposalHandler$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                dlg = new B.ProposalDialog("PROJ", $async$self._project_pane$_projectId, J.get$title$x($async$self._project_pane$_project), false, null, null, null);
                dlg.DialogBox$0();
                $async$goto = 2;
                return P._asyncHelper(dlg.show$0(0), $async$_newProposalHandler$0, $async$completer);
              case 2:
                // returning from await.
                idOrBool = $async$result;
                if (typeof idOrBool === "number" && Math.floor(idOrBool) === idOrBool)
                  A.PaneFactory_createFromString("proposal/" + H.S(idOrBool));
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$_newProposalHandler$0, $async$completer, null);
      },
      static: {
        ProjectPane_privacyToReadble: function(privacy) {
          var t1 = J.getInterceptor(privacy);
          if (t1.$eq(privacy, "P"))
            return "Public";
          if (t1.$eq(privacy, "A"))
            return "Announcement";
          if (t1.$eq(privacy, "I"))
            return "Private - by invitation only";
          if (t1.$eq(privacy, "R"))
            return "Private - may join by request";
          return "";
        },
        ProjectPane_leadershipToReadble: function(leadership) {
          var t1 = J.getInterceptor(leadership);
          if (t1.$eq(leadership, "F"))
            return "Fixed: project creators retain authority";
          if (t1.$eq(leadership, "D"))
            return "Democratic: leadership determined by vote";
          return "";
        }
      }
    },
    ProjectPane_init_closure: {
      "^": "Closure:1;$this",
      call$1: function(e) {
        return this.$this._editHandler$0();
      }
    },
    ProjectPane_init_closure0: {
      "^": "Closure:1;$this",
      call$1: function(e) {
        return this.$this._newConvHandler$0();
      }
    },
    ProjectPane_init_closure1: {
      "^": "Closure:1;$this",
      call$1: function(e) {
        return this.$this._newDocHandler$0();
      }
    },
    ProjectPane_init_closure2: {
      "^": "Closure:1;$this",
      call$1: function(e) {
        return this.$this._newProposalHandler$0();
      }
    },
    ProjectPane_init_closure3: {
      "^": "Closure:1;$this",
      call$1: function(e) {
        return this.$this._myRoleHandler$0();
      }
    },
    ProjectPane_init_closure4: {
      "^": "Closure:1;$this",
      call$1: function(e) {
        return this.$this._membersHandler$0();
      }
    }
  }], ["", "../client/pane/project_search_pane.dart",, F, {
    "^": "",
    ProjectSearchPane: {
      "^": "BasePane;_project_search_pane$_resultDiv,_isCollapsed,paneKey,borderId,borderElement,bodyId,bodyElement,paneMenuBar,onCollapse,onChanePaneKey",
      init$1: function(pk) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, t1, t2, t3, titleInp;
        var $async$init$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 2;
                return P._asyncHelper($async$self.super$BasePane$init(pk), $async$init$1, $async$completer);
              case 2:
                // returning from await.
                $async$self.buildSkeletonHtml2$3$iconName$paneClass$title("paneproject", "projectsearch", "Project Search");
                t1 = $async$self.bodyElement;
                t1.textContent = "";
                t1 = V.HtmlLib_appendScrollingDiv(t1, 200);
                t2 = t1.style;
                t3 = C.JSInt_methods.toString$0(6) + "px";
                t2.marginBottom = t3;
                t2 = t1.style;
                t2.display = "none";
                $async$self._project_search_pane$_resultDiv = t1;
                titleInp = O.FormBuilder$($async$self.bodyElement, "Criteria").addInput$3("Title", 100, 50);
                $async$self.paneMenuBar.addButton$2("Search", new F.ProjectSearchPane_init_closure($async$self, titleInp));
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$init$1, $async$completer, null);
      },
      _project_search_pane$_doSearch$1: function(title) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, t1, t2, response, proj, itemDiv, t3, t4, t5, e;
        var $async$_project_search_pane$_doSearch$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self._project_search_pane$_resultDiv;
                t2 = t1.style;
                t2.display = "block";
                J.set$innerHtml$x(t1, "Loading...");
                t1 = new X.ProjectQueryRequest(null, null, null);
                t1.title = title;
                $async$goto = 2;
                return P._asyncHelper(L.RpcLib_projectQuery(t1), $async$_project_search_pane$_doSearch$1, $async$completer);
              case 2:
                // returning from await.
                response = $async$result;
                J.set$innerHtml$x($async$self._project_search_pane$_resultDiv, "");
                for (t1 = J.get$iterator$ax(response.get$projects()); t1.moveNext$0();) {
                  proj = t1.get$current();
                  t2 = document;
                  itemDiv = t2.createElement("div");
                  itemDiv.className = "space1";
                  $async$self._project_search_pane$_resultDiv.appendChild(itemDiv);
                  t2 = J.getInterceptor$x(proj);
                  t3 = t2.get$title(proj);
                  t4 = "project/" + H.S(proj.get$projectId());
                  t5 = document;
                  e = t5.createElement("a");
                  J.set$href$x(e, "#" + t4);
                  e.textContent = t3;
                  itemDiv.appendChild(e);
                  itemDiv.appendChild(document.createTextNode(" - "));
                  V.HtmlLib_insertCollapsed1(itemDiv, t2.get$description(proj), 150, false, null);
                }
                if (J.$eq$(J.get$length$asx(response.get$projects()), 0))
                  J.set$innerHtml$x($async$self._project_search_pane$_resultDiv, "(none)");
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$_project_search_pane$_doSearch$1, $async$completer, null);
      }
    },
    ProjectSearchPane_init_closure: {
      "^": "Closure:1;$this,titleInp",
      call$1: function(e) {
        return this.$this._project_search_pane$_doSearch$1(J.trim$0$s(J.get$value$x(this.titleInp)));
      }
    }
  }], ["", "../client/pane/project_tree_pane.dart",, X, {
    "^": "",
    ProjectTreePane: {
      "^": "BaseTreePane;_projectCount,_projects,paneClass,paneTitle,categoryKind,paneIconName,_topCats,_allCats,_detailBox,_selectedCatId,_selectedCat,_isCollapsed,paneKey,borderId,borderElement,bodyId,bodyElement,paneMenuBar,onCollapse,onChanePaneKey",
      init$1: function(pk) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this;
        var $async$init$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$self.paneClass = "projecttree";
                $async$self.paneTitle = "Project Categories";
                $async$self.paneIconName = "paneproject";
                $async$self.categoryKind = "P";
                $async$goto = 2;
                return P._asyncHelper($async$self.super$BaseTreePane$init(pk), $async$init$1, $async$completer);
              case 2:
                // returning from await.
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$init$1, $async$completer, null);
      },
      insertDetails$2: function(detailBox, catId) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, t1, proj, t2, pdiv, $async$temp1;
        var $async$insertDetails$2 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = new X.ProjectQueryRequest(null, null, null);
                t1.catId = catId;
                $async$temp1 = $async$self;
                $async$goto = 2;
                return P._asyncHelper(L.RpcLib_projectQuery(t1), $async$insertDetails$2, $async$completer);
              case 2:
                // returning from await.
                $async$temp1._projects = $async$result;
                t1 = document;
                t1 = t1.createElement("h3");
                t1.textContent = "Projects in this category";
                detailBox.appendChild(t1);
                for (t1 = J.get$iterator$ax($async$self._projects.get$projects()); t1.moveNext$0();) {
                  proj = t1.get$current();
                  t2 = document;
                  pdiv = t2.createElement("div");
                  t2 = J.getInterceptor$x(proj);
                  J.insertAdjacentHtml$4$treeSanitizer$validator$x(pdiv, "beforeend", '<a href="#project/' + H.S(proj.get$projectId()) + '">' + H.S(t2.get$title(proj)) + "</a> ", null, null);
                  detailBox.appendChild(pdiv);
                  V.HtmlLib_insertCollapsed1(pdiv, t2.get$description(proj), 150, false, null);
                }
                if (J.$eq$(J.get$length$asx($async$self._projects.get$projects()), 0))
                  detailBox.appendChild(document.createTextNode("(none)"));
                $async$self._projectCount = J.get$length$asx($async$self._projects.get$projects());
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$insertDetails$2, $async$completer, null);
      },
      insertDetailButtons$2: function(bar, catId) {
        bar.addButton$2("Create Project", new X.ProjectTreePane_insertDetailButtons_closure(this));
      },
      getContentTitles$0: function() {
        return J.map$1$ax(this._projects.get$projects(), new X.ProjectTreePane_getContentTitles_closure()).toList$0(0);
      },
      getContentIds$1: function(contentTitles) {
        return J.map$1$ax(contentTitles, new X.ProjectTreePane_getContentIds_closure(this)).where$1(0, new X.ProjectTreePane_getContentIds_closure0()).toList$0(0);
      }
    },
    ProjectTreePane_insertDetailButtons_closure: {
      "^": "Closure:6;$this",
      call$1: function(e) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, t1, dlg;
        var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.$this;
                if (J.$ge$n(t1._projectCount, 100)) {
                  t1 = {life: 5000};
                  self.jQuery.jGrowl("There are too many projects in this category. Please choose a more detailed sub-category.", t1);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                dlg = new E.ProjectDialog(0, t1._selectedCatId, null, false, null, null, null);
                dlg.DialogBox$0();
                $async$goto = 3;
                return P._asyncHelper(dlg.show$0(0), $async$call$1, $async$completer);
              case 3:
                // returning from await.
                if ($async$result === true) {
                  A.PaneFactory_create(t1.paneKey, true);
                  F.Messages_criticalMessage("Your new project will be reviewed by admins then posted later.");
                }
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$call$1, $async$completer, null);
      }
    },
    ProjectTreePane_getContentTitles_closure: {
      "^": "Closure:1;",
      call$1: [function(i) {
        return J.get$title$x(i);
      }, null, null, 2, 0, null, 11, [], "call"]
    },
    ProjectTreePane_getContentIds_closure: {
      "^": "Closure:1;$this",
      call$1: [function(s) {
        var matches, t1;
        matches = J.where$1$ax(this.$this._projects.get$projects(), new X.ProjectTreePane_getContentIds__closure(s)).toList$0(0);
        t1 = J.getInterceptor$asx(matches);
        if (t1.get$length(matches) > 0)
          return t1.$index(matches, 0).get$projectId();
        return;
      }, null, null, 2, 0, null, 8, [], "call"]
    },
    ProjectTreePane_getContentIds__closure: {
      "^": "Closure:1;s",
      call$1: function(i) {
        return J.$eq$(J.get$title$x(i), this.s);
      }
    },
    ProjectTreePane_getContentIds_closure0: {
      "^": "Closure:1;",
      call$1: function(i) {
        return i != null;
      }
    }
  }], ["", "../client/dialog/proposal_dialog.dart",, B, {
    "^": "",
    ProposalDialog: {
      "^": "DialogBox;_proposal_dialog$_kind,_proposal_dialog$_projectId,_projectTitle,_showing,_continuation,_backdrop,frame",
      build$0: function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, t1, t2, isKindProj, form, titleInput, descInput, optionsInput, t3, eligibleInput, daysInput, dayChoices, _i, i, t4, kindNotice, bar;
        var $async$build$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = {};
                t2 = $async$self._proposal_dialog$_kind;
                isKindProj = t2 === "PROJ";
                form = O.FormBuilder$($async$self.frame, "Create Proposal/Survey");
                titleInput = form.addInput$3("Title", 400, 500);
                descInput = form.addTextArea$4("Proposal details", 400, 90, 10000);
                optionsInput = form.addTextArea$4("Available options (one per line)", 400, 90, 10000);
                J.set$value$x(optionsInput, "Yes\r\nNo");
                t1.eligibleInput = null;
                if (isKindProj) {
                  t3 = document;
                  eligibleInput = t3.createElement("select");
                  t1.eligibleInput = eligibleInput;
                  t3 = W.OptionElement_OptionElement$_("", "", null, false);
                  t3.value = "P";
                  t3.textContent = "All project members";
                  eligibleInput.appendChild(t3);
                  t3 = W.OptionElement_OptionElement$_("", "", null, false);
                  t3.value = "L";
                  t3.textContent = "Project leaders only";
                  eligibleInput.appendChild(t3);
                  form.addAny$2("Who may vote", eligibleInput);
                  J.set$value$x(eligibleInput, "P");
                }
                t3 = document;
                daysInput = t3.createElement("select");
                dayChoices = [14];
                if (isKindProj)
                  dayChoices = [3, 5, 7, 10, 14, 21, 30, 45];
                for (t3 = dayChoices.length, _i = 0; _i < dayChoices.length; dayChoices.length === t3 || (0, H.throwConcurrentModificationError)(dayChoices), ++_i) {
                  i = dayChoices[_i];
                  t4 = W.OptionElement_OptionElement$_("", "", null, false);
                  t4.value = C.JSInt_methods.toString$0(i);
                  t4.textContent = "" + i + " days";
                  daysInput.appendChild(t4);
                }
                J.set$value$x(daysInput, "14");
                form.addAny$2("Voting period (days)", daysInput);
                kindNotice = isKindProj ? 'The proposal or survey will be part of the project "' + H.S($async$self._projectTitle) + '".' : "";
                if (t2 === "SYS")
                  kindNotice = "The proposal must be about the way this platform operates, and it will be voted on by the entire site membership.";
                t2 = $async$self.frame;
                t2.toString;
                t2.appendChild(document.createTextNode(kindNotice));
                bar = M.ButtonBarBuilder$($async$self.frame, null);
                bar.addButton$2("Create Proposal", new B.ProposalDialog_build_closure(t1, $async$self, isKindProj, form, titleInput, descInput, optionsInput, daysInput));
                bar.addButton$2("Cancel", new B.ProposalDialog_build_closure0($async$self));
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$build$0, $async$completer, null);
      }
    },
    ProposalDialog_build_closure: {
      "^": "Closure:6;_box_0,$this,isKindProj,form,titleInput,descInput,optionsInput,daysInput",
      call$1: function(e) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, title, t1, opts, eligible, saveArgs, response;
        var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                title = J.trim$0$s(J.get$value$x($async$self.titleInput));
                if (title.length === 0) {
                  t1 = $async$self.form._form_builder$_error;
                  t1.textContent = "Title is required";
                  J.scrollIntoView$0$x(t1);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                opts = V.HtmlLib_textAreaValueToLines($async$self.optionsInput, true);
                if (opts.length < 2) {
                  t1 = $async$self.form._form_builder$_error;
                  t1.textContent = "There must be at least 2 options";
                  J.scrollIntoView$0$x(t1);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                eligible = $async$self.isKindProj ? J.get$value$x($async$self._box_0.eligibleInput) : "E";
                saveArgs = new X.ProposalSaveRequest(null, null, null, null, null, null, null, null);
                t1 = $async$self.$this;
                saveArgs.kind = t1._proposal_dialog$_kind;
                saveArgs.projectId = t1._proposal_dialog$_projectId;
                saveArgs.eligible = eligible;
                saveArgs.title = title;
                saveArgs.summary = J.trim$0$s(J.get$value$x($async$self.descInput));
                saveArgs.days = H.Primitives_parseInt(J.get$value$x($async$self.daysInput), null, null);
                saveArgs.options = opts;
                $async$goto = 3;
                return P._asyncHelper(L.RpcLib_command("ProposalSave", saveArgs), $async$call$1, $async$completer);
              case 3:
                // returning from await.
                response = $async$result;
                if (response.get$isOK()) {
                  t1.hide$1(response.get$newId() == null || response.get$newId());
                  t1 = {life: 5000};
                  self.jQuery.jGrowl("Proposal created.", t1);
                }
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$call$1, $async$completer, null);
      }
    },
    ProposalDialog_build_closure0: {
      "^": "Closure:1;$this",
      call$1: function(e) {
        this.$this.hide$1(false);
      }
    }
  }], ["", "../client/pane/proposal_list_pane.dart",, V, {
    "^": "",
    ProposalListPane: {
      "^": "BasePane;proposals@",
      init$1: function(pk) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, t1, item, t2, t3, t4, t5, e;
        var $async$init$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 2;
                return P._asyncHelper($async$self.super$BasePane$init(pk), $async$init$1, $async$completer);
              case 2:
                // returning from await.
                $async$goto = 3;
                return P._asyncHelper($async$self.load$0(0), $async$init$1, $async$completer);
              case 3:
                // returning from await.
                $async$self.buildSkeletonHtml2$3$iconName$paneClass$title("paneproposal", $async$self.paneClass, $async$self.paneTitle);
                $async$self.bodyElement.textContent = "";
                for (t1 = J.get$iterator$ax(J.get$items$x($async$self.proposals)); t1.moveNext$0();) {
                  item = t1.get$current();
                  t2 = $async$self.bodyElement;
                  t3 = J.getInterceptor$x(item);
                  t4 = t3.get$title(item);
                  t3 = "proposal/" + H.S(t3.get$id(item));
                  t5 = document;
                  e = t5.createElement("a");
                  J.set$href$x(e, "#" + t3);
                  e.textContent = t4;
                  t3 = e.style;
                  t3.display = "block";
                  t2.appendChild(e);
                }
                if (J.$eq$(J.get$length$asx(J.get$items$x($async$self.proposals)), 0)) {
                  t1 = $async$self.bodyElement;
                  t1.toString;
                  t1.appendChild(document.createTextNode("(none found)"));
                }
                $async$self.makeButtonBar$0();
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$init$1, $async$completer, null);
      },
      load$0: function(_) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError;
        var $async$load$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$load$0, $async$completer, null);
      },
      makeButtonBar$0: function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError;
        var $async$makeButtonBar$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$makeButtonBar$0, $async$completer, null);
      }
    }
  }], ["", "../client/pane/proposal_pane.dart",, K, {
    "^": "",
    ProposalPane: {
      "^": "BasePane;_proposalId,_clickedInCode,_isCollapsed,paneKey,borderId,borderElement,bodyId,bodyElement,paneMenuBar,onCollapse,onChanePaneKey",
      init$1: function(pk) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, t1, t2, t3, proposal, t4, card, summaryHtml, resultsDiv, bullets, opt, isWinner, li, allChecks, isRetractableKind;
        var $async$init$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return P._asyncHelper($async$self.super$BasePane$init(pk), $async$init$1, $async$completer);
              case 3:
                // returning from await.
                t1 = J.$eq$($.Globals_userId, 0);
                t2 = pk._keyParts;
                if (1 >= t2.length) {
                  $async$returnValue = H.ioore(t2, 1);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t2 = H.Primitives_parseInt(t2[1], null, null);
                $async$self._proposalId = t2;
                t3 = new X.ProposalGetRequest(null, null);
                t3.proposalId = t2;
                $async$goto = 4;
                return P._asyncHelper(L.RpcLib_proposalGet(t3), $async$init$1, $async$completer);
              case 4:
                // returning from await.
                proposal = $async$result;
                t3 = J.getInterceptor$x(proposal);
                $async$self.buildSkeletonHtml2$4$iconHoverText$iconName$paneClass$title("Proposal", "paneproposal", "proposal", t3.get$title(proposal));
                t2 = $async$self.bodyElement;
                t2.textContent = "";
                t4 = document;
                t4 = t4.createElement("table");
                t4.className = "cardtable";
                card = new Q.CardBuilder(null, t4);
                card._card_builder$_parent = t2;
                t2.appendChild(t4);
                card.addText$2("Title", t3.get$title(proposal));
                card.addText$2("Status", proposal.get$statusDescription());
                card.addText$2("Summary", proposal.get$summary());
                summaryHtml = proposal.get$summaryHtml();
                if (summaryHtml == null)
                  summaryHtml = "";
                if (J.$gt$n(J.get$length$asx(summaryHtml), 0))
                  J.setInnerHtml$2$treeSanitizer$x(card.addAny$1("Changes"), summaryHtml, C.C__TrustedHtmlTreeSanitizer);
                if (!J.$eq$(t3.get$active(proposal), "Y")) {
                  resultsDiv = card.addAny$1("Poll results");
                  t2 = document;
                  bullets = t2.createElement("ul");
                  resultsDiv.appendChild(bullets);
                  for (t2 = J.get$iterator$ax(t3.get$options(proposal)); t2.moveNext$0();) {
                    opt = t2.get$current();
                    isWinner = J.$eq$(opt.get$optionNo(), proposal.get$winningOption());
                    t4 = document;
                    li = t4.createElement("li");
                    li.textContent = H.S(opt.get$optionDesc()) + " (" + H.S(opt.get$voteCount()) + " votes)";
                    if (isWinner) {
                      t4 = li.style;
                      t4.fontWeight = "bold";
                    }
                    bullets.appendChild(li);
                  }
                }
                allChecks = H.setRuntimeTypeInfo([], [W.CheckboxInputElement]);
                t2 = new K.ProposalPane_init_add1Checkbox($async$self, new K.ProposalPane_init_closure($async$self, allChecks));
                if (J.$eq$(proposal.get$myEligible(), "Y") && J.$eq$(t3.get$active(proposal), "Y"))
                  for (t4 = J.get$iterator$ax(t3.get$options(proposal)); t4.moveNext$0();) {
                    opt = t4.get$current();
                    allChecks.push(t2.call$3(J.$eq$(proposal.get$myVote(), opt.get$optionNo()), opt.get$optionDesc(), opt.get$optionNo()));
                  }
                if (J.$eq$(t3.get$kind(proposal), "ROOT") && J.$eq$(t3.get$active(proposal), "Y")) {
                  $async$self.paneMenuBar.addButton$2("Show Current Full Text", new K.ProposalPane_init_closure0(proposal));
                  $async$self.paneMenuBar.addButton$2("Show Proposed Full Text", new K.ProposalPane_init_closure1(proposal));
                }
                isRetractableKind = J.$eq$(t3.get$kind(proposal), "PROJ") || J.$eq$(t3.get$kind(proposal), "SYS") || J.$eq$(t3.get$kind(proposal), "ROOT");
                if (!t1 && J.$eq$(t3.get$active(proposal), "Y") && isRetractableKind && J.$eq$(proposal.get$createdBy(), $.Globals_userId))
                  $async$self.paneMenuBar.addButton$2("Retract Proposal", new K.ProposalPane_init_closure2($async$self));
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$init$1, $async$completer, null);
      },
      _handleVote$1: function(optionNo) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, req;
        var $async$_handleVote$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                if (!F.Messages_checkLoggedIn()) {
                  // goto return
                  $async$goto = 1;
                  break;
                }
                req = new X.ProposalUserSaveRequest(null, null, null);
                req.proposalId = $async$self._proposalId;
                req.vote = optionNo;
                $async$goto = 3;
                return P._asyncHelper(L.RpcLib_command("ProposalUserSave", req), $async$_handleVote$1, $async$completer);
              case 3:
                // returning from await.
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$_handleVote$1, $async$completer, null);
      }
    },
    ProposalPane_init_closure: {
      "^": "Closure:58;$this,allChecks",
      call$1: [function(e) {
        var t1, clickedChk, t2, t3, clickedOptionNo, t4, _i, chk, t5, t6;
        t1 = this.$this;
        if (t1._clickedInCode)
          return;
        t1._clickedInCode = true;
        clickedChk = J.get$target$x(e);
        t2 = J.getInterceptor$x(clickedChk);
        t3 = t2.get$dataset(clickedChk);
        clickedOptionNo = t3._attributes._html$_element.getAttribute("data-" + t3._toHyphenedName$1("opt"));
        if (t2.get$checked(clickedChk) === true)
          for (t3 = this.allChecks, t4 = t3.length, _i = 0; _i < t3.length; t3.length === t4 || (0, H.throwConcurrentModificationError)(t3), ++_i) {
            chk = t3[_i];
            t5 = J.getInterceptor$x(chk);
            t6 = t5.get$dataset(chk);
            t6 = t6._attributes._html$_element.getAttribute("data-" + t6._toHyphenedName$1("opt"));
            if (t6 == null ? clickedOptionNo != null : t6 !== clickedOptionNo)
              t5.set$checked(chk, false);
          }
        t1._clickedInCode = false;
        t1._handleVote$1(t2.get$checked(clickedChk) === true ? H.Primitives_parseInt(clickedOptionNo, null, null) : null);
      }, null, null, 2, 0, null, 0, [], "call"]
    },
    ProposalPane_init_add1Checkbox: {
      "^": "Closure:59;$this,handleCheckbox",
      call$3: function(value, text, optionNo) {
        var t1, div, chk, t2;
        t1 = document;
        div = t1.createElement("div");
        chk = W.InputElement_InputElement("checkbox");
        t1 = J.getInterceptor$x(chk);
        t1.set$checked(chk, value);
        chk.toString;
        t2 = J.toString$0$(optionNo);
        chk.setAttribute("data-" + new W._DataAttributeMap(new W._ElementAttributeMap(chk))._toHyphenedName$1("opt"), t2);
        div.appendChild(chk);
        t2 = C.JSString_methods.$add(" ", text);
        div.appendChild(document.createTextNode(t2));
        this.$this.bodyElement.appendChild(div);
        t1 = t1.get$onChange(chk);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(this.handleCheckbox), false), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
        return chk;
      }
    },
    ProposalPane_init_closure0: {
      "^": "Closure:6;proposal",
      call$1: function(e) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, req, dlg, $async$temp1, $async$temp2;
        var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                req = new X.DocGetRequest(null, null, null, null, null);
                req.docId = $async$self.proposal.get$docId();
                $async$temp1 = A;
                $async$temp2 = J;
                $async$goto = 2;
                return P._asyncHelper(L.RpcLib_docGet(req), $async$call$1, $async$completer);
              case 2:
                // returning from await.
                dlg = new $async$temp1.ViewMarkdownDialog($async$temp2.get$body$x($async$result), false, null, null, null);
                dlg.DialogBox$0();
                $async$goto = 3;
                return P._asyncHelper(dlg.show$0(0), $async$call$1, $async$completer);
              case 3:
                // returning from await.
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$call$1, $async$completer, null);
      }
    },
    ProposalPane_init_closure1: {
      "^": "Closure:6;proposal",
      call$1: function(e) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, dlg;
        var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                dlg = new A.ViewMarkdownDialog($async$self.proposal.get$dtext(), false, null, null, null);
                dlg.DialogBox$0();
                $async$goto = 2;
                return P._asyncHelper(dlg.show$0(0), $async$call$1, $async$completer);
              case 2:
                // returning from await.
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$call$1, $async$completer, null);
      }
    },
    ProposalPane_init_closure2: {
      "^": "Closure:6;$this",
      call$1: function(e) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, dlg, req, t1, $async$temp1;
        var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                dlg = new L.ConfirmDialog("Really delete proposal?", $.$get$ConfirmDialog_YesNoOptions(), false, null, null, null);
                dlg.DialogBox$0();
                $async$temp1 = J;
                $async$goto = 4;
                return P._asyncHelper(dlg.show$0(0), $async$call$1, $async$completer);
              case 4:
                // returning from await.
                $async$goto = $async$temp1.$eq$($async$result, 0) ? 2 : 3;
                break;
              case 2:
                // then
                req = new X.ProposalGetRequest(null, null);
                t1 = $async$self.$this;
                req.proposalId = t1._proposalId;
                $async$goto = 5;
                return P._asyncHelper(L.RpcLib_command("ProposalDelete", req), $async$call$1, $async$completer);
              case 5:
                // returning from await.
                if ($async$result.get$isOK())
                  A.PaneFactory_delete(t1);
              case 3:
                // join
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$call$1, $async$completer, null);
      }
    }
  }], ["", "../client/push_queue_handler.dart",, T, {
    "^": "",
    PushQueueHandler__timerTick: [function() {
      var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, now, t1, t2, fifteenSecAgo, threeMinAgo, manyMinAgo, pollNow, fullMode, pushArgs, rawResponse;
      var $async$PushQueueHandler__timerTick = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              now = new P.DateTime(Date.now(), false).toUtc$0();
              t1 = now._value;
              t2 = now.isUtc;
              fifteenSecAgo = P.DateTime$_withValue(t1 - C.JSNumber_methods._tdivFast$1(P.Duration$(0, 0, 0, 0, 0, 15)._duration, 1000), t2);
              threeMinAgo = P.DateTime$_withValue(t1 - C.JSNumber_methods._tdivFast$1(P.Duration$(0, 0, 0, 0, 3, 0)._duration, 1000), t2);
              manyMinAgo = P.DateTime$_withValue(t1 - C.JSNumber_methods._tdivFast$1(P.Duration$(0, 0, 0, 0, 25, 0)._duration, 1000), t2);
              pollNow = $.Globals_pollExplicitlyRequested && $.$get$Globals_lastPollUtc()._value < fifteenSecAgo._value && true;
              $async$goto = ($.$get$Globals_pushQueue().length === 0 && $.$get$Globals_lastPollUtc()._value < threeMinAgo._value && $.$get$Globals_lastActivityUtc()._value > manyMinAgo._value ? true : pollNow) && $.Globals_nick != null ? 2 : 3;
              break;
            case 2:
              // then
              $.Globals_pollExplicitlyRequested = false;
              T.PushQueueHandler__showHideRefreshButton(false);
              fullMode = P.DateTime$_withValue(t1 - C.JSNumber_methods._tdivFast$1(P.Duration$(0, 0, 0, 0, 15, 0)._duration, 1000), t2)._value > $.$get$Globals_lastFullPollUtc()._value;
              $.Globals_lastPollUtc = now;
              pushArgs = new X.PushQueueGetRequest(null, null);
              pushArgs.depth = fullMode ? "F" : "L";
              $async$goto = 4;
              return P._asyncHelper(L.RpcLib_rpcAsMap("PushQueueGet", pushArgs), $async$PushQueueHandler__timerTick, $async$completer);
            case 4:
              // returning from await.
              rawResponse = $async$result;
              if (fullMode && J.$index$asx(rawResponse, "fullModeStatus") == null)
                $.Globals_lastFullPollUtc = now;
              T.PushQueueHandler_itemsReceived(fullMode, T.PushQueueHandler__parseListOfRawItems(J.$index$asx(rawResponse, "items")), "S");
              T.PushQueueHandler__showHideRefreshButton(true);
            case 3:
              // join
              P.Timer_Timer(P.Duration$(0, 0, 0, 0, 0, 15), T.push_queue_handler_PushQueueHandler__timerTick$closure());
              // implicit return
              return P._asyncHelper(null, 0, $async$completer, null);
            case 1:
              // rethrow
              return P._asyncHelper($async$currentError, 1, $async$completer);
          }
      });
      return P._asyncHelper(null, $async$PushQueueHandler__timerTick, $async$completer, null);
    }, "call$0", "push_queue_handler_PushQueueHandler__timerTick$closure", 0, 0, 11],
    PushQueueHandler__showHideRefreshButton: function(show) {
      var t1;
      if (show) {
        t1 = document.querySelector("#refresh-working").style;
        t1.display = "none";
        $.PushQueueHandler__suppressQuickRefreshTimer = P.Timer_Timer(P.Duration$(0, 0, 0, 0, 0, 30), new T.PushQueueHandler__showHideRefreshButton_closure());
      } else {
        t1 = $.PushQueueHandler__suppressQuickRefreshTimer;
        if (t1 != null) {
          t1.cancel$0(0);
          $.PushQueueHandler__suppressQuickRefreshTimer = null;
        }
        t1 = document.querySelector("#button-refresh").style;
        t1.display = "none";
        t1 = document.querySelector("#refresh-working").style;
        t1.display = "inline-block";
      }
    },
    PushQueueHandler__parseListOfRawItems: function(rawitems) {
      var niceitems;
      if (rawitems == null)
        return [];
      niceitems = J.map$1$ax(rawitems, new T.PushQueueHandler__parseListOfRawItems_closure()).toList$0(0);
      J.removeWhere$1$ax(niceitems, new T.PushQueueHandler__parseListOfRawItems_closure0());
      return niceitems;
    },
    PushQueueHandler__receiveFromOtherWindow: [function(obj) {
      var t1, action, items;
      t1 = J.getInterceptor$asx(obj);
      action = t1.$index(obj, "action");
      items = T.PushQueueHandler__parseListOfRawItems(t1.$index(obj, "items"));
      t1 = J.getInterceptor(action);
      if (t1.$eq(action, "A"))
        T.PushQueueHandler_itemsReceived(false, items, "W");
      if (t1.$eq(action, "F"))
        T.PushQueueHandler_itemsReceived(true, items, "W");
      if (t1.$eq(action, "R"))
        for (t1 = J.get$iterator$ax(items); t1.moveNext$0();)
          T.PushQueueHandler__removeItem(t1.__interceptors$_current, false);
    }, "call$1", "push_queue_handler_PushQueueHandler__receiveFromOtherWindow$closure", 2, 0, 35],
    PushQueueHandler_sendToOtherWindows: function(action, items) {
      var json, t1;
      if (J.get$length$asx(items) === 0)
        return;
      json = C.JsonCodec_null_null.encode$1(P.LinkedHashMap__makeLiteral(["action", action, "items", J.map$1$ax(items, new T.PushQueueHandler_sendToOtherWindows_closure()).toList$0(0)]));
      $.$get$ClientStore__store().setItem("message", json);
      t1 = $.$get$ClientStore__store();
      (t1 && C.Storage_methods).remove$1(t1, "message");
    },
    PushQueueHandler_itemsReceived: function(fullPoll, items, source) {
      var t1;
      if (source !== "B")
        if (fullPoll) {
          t1 = $.$get$Globals_pushQueue();
          (t1 && C.JSArray_methods).set$length(t1, 0);
        } else {
          t1 = $.$get$Globals_pushQueue();
          (t1 && C.JSArray_methods).checkGrowable$1(t1, "removeWhere");
          C.JSArray_methods._removeWhere$2(t1, new T.PushQueueHandler_itemsReceived_closure(), true);
        }
      t1 = $.$get$Globals_pushQueue();
      (t1 && C.JSArray_methods).addAll$1(t1, items);
      T.PushQueueHandler__rebuildMyStuff();
      t1 = new P.DateTime(Date.now(), false).toUtc$0();
      $.Globals_lastPollUtc = t1;
      if (fullPoll)
        $.Globals_lastFullPollUtc = t1;
      if (source !== "W")
        T.PushQueueHandler_sendToOtherWindows(fullPoll ? "F" : "A", items);
    },
    PushQueueHandler__removeItem: function(item, fromLocal) {
      var t1 = $.$get$Globals_pushQueue();
      t1.toString;
      if (typeof t1 !== "object" || t1 === null || !!t1.fixed$length)
        H.throwExpression(new P.UnsupportedError("removeWhere"));
      (t1 && C.JSArray_methods)._removeWhere$2(t1, new T.PushQueueHandler__removeItem_closure(item), true);
      if ($.$get$Globals_pushQueue().length === 0)
        $.Globals_pollExplicitlyRequested = true;
      T.PushQueueHandler__rebuildMyStuff();
      if (fromLocal)
        T.PushQueueHandler_sendToOtherWindows("R", [item]);
    },
    PushQueueHandler__removeNotifyItem: function(item, fromLocal) {
      var t1 = $.$get$Globals_pushQueue();
      (t1 && C.JSArray_methods).checkGrowable$1(t1, "removeWhere");
      C.JSArray_methods._removeWhere$2(t1, new T.PushQueueHandler__removeNotifyItem_closure(item), true);
      T.PushQueueHandler__finishRemoveItem(item, true);
    },
    PushQueueHandler__finishRemoveItem: function(item, fromLocal) {
      if ($.$get$Globals_pushQueue().length === 0)
        $.Globals_pollExplicitlyRequested = true;
      T.PushQueueHandler__rebuildMyStuff();
      if (fromLocal)
        T.PushQueueHandler_sendToOtherWindows("R", [item]);
    },
    PushQueueHandler__rebuildMyStuff: function() {
      var t1, t2, num, titlePrefix;
      t1 = {};
      t1.section = null;
      t2 = new T.PushQueueHandler__rebuildMyStuff_build1(t1, new T.PushQueueHandler__rebuildMyStuff_iconHtml());
      t1.section = document.querySelector("#queue-notify");
      t2.call$2("Notifications", "N");
      t1.section = document.querySelector("#queue-unread");
      t2.call$2("Unread", "U");
      t1.section = document.querySelector("#queue-suggest");
      t2.call$2("Suggestions", "S");
      t1 = $.$get$Globals_pushQueue().length;
      num = t1 > 0 ? C.JSInt_methods.toString$0(t1) : "";
      document.querySelector("#button-next-number").textContent = num;
      titlePrefix = num.length > 0 ? "(" + num + ") " : "";
      document.head.title = titlePrefix + "autistic.zone";
    },
    PushQueueHandler_showNext: function() {
      var q, item;
      q = $.$get$Globals_pushQueue();
      if (q.length === 0)
        return;
      item = (q && C.JSArray_methods).firstWhere$2$orElse(q, new T.PushQueueHandler_showNext_closure(), new T.PushQueueHandler_showNext_closure0(q));
      if (J.$eq$(J.get$kind$x(item), "N"))
        A.PaneFactory_createFromString("notify/" + H.S(item.get$sid()));
      else
        A.PaneFactory_createFromString(item.get$linkPaneKey());
    },
    PushQueueHandler__showHideRefreshButton_closure: {
      "^": "Closure:4;",
      call$0: function() {
        var t1 = document.querySelector("#button-refresh").style;
        t1.display = "inline-block";
        $.PushQueueHandler__suppressQuickRefreshTimer = null;
      }
    },
    PushQueueHandler__parseListOfRawItems_closure: {
      "^": "Closure:1;",
      call$1: [function(i) {
        var qi = new X.PushQueueItem(null, null, null, null, null, null, null);
        X.APIDeserializer_deserialize(i, qi, null);
        return qi;
      }, null, null, 2, 0, null, 11, [], "call"]
    },
    PushQueueHandler__parseListOfRawItems_closure0: {
      "^": "Closure:1;",
      call$1: [function(n) {
        var t1 = $.$get$Globals_panes();
        return (t1 && C.JSArray_methods).any$1(t1, new T.PushQueueHandler__parseListOfRawItems__closure(n));
      }, null, null, 2, 0, null, 19, [], "call"]
    },
    PushQueueHandler__parseListOfRawItems__closure: {
      "^": "Closure:1;n",
      call$1: function(p) {
        var t1;
        if (p instanceof G.NotifyPane) {
          t1 = p.paneKey._keyParts;
          t1 = t1.length >= 2 ? t1[1] : null;
          t1 = J.$eq$(t1, this.n.get$sid());
        } else
          t1 = false;
        return t1;
      }
    },
    PushQueueHandler_sendToOtherWindows_closure: {
      "^": "Closure:1;",
      call$1: [function(i) {
        var t1 = J.getInterceptor$x(i);
        return P.LinkedHashMap__makeLiteral(["sid", i.get$sid(), "iid", i.get$iid(), "kind", t1.get$kind(i), "why", i.get$why(), "text", t1.get$text(i), "linkText", i.get$linkText(), "linkPaneKey", i.get$linkPaneKey()]);
      }, null, null, 2, 0, null, 11, [], "call"]
    },
    PushQueueHandler_itemsReceived_closure: {
      "^": "Closure:1;",
      call$1: function(i) {
        return !J.$eq$(J.get$kind$x(i), "S");
      }
    },
    PushQueueHandler__removeItem_closure: {
      "^": "Closure:1;item",
      call$1: function(i) {
        return !J.$eq$(J.get$kind$x(i), "N") && J.$eq$(i.get$linkPaneKey(), this.item.get$linkPaneKey());
      }
    },
    PushQueueHandler__removeNotifyItem_closure: {
      "^": "Closure:1;item",
      call$1: function(i) {
        return J.$eq$(J.get$kind$x(i), "N") && J.$eq$(i.get$sid(), this.item.sid);
      }
    },
    PushQueueHandler__rebuildMyStuff_iconHtml: {
      "^": "Closure:60;",
      call$1: function(i) {
        var t1, iconName;
        t1 = J.getInterceptor$x(i);
        if (J.$eq$(t1.get$kind(i), "N"))
          iconName = "panenotify";
        else if (J.$eq$(t1.get$kind(i), "U"))
          iconName = "paneconv";
        else if (J.$eq$(i.get$why(), "V"))
          iconName = "paneproposal";
        else if (J.$eq$(i.get$why(), "I"))
          iconName = "paneconv_invite";
        else if (J.$eq$(i.get$why(), "R"))
          iconName = "paneconv_maybe";
        else
          iconName = J.$eq$(i.get$why(), "B") ? "paneconv_star" : "";
        if (iconName.length === 0)
          return "";
        return '<img src="images/' + iconName + '.png" />';
      }
    },
    PushQueueHandler__rebuildMyStuff_build1: {
      "^": "Closure:18;_box_0,iconHtml",
      call$2: function(title, kind) {
        var s, t1, items, t2, t3, _i, t4, item, text;
        s = new P.StringBuffer("");
        s._contents = "<h2>" + title + "</h2>";
        t1 = $.$get$Globals_pushQueue();
        t1.toString;
        t1 = H.setRuntimeTypeInfo(new H.WhereIterable(t1, new T.PushQueueHandler__rebuildMyStuff_build1_closure(kind)), [H.getTypeArgumentByIndex(t1, 0)]);
        items = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "Iterable", 0));
        for (t1 = items.length, t2 = kind === "N", t3 = this.iconHtml, _i = 0; t4 = items.length, _i < t4; items.length === t1 || (0, H.throwConcurrentModificationError)(items), ++_i) {
          item = items[_i];
          s._contents += "<div>" + H.S(t3.call$1(item)) + " ";
          if (t2) {
            text = J.get$text$x(item);
            if (text == null)
              text = "notification";
            t4 = J.getInterceptor$asx(text);
            if (J.$gt$n(t4.get$length(text), 40))
              text = t4.substring$2(text, 0, 38) + "...";
            t4 = s._contents += '<a href="#notify/' + H.S(item.get$sid()) + '">' + H.S(text) + "</a>";
          } else
            t4 = s._contents += '<a href="#' + H.S(item.get$linkPaneKey()) + '">' + H.S(item.get$linkText()) + "</a>";
          s._contents = t4 + "</div>";
        }
        if (t4 === 0)
          s._contents += "(none)";
        t1 = this._box_0.section;
        t2 = s._contents;
        J.set$innerHtml$x(t1, t2.charCodeAt(0) == 0 ? t2 : t2);
      }
    },
    PushQueueHandler__rebuildMyStuff_build1_closure: {
      "^": "Closure:1;kind",
      call$1: function(i) {
        return J.$eq$(J.get$kind$x(i), this.kind);
      }
    },
    PushQueueHandler_showNext_closure: {
      "^": "Closure:1;",
      call$1: function(i) {
        return J.$eq$(J.get$kind$x(i), "N");
      }
    },
    PushQueueHandler_showNext_closure0: {
      "^": "Closure:4;q",
      call$0: function() {
        var t1 = this.q;
        return (t1 && C.JSArray_methods).firstWhere$2$orElse(t1, new T.PushQueueHandler_showNext__closure(), new T.PushQueueHandler_showNext__closure0(t1));
      }
    },
    PushQueueHandler_showNext__closure: {
      "^": "Closure:1;",
      call$1: function(j) {
        return J.$eq$(J.get$kind$x(j), "U");
      }
    },
    PushQueueHandler_showNext__closure0: {
      "^": "Closure:4;q",
      call$0: function() {
        var t1 = this.q;
        return (t1 && C.JSArray_methods).get$first(t1);
      }
    }
  }], ["", "../client/dialog/resource_dialog.dart",, Z, {
    "^": "",
    ResourceDialog: {
      "^": "DialogBox;resourceId,newCategoryId,_showing,_continuation,_backdrop,frame",
      build$0: function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, t1, isNew, resourceGetArgs, resource, form, titleInput, descInput, t2, kindInput, _i, kindOption, t3, urlInput, bar;
        var $async$build$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.resourceId;
                isNew = J.$eq$(t1, 0);
                resourceGetArgs = new X.ResourceGetRequest(null, null);
                resourceGetArgs.id = t1;
                $async$goto = !isNew ? 2 : 4;
                break;
              case 2:
                // then
                $async$goto = 5;
                return P._asyncHelper(L.RpcLib_resourceGet(resourceGetArgs), $async$build$0, $async$completer);
              case 5:
                // returning from await.
                // goto join
                $async$goto = 3;
                break;
              case 4:
                // else
                $async$result = new X.ResourceGetResponse(new X.APIResponseBase(null, null, "Y", null), null, null, null, null, null, null, null, null, null, null, null, null, null);
              case 3:
                // join
                resource = $async$result;
                form = O.FormBuilder$($async$self.frame, "Resource");
                t1 = J.getInterceptor$x(resource);
                titleInput = form.addInput$4("Title", 400, 500, t1.get$title(resource));
                descInput = form.addTextArea$5("Description", 400, 90, 10000, t1.get$description(resource));
                t2 = document;
                kindInput = t2.createElement("select");
                for (t2 = $.$get$Globals_allResourceKinds(), _i = 0; _i < 7; ++_i) {
                  kindOption = t2[_i];
                  t3 = W.OptionElement_OptionElement$_("", "", null, false);
                  t3.value = kindOption;
                  t3.textContent = kindOption;
                  kindInput.appendChild(t3);
                }
                J.set$value$x(kindInput, t1.get$kind(resource));
                form.addAny$2("Resource kind", kindInput);
                urlInput = form.addInput$4("Web URL", 400, 1000, t1.get$url(resource));
                bar = M.ButtonBarBuilder$($async$self.frame, null);
                bar.addButton$2("Save", new Z.ResourceDialog_build_closure($async$self, isNew, titleInput, descInput, kindInput, urlInput, new Z.ResourceDialog_build_isValid($async$self, form, titleInput)));
                bar.addButton$2("Cancel", new Z.ResourceDialog_build_closure0($async$self));
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$build$0, $async$completer, null);
      }
    },
    ResourceDialog_build_isValid: {
      "^": "Closure:19;$this,form,titleInput",
      call$0: function() {
        if (J.trim$0$s(J.get$value$x(this.titleInput)).length === 0) {
          var t1 = this.form._form_builder$_error;
          t1.textContent = "Title required";
          J.scrollIntoView$0$x(t1);
          return false;
        }
        return true;
      }
    },
    ResourceDialog_build_closure: {
      "^": "Closure:6;$this,isNew,titleInput,descInput,kindInput,urlInput,isValid",
      call$1: function(e) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, t1, t2, url, saveArgs, t3;
        var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.urlInput;
                t2 = J.getInterceptor$x(t1);
                url = J.trim$0$s(t2.get$value(t1));
                if (!C.JSString_methods.contains$1(url, "://")) {
                  t2.set$value(t1, "http://" + url);
                  t1 = {life: 5000};
                  self.jQuery.jGrowl("Your web URL was corrected; please double check it and try again.", t1);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                if ($async$self.isValid.call$0() !== true) {
                  // goto return
                  $async$goto = 1;
                  break;
                }
                saveArgs = new X.ResourceSaveRequest(null, null, null, null, null, null, null);
                t3 = $async$self.$this;
                saveArgs.id = t3.resourceId;
                saveArgs.categoryId = t3.newCategoryId;
                saveArgs.title = J.trim$0$s(J.get$value$x($async$self.titleInput));
                saveArgs.description = J.trim$0$s(J.get$value$x($async$self.descInput));
                saveArgs.kind = J.get$value$x($async$self.kindInput);
                saveArgs.url = J.trim$0$s(t2.get$value(t1));
                $async$goto = 3;
                return P._asyncHelper(L.RpcLib_command("ResourceSave", saveArgs), $async$call$1, $async$completer);
              case 3:
                // returning from await.
                if ($async$result.get$isOK()) {
                  t3.hide$1(true);
                  if ($async$self.isNew)
                    F.Messages_criticalMessage("The new resource will be reviewed by admins, then posted later.");
                  else {
                    t1 = {life: 5000};
                    self.jQuery.jGrowl("Resource saved.", t1);
                  }
                }
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$call$1, $async$completer, null);
      }
    },
    ResourceDialog_build_closure0: {
      "^": "Closure:1;$this",
      call$1: function(e) {
        this.$this.hide$1(false);
      }
    }
  }], ["", "../client/pane/resource_pane.dart",, E, {
    "^": "",
    ResourcePane: {
      "^": "BasePane;_resourceId,_resource_pane$_clickedInCode,_isCollapsed,paneKey,borderId,borderElement,bodyId,bodyElement,paneMenuBar,onCollapse,onChanePaneKey",
      init$1: function(pk) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, t1, t2, resource, t3, card, c, t4, t5, importantCheck, removeCheck, handleCheckbox, loggedIn, editable;
        var $async$init$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return P._asyncHelper($async$self.super$BasePane$init(pk), $async$init$1, $async$completer);
              case 3:
                // returning from await.
                t1 = pk._keyParts;
                if (1 >= t1.length) {
                  $async$returnValue = H.ioore(t1, 1);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t1 = H.Primitives_parseInt(t1[1], null, null);
                $async$self._resourceId = t1;
                t2 = new X.ResourceGetRequest(null, null);
                t2.id = t1;
                $async$goto = 4;
                return P._asyncHelper(L.RpcLib_resourceGet(t2), $async$init$1, $async$completer);
              case 4:
                // returning from await.
                resource = $async$result;
                t2 = J.getInterceptor$x(resource);
                $async$self.buildSkeletonHtml2$4$iconHoverText$iconName$paneClass$title("Resource", "paneresource", "resource", t2.get$title(resource));
                t1 = $async$self.bodyElement;
                t1.textContent = "";
                t3 = document;
                t3 = t3.createElement("table");
                t3.className = "cardtable";
                card = new Q.CardBuilder(null, t3);
                card._card_builder$_parent = t1;
                t1.appendChild(t3);
                card.addText$2("Title", t2.get$title(resource));
                if (t2.get$url(resource) != null && J.$gt$n(J.get$length$asx(t2.get$url(resource)), 0)) {
                  t1 = t2.get$url(resource);
                  t3 = t2.get$url(resource);
                  c = card.addAny$1("Web URL");
                  t4 = W.AnchorElement_AnchorElement(null);
                  t5 = J.getInterceptor$x(t4);
                  t5.set$href(t4, t3);
                  t4.textContent = t1;
                  t5.set$target(t4, "_blank");
                  c.appendChild(t4);
                }
                card.addText$2("Description", t2.get$description(resource));
                t1 = resource.get$nick();
                t3 = "user/" + H.S(resource.get$userId());
                V.HtmlLib_appendLinkToPane(card.addAny$1("Created by"), t1, t3, true);
                if (!J.$eq$(t2.get$visible(resource), "Y"))
                  card.addText$2("Hidden", "This resource is not visible because users marked it as inappropriate.");
                t1 = new E.ResourcePane_init_add1Checkbox(card.addAny$1("My vote"));
                importantCheck = t1.call$2(J.$eq$(resource.get$userKind(), "I"), "Important");
                removeCheck = t1.call$2(J.$eq$(resource.get$userKind(), "R"), "Remove");
                handleCheckbox = new E.ResourcePane_init_closure($async$self, importantCheck, removeCheck);
                t1 = J.get$onChange$x(importantCheck);
                H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(handleCheckbox), false), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
                t1 = J.get$onChange$x(removeCheck);
                H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(handleCheckbox), false), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
                loggedIn = !J.$eq$($.Globals_userId, 0);
                editable = J.$eq$(resource.get$isCreator(), "Y") || J.$eq$(resource.get$isSiteAdmin(), "Y");
                if (loggedIn && editable)
                  $async$self.paneMenuBar.addButton$2("Edit", new E.ResourcePane_init_closure0($async$self));
                if (loggedIn && J.$eq$(resource.get$isSiteAdmin(), "Y") && J.$eq$(t2.get$visible(resource), "N")) {
                  $async$self.paneMenuBar.addButton$2("Delete", new E.ResourcePane_init_closure1($async$self));
                  $async$self.paneMenuBar.addButton$2("Reset To Visible", new E.ResourcePane_init_closure2($async$self));
                }
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$init$1, $async$completer, null);
      },
      _resource_pane$_handleVote$2: function(important, remove) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, vote, req;
        var $async$_resource_pane$_handleVote$2 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                if (important === true)
                  vote = "I";
                else
                  vote = remove === true ? "R" : null;
                if (!F.Messages_checkLoggedIn()) {
                  // goto return
                  $async$goto = 1;
                  break;
                }
                req = new X.ResourceUserSaveRequest(null, null, null);
                req.id = $async$self._resourceId;
                req.kind = vote;
                $async$goto = 3;
                return P._asyncHelper(L.RpcLib_command("ResourceUserSave", req), $async$_resource_pane$_handleVote$2, $async$completer);
              case 3:
                // returning from await.
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$_resource_pane$_handleVote$2, $async$completer, null);
      }
    },
    ResourcePane_init_add1Checkbox: {
      "^": "Closure:22;myVoteCell",
      call$2: function(value, text) {
        var t1, div, chk;
        t1 = document;
        div = t1.createElement("div");
        chk = W.InputElement_InputElement("checkbox");
        J.set$checked$x(chk, value);
        div.appendChild(chk);
        t1 = " " + text;
        div.appendChild(document.createTextNode(t1));
        this.myVoteCell.appendChild(div);
        return chk;
      }
    },
    ResourcePane_init_closure: {
      "^": "Closure:1;$this,importantCheck,removeCheck",
      call$1: [function(e) {
        var t1, t2, t3;
        t1 = this.$this;
        if (t1._resource_pane$_clickedInCode)
          return;
        t1._resource_pane$_clickedInCode = true;
        t2 = J.getInterceptor$x(e);
        if (J.get$checked$x(t2.get$target(e)) === true) {
          t3 = this.importantCheck;
          if (J.$eq$(t2.get$target(e), t3))
            J.set$checked$x(this.removeCheck, false);
          if (J.$eq$(t2.get$target(e), this.removeCheck))
            J.set$checked$x(t3, false);
        }
        t1._resource_pane$_clickedInCode = false;
        t1._resource_pane$_handleVote$2(J.get$checked$x(this.importantCheck), J.get$checked$x(this.removeCheck));
      }, null, null, 2, 0, null, 0, [], "call"]
    },
    ResourcePane_init_closure0: {
      "^": "Closure:6;$this",
      call$1: function(e) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, t1, editDialog;
        var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.$this;
                editDialog = new Z.ResourceDialog(t1._resourceId, 0, false, null, null, null);
                editDialog.DialogBox$0();
                $async$goto = 2;
                return P._asyncHelper(editDialog.show$0(0), $async$call$1, $async$completer);
              case 2:
                // returning from await.
                if ($async$result === true)
                  A.PaneFactory_create(t1.paneKey, true);
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$call$1, $async$completer, null);
      }
    },
    ResourcePane_init_closure1: {
      "^": "Closure:6;$this",
      call$1: function(e) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, t1, t2;
        var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = new X.ResourceTriageRequest(null, null, null);
                t2 = $async$self.$this;
                t1.id = t2._resourceId;
                t1.mode = "D";
                $async$goto = 2;
                return P._asyncHelper(L.RpcLib_command("ResourceTriage", t1), $async$call$1, $async$completer);
              case 2:
                // returning from await.
                A.PaneFactory_delete(t2);
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$call$1, $async$completer, null);
      }
    },
    ResourcePane_init_closure2: {
      "^": "Closure:6;$this",
      call$1: function(e) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, t1, t2;
        var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = new X.ResourceTriageRequest(null, null, null);
                t2 = $async$self.$this;
                t1.id = t2._resourceId;
                t1.mode = "R";
                $async$goto = 2;
                return P._asyncHelper(L.RpcLib_command("ResourceTriage", t1), $async$call$1, $async$completer);
              case 2:
                // returning from await.
                A.PaneFactory_create(t2.paneKey, true);
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$call$1, $async$completer, null);
      }
    }
  }], ["", "../client/pane/resource_search_pane.dart",, T, {
    "^": "",
    ResourceSearchPane: {
      "^": "BasePane;_resource_search_pane$_resultDiv,_isCollapsed,paneKey,borderId,borderElement,bodyId,bodyElement,paneMenuBar,onCollapse,onChanePaneKey",
      init$1: function(pk) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, t1, t2, t3, form, titleInp, kindInput, _i, kindOption;
        var $async$init$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 2;
                return P._asyncHelper($async$self.super$BasePane$init(pk), $async$init$1, $async$completer);
              case 2:
                // returning from await.
                $async$self.buildSkeletonHtml2$3$iconName$paneClass$title("paneresource", "resources", "Resource Search");
                t1 = $async$self.bodyElement;
                t1.textContent = "";
                t1 = V.HtmlLib_appendScrollingDiv(t1, 200);
                t2 = t1.style;
                t3 = C.JSInt_methods.toString$0(6) + "px";
                t2.marginBottom = t3;
                t2 = t1.style;
                t2.display = "hidden";
                $async$self._resource_search_pane$_resultDiv = t1;
                form = O.FormBuilder$($async$self.bodyElement, "Criteria");
                titleInp = form.addInput$3("Title", 100, 50);
                t1 = document;
                kindInput = t1.createElement("select");
                kindInput.appendChild(W.OptionElement_OptionElement$_("", "", null, false));
                for (t1 = $.$get$Globals_allResourceKinds(), _i = 0; _i < 7; ++_i) {
                  kindOption = t1[_i];
                  t2 = W.OptionElement_OptionElement$_("", "", null, false);
                  t2.value = kindOption;
                  t2.textContent = kindOption;
                  kindInput.appendChild(t2);
                }
                form.addAny$2("Kind", kindInput);
                $async$self.paneMenuBar.addButton$2("Search", new T.ResourceSearchPane_init_closure($async$self, titleInp, kindInput));
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$init$1, $async$completer, null);
      },
      _resource_search_pane$_doSearch$2: function(title, kind) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, t1, t2, response, res, t3, itemDiv, t4, t5, e, t6;
        var $async$_resource_search_pane$_doSearch$2 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self._resource_search_pane$_resultDiv;
                t2 = t1.style;
                t2.display = "block";
                J.set$innerHtml$x(t1, "Loading...");
                t1 = new X.ResourceQueryRequest(null, null, null, null);
                t1.title = title;
                t1.kind = kind;
                $async$goto = 2;
                return P._asyncHelper(L.RpcLib_resourceQuery(t1), $async$_resource_search_pane$_doSearch$2, $async$completer);
              case 2:
                // returning from await.
                response = $async$result;
                J.set$innerHtml$x($async$self._resource_search_pane$_resultDiv, "");
                for (t1 = J.getInterceptor$x(response), t2 = J.get$iterator$ax(t1.get$items(response)); t2.moveNext$0();) {
                  res = t2.get$current();
                  t3 = document;
                  itemDiv = t3.createElement("div");
                  itemDiv.className = "space1";
                  $async$self._resource_search_pane$_resultDiv.appendChild(itemDiv);
                  t3 = J.getInterceptor$x(res);
                  if (t3.get$url(res) != null && J.$gt$n(J.get$length$asx(t3.get$url(res)), 0)) {
                    t4 = t3.get$url(res);
                    t5 = document;
                    e = t5.createElement("a");
                    if (t4 != null)
                      J.set$href$x(e, t4);
                    t4 = J.getInterceptor$x(e);
                    t4.set$innerHtml(e, '<img src="images/ext_link.png"/>');
                    t4.set$target(e, "_blank");
                    itemDiv.appendChild(e);
                    itemDiv.appendChild(document.createTextNode(" "));
                  }
                  t4 = t3.get$title(res);
                  t5 = "resource/" + H.S(t3.get$id(res));
                  t6 = document;
                  e = t6.createElement("a");
                  J.set$href$x(e, "#" + t5);
                  e.textContent = t4;
                  itemDiv.appendChild(e);
                  itemDiv.appendChild(document.createTextNode(" - "));
                  V.HtmlLib_insertCollapsed1(itemDiv, t3.get$description(res), 150, false, null);
                }
                if (J.$eq$(J.get$length$asx(t1.get$items(response)), 0)) {
                  t1 = $async$self._resource_search_pane$_resultDiv;
                  t1.toString;
                  t1.appendChild(document.createTextNode("(none)"));
                }
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$_resource_search_pane$_doSearch$2, $async$completer, null);
      }
    },
    ResourceSearchPane_init_closure: {
      "^": "Closure:1;$this,titleInp,kindInput",
      call$1: function(e) {
        return this.$this._resource_search_pane$_doSearch$2(J.trim$0$s(J.get$value$x(this.titleInp)), J.get$value$x(this.kindInput));
      }
    }
  }], ["", "../client/pane/resource_tree_pane.dart",, T, {
    "^": "",
    ResourceTreePane: {
      "^": "BaseTreePane;_resourceCount,_resources,paneClass,paneTitle,categoryKind,paneIconName,_topCats,_allCats,_detailBox,_selectedCatId,_selectedCat,_isCollapsed,paneKey,borderId,borderElement,bodyId,bodyElement,paneMenuBar,onCollapse,onChanePaneKey",
      init$1: function(pk) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this;
        var $async$init$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$self.paneClass = "resourcetree";
                $async$self.paneTitle = "Resource Categories";
                $async$self.paneIconName = "paneresource";
                $async$self.categoryKind = "R";
                $async$goto = 2;
                return P._asyncHelper($async$self.super$BaseTreePane$init(pk), $async$init$1, $async$completer);
              case 2:
                // returning from await.
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$init$1, $async$completer, null);
      },
      insertDetails$2: function(detailBox, catId) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, t1, re, t2, pdiv, t3, e, t4, $async$temp1;
        var $async$insertDetails$2 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = new X.ResourceQueryRequest(null, null, null, null);
                t1.categoryId = catId;
                $async$temp1 = $async$self;
                $async$goto = 2;
                return P._asyncHelper(L.RpcLib_resourceQuery(t1), $async$insertDetails$2, $async$completer);
              case 2:
                // returning from await.
                $async$temp1._resources = $async$result;
                t1 = document;
                t1 = t1.createElement("h3");
                t1.textContent = "Resources in this category";
                detailBox.appendChild(t1);
                for (t1 = J.get$iterator$ax(J.get$items$x($async$self._resources)); t1.moveNext$0();) {
                  re = t1.get$current();
                  t2 = document;
                  pdiv = t2.createElement("div");
                  t2 = J.getInterceptor$x(re);
                  if (t2.get$url(re) != null && J.$gt$n(J.get$length$asx(t2.get$url(re)), 0)) {
                    t3 = document;
                    e = t3.createElement("a");
                    t3 = J.getInterceptor$x(e);
                    t3.set$target(e, "_blank");
                    t3.set$href(e, t2.get$url(re));
                    e.appendChild(W.ImageElement_ImageElement(null, "images/ext_link.png", null));
                    pdiv.appendChild(e);
                  }
                  t3 = t2.get$title(re);
                  t2 = "resource/" + H.S(t2.get$id(re));
                  t4 = document;
                  e = t4.createElement("a");
                  J.set$href$x(e, "#" + t2);
                  e.textContent = t3;
                  pdiv.appendChild(e);
                  detailBox.appendChild(pdiv);
                }
                if (J.$eq$(J.get$length$asx(J.get$items$x($async$self._resources)), 0))
                  detailBox.appendChild(document.createTextNode("(none)"));
                $async$self._resourceCount = J.get$length$asx(J.get$items$x($async$self._resources));
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$insertDetails$2, $async$completer, null);
      },
      insertDetailButtons$2: function(bar, catId) {
        bar.addButton$2("Create Resource", new T.ResourceTreePane_insertDetailButtons_closure(this, catId));
      },
      getContentTitles$0: function() {
        return J.map$1$ax(J.get$items$x(this._resources), new T.ResourceTreePane_getContentTitles_closure()).toList$0(0);
      },
      getContentIds$1: function(contentTitles) {
        return J.map$1$ax(contentTitles, new T.ResourceTreePane_getContentIds_closure(this)).where$1(0, new T.ResourceTreePane_getContentIds_closure0()).toList$0(0);
      }
    },
    ResourceTreePane_insertDetailButtons_closure: {
      "^": "Closure:1;$this,catId",
      call$1: function(e) {
        var t1, dlg;
        if (J.$ge$n(this.$this._resourceCount, 100)) {
          t1 = {life: 5000};
          self.jQuery.jGrowl("There are too many resources in this category. Please choose a more detailed sub-category.", t1);
          return;
        }
        dlg = new Z.ResourceDialog(0, this.catId, false, null, null, null);
        dlg.DialogBox$0();
        dlg.show$0(0);
      }
    },
    ResourceTreePane_getContentTitles_closure: {
      "^": "Closure:1;",
      call$1: [function(i) {
        return J.get$title$x(i);
      }, null, null, 2, 0, null, 11, [], "call"]
    },
    ResourceTreePane_getContentIds_closure: {
      "^": "Closure:1;$this",
      call$1: [function(s) {
        var matches, t1;
        matches = J.where$1$ax(J.get$items$x(this.$this._resources), new T.ResourceTreePane_getContentIds__closure(s)).toList$0(0);
        t1 = J.getInterceptor$asx(matches);
        if (t1.get$length(matches) > 0)
          return J.get$id$x(t1.$index(matches, 0));
        return;
      }, null, null, 2, 0, null, 8, [], "call"]
    },
    ResourceTreePane_getContentIds__closure: {
      "^": "Closure:1;s",
      call$1: function(i) {
        return J.$eq$(J.get$title$x(i), this.s);
      }
    },
    ResourceTreePane_getContentIds_closure0: {
      "^": "Closure:1;",
      call$1: function(i) {
        return i != null;
      }
    }
  }], ["", "../client/pane/root_docs_pane.dart",, E, {
    "^": "",
    RootDocsPane: {
      "^": "BasePane;_isCollapsed,paneKey,borderId,borderElement,bodyId,bodyElement,paneMenuBar,onCollapse,onChanePaneKey",
      init$1: function(pk) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, t1, docs, item, t2, t3, t4, t5, e;
        var $async$init$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 2;
                return P._asyncHelper($async$self.super$BasePane$init(pk), $async$init$1, $async$completer);
              case 2:
                // returning from await.
                t1 = new X.DocQueryRequest(null, null);
                t1.mode = "R";
                $async$goto = 3;
                return P._asyncHelper(L.RpcLib_docQuery(t1), $async$init$1, $async$completer);
              case 3:
                // returning from await.
                docs = $async$result;
                $async$self.buildSkeletonHtml2$3$iconName$paneClass$title("panedoc", "rootdocs", "Documents");
                $async$self.bodyElement.textContent = "";
                for (t1 = J.get$iterator$ax(docs.get$docs()); t1.moveNext$0();) {
                  item = t1.get$current();
                  t2 = $async$self.bodyElement;
                  t3 = J.getInterceptor$x(item);
                  t4 = t3.get$title(item);
                  t3 = "doc/" + H.S(t3.get$id(item));
                  t5 = document;
                  e = t5.createElement("a");
                  J.set$href$x(e, "#" + t3);
                  e.textContent = t4;
                  t3 = e.style;
                  t3.display = "block";
                  t2.appendChild(e);
                }
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$init$1, $async$completer, null);
      }
    }
  }], ["", "../client/rpc_lib.dart",, L, {
    "^": "",
    RpcLib_rpcAsMap: function(method, args) {
      var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, t1, url, argsmap, js, $async$temp1, $async$temp2;
      var $async$RpcLib_rpcAsMap = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $.RpcLib_serverBaseUrl;
              if (t1 == null) {
                $async$returnValue = t1.$add();
                // goto return
                $async$goto = 1;
                break;
              }
              url = t1 + method;
              argsmap = H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [P.String, null]);
              argsmap.$indexSet(0, "base", P.LinkedHashMap__makeLiteral(["nick", $.Globals_nick, "password", $.Globals_password]));
              X.APISerializer_membersToMap(args, argsmap);
              js = C.JsonCodec_null_null.encode$1(argsmap);
              $async$temp1 = C.JsonCodec_null_null;
              $async$temp2 = J;
              $async$goto = 3;
              return P._asyncHelper(W.HttpRequest_request(url, "POST", null, null, P.LinkedHashMap__makeLiteral(["Content-Type", "application/json"]), "text", js, null), $async$RpcLib_rpcAsMap, $async$completer);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1.decode$1($async$temp2.get$responseText$x($async$result));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncHelper($async$returnValue, 0, $async$completer, null);
            case 2:
              // rethrow
              return P._asyncHelper($async$currentError, 1, $async$completer);
          }
      });
      return P._asyncHelper(null, $async$RpcLib_rpcAsMap, $async$completer, null);
    },
    RpcLib_command: function(command, req) {
      var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, ret, $async$temp1;
      var $async$RpcLib_command = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              ret = new X.APIResponseBase(null, null, "Y", null);
              $async$temp1 = X;
              $async$goto = 3;
              return P._asyncHelper(L.RpcLib_rpcAsMap(command, req), $async$RpcLib_command, $async$completer);
            case 3:
              // returning from await.
              $async$temp1.APIDeserializer_deserialize($async$result, ret, null);
              F.Messages_showAPIError(ret);
              $async$returnValue = ret;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncHelper($async$returnValue, 0, $async$completer, null);
            case 2:
              // rethrow
              return P._asyncHelper($async$currentError, 1, $async$completer);
          }
      });
      return P._asyncHelper(null, $async$RpcLib_command, $async$completer, null);
    },
    RpcLib_authenticate: function(req) {
      var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, t1, auth, $async$temp1;
      var $async$RpcLib_authenticate = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = new X.APIResponseBase(null, null, "Y", null);
              auth = new X.AuthenticateResponse(t1, null, null, null, null);
              $async$temp1 = X;
              $async$goto = 3;
              return P._asyncHelper(L.RpcLib_rpcAsMap("Authenticate", req), $async$RpcLib_authenticate, $async$completer);
            case 3:
              // returning from await.
              $async$temp1.APIDeserializer_deserialize($async$result, auth, t1);
              $async$returnValue = auth;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncHelper($async$returnValue, 0, $async$completer, null);
            case 2:
              // rethrow
              return P._asyncHelper($async$currentError, 1, $async$completer);
          }
      });
      return P._asyncHelper(null, $async$RpcLib_authenticate, $async$completer, null);
    },
    RpcLib_userGet: function(req) {
      var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, raw, t1, ret, t2, c;
      var $async$RpcLib_userGet = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncHelper(L.RpcLib_rpcAsMap("UserGet", req), $async$RpcLib_userGet, $async$completer);
            case 3:
              // returning from await.
              raw = $async$result;
              t1 = new X.APIResponseBase(null, null, "Y", null);
              ret = new X.UserGetResponse(t1, null, null, null, null, null, null, "N", null, null, null, null, null, null, null, null);
              X.APIDeserializer_deserialize(raw, ret, t1);
              F.Messages_showAPIError(ret.base);
              t1 = J.getInterceptor$asx(raw);
              ret.allTimeZones = t1.$index(raw, "allTimeZones");
              ret.publicLinks = t1.$index(raw, "publicLinks");
              ret.events = H.setRuntimeTypeInfo([], [X.APIResponseAssociation]);
              ret.projects = H.setRuntimeTypeInfo([], [X.APIResponseAssociation]);
              ret.resources = H.setRuntimeTypeInfo([], [X.APIResponseAssociation]);
              for (t2 = J.get$iterator$ax(t1.$index(raw, "events")); t2.moveNext$0();) {
                c = new X.APIResponseAssociation(null, null);
                X.APIDeserializer_deserialize(t2.get$current(), c, null);
                J.add$1$ax(ret.events, c);
              }
              for (t2 = J.get$iterator$ax(t1.$index(raw, "projects")); t2.moveNext$0();) {
                c = new X.APIResponseAssociation(null, null);
                X.APIDeserializer_deserialize(t2.get$current(), c, null);
                J.add$1$ax(ret.projects, c);
              }
              for (t1 = J.get$iterator$ax(t1.$index(raw, "resources")); t1.moveNext$0();) {
                c = new X.APIResponseAssociation(null, null);
                X.APIDeserializer_deserialize(t1.get$current(), c, null);
                J.add$1$ax(ret.resources, c);
              }
              $async$returnValue = ret;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncHelper($async$returnValue, 0, $async$completer, null);
            case 2:
              // rethrow
              return P._asyncHelper($async$currentError, 1, $async$completer);
          }
      });
      return P._asyncHelper(null, $async$RpcLib_userGet, $async$completer, null);
    },
    RpcLib_categoryQuery: function(req) {
      var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, raw, t1, ret, c;
      var $async$RpcLib_categoryQuery = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncHelper(L.RpcLib_rpcAsMap("CategoryQuery", req), $async$RpcLib_categoryQuery, $async$completer);
            case 3:
              // returning from await.
              raw = $async$result;
              t1 = new X.APIResponseBase(null, null, "Y", null);
              ret = new X.CategoryQueryResponse(t1, null);
              X.APIDeserializer_deserialize(raw, ret, t1);
              F.Messages_showAPIError(ret.base);
              ret.categories = H.setRuntimeTypeInfo([], [X.CategoryItemResponse]);
              for (t1 = J.get$iterator$ax(J.$index$asx(raw, "categories")); t1.moveNext$0();) {
                c = new X.CategoryItemResponse(null, null, null, null);
                X.APIDeserializer_deserialize(t1.get$current(), c, null);
                J.add$1$ax(ret.categories, c);
              }
              $async$returnValue = ret;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncHelper($async$returnValue, 0, $async$completer, null);
            case 2:
              // rethrow
              return P._asyncHelper($async$currentError, 1, $async$completer);
          }
      });
      return P._asyncHelper(null, $async$RpcLib_categoryQuery, $async$completer, null);
    },
    RpcLib_projectQuery: function(req) {
      var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, raw, t1, ret, c;
      var $async$RpcLib_projectQuery = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncHelper(L.RpcLib_rpcAsMap("ProjectQuery", req), $async$RpcLib_projectQuery, $async$completer);
            case 3:
              // returning from await.
              raw = $async$result;
              t1 = new X.APIResponseBase(null, null, "Y", null);
              ret = new X.ProjectQueryResponse(t1, null);
              X.APIDeserializer_deserialize(raw, ret, t1);
              F.Messages_showAPIError(ret.base);
              ret.projects = H.setRuntimeTypeInfo([], [X.ProjectQueryItem]);
              for (t1 = J.get$iterator$ax(J.$index$asx(raw, "projects")); t1.moveNext$0();) {
                c = new X.ProjectQueryItem(null, null, null, null, null);
                X.APIDeserializer_deserialize(t1.get$current(), c, null);
                J.add$1$ax(ret.projects, c);
              }
              $async$returnValue = ret;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncHelper($async$returnValue, 0, $async$completer, null);
            case 2:
              // rethrow
              return P._asyncHelper($async$currentError, 1, $async$completer);
          }
      });
      return P._asyncHelper(null, $async$RpcLib_projectQuery, $async$completer, null);
    },
    RpcLib_projectUserQuery: function(req) {
      var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, raw, t1, ret, c;
      var $async$RpcLib_projectUserQuery = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncHelper(L.RpcLib_rpcAsMap("ProjectUserQuery", req), $async$RpcLib_projectUserQuery, $async$completer);
            case 3:
              // returning from await.
              raw = $async$result;
              t1 = new X.APIResponseBase(null, null, "Y", null);
              ret = new X.ProjectUserQueryResponse(t1, null, null, null, null);
              X.APIDeserializer_deserialize(raw, ret, t1);
              F.Messages_showAPIError(ret.base);
              ret.users = H.setRuntimeTypeInfo([], [X.ProjectUserItem]);
              for (t1 = J.get$iterator$ax(J.$index$asx(raw, "users")); t1.moveNext$0();) {
                c = new X.ProjectUserItem(null, null, null, null, null, null, null);
                X.APIDeserializer_deserialize(t1.get$current(), c, null);
                J.add$1$ax(ret.users, c);
              }
              $async$returnValue = ret;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncHelper($async$returnValue, 0, $async$completer, null);
            case 2:
              // rethrow
              return P._asyncHelper($async$currentError, 1, $async$completer);
          }
      });
      return P._asyncHelper(null, $async$RpcLib_projectUserQuery, $async$completer, null);
    },
    RpcLib_projectGet: function(req) {
      var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, raw, t1, ret, t2, c;
      var $async$RpcLib_projectGet = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncHelper(L.RpcLib_rpcAsMap("ProjectGet", req), $async$RpcLib_projectGet, $async$completer);
            case 3:
              // returning from await.
              raw = $async$result;
              t1 = new X.APIResponseBase(null, null, "Y", null);
              ret = new X.ProjectGetResponse(t1, null, null, null, null, null, null, null, null, null, null);
              X.APIDeserializer_deserialize(raw, ret, t1);
              F.Messages_showAPIError(ret.base);
              ret.proposals = H.setRuntimeTypeInfo([], [X.ProjectProposalItem]);
              for (t1 = J.getInterceptor$asx(raw), t2 = J.get$iterator$ax(t1.$index(raw, "proposals")); t2.moveNext$0();) {
                c = new X.ProjectProposalItem(null, null, null, null);
                X.APIDeserializer_deserialize(t2.get$current(), c, null);
                J.add$1$ax(ret.proposals, c);
              }
              ret.convs = H.setRuntimeTypeInfo([], [X.ProjectConvItem]);
              for (t2 = J.get$iterator$ax(t1.$index(raw, "convs")); t2.moveNext$0();) {
                c = new X.ProjectConvItem(null, null, null, null);
                X.APIDeserializer_deserialize(t2.get$current(), c, null);
                J.add$1$ax(ret.convs, c);
              }
              ret.docs = H.setRuntimeTypeInfo([], [X.ProjectDocItem]);
              for (t1 = J.get$iterator$ax(t1.$index(raw, "docs")); t1.moveNext$0();) {
                c = new X.ProjectDocItem(null, null);
                X.APIDeserializer_deserialize(t1.get$current(), c, null);
                J.add$1$ax(ret.docs, c);
              }
              $async$returnValue = ret;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncHelper($async$returnValue, 0, $async$completer, null);
            case 2:
              // rethrow
              return P._asyncHelper($async$currentError, 1, $async$completer);
          }
      });
      return P._asyncHelper(null, $async$RpcLib_projectGet, $async$completer, null);
    },
    RpcLib_proposalQuery: function(req) {
      var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, raw, t1, ret, c;
      var $async$RpcLib_proposalQuery = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncHelper(L.RpcLib_rpcAsMap("ProposalQuery", req), $async$RpcLib_proposalQuery, $async$completer);
            case 3:
              // returning from await.
              raw = $async$result;
              t1 = new X.APIResponseBase(null, null, "Y", null);
              ret = new X.ProposalQueryResponse(t1, null);
              X.APIDeserializer_deserialize(raw, ret, t1);
              F.Messages_showAPIError(ret.base);
              ret.items = H.setRuntimeTypeInfo([], [X.ProposalQueryItem]);
              for (t1 = J.get$iterator$ax(J.$index$asx(raw, "items")); t1.moveNext$0();) {
                c = new X.ProposalQueryItem(null, null, null);
                X.APIDeserializer_deserialize(t1.get$current(), c, null);
                J.add$1$ax(ret.items, c);
              }
              $async$returnValue = ret;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncHelper($async$returnValue, 0, $async$completer, null);
            case 2:
              // rethrow
              return P._asyncHelper($async$currentError, 1, $async$completer);
          }
      });
      return P._asyncHelper(null, $async$RpcLib_proposalQuery, $async$completer, null);
    },
    RpcLib_proposalGet: function(req) {
      var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, raw, t1, ret, c;
      var $async$RpcLib_proposalGet = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncHelper(L.RpcLib_rpcAsMap("ProposalGet", req), $async$RpcLib_proposalGet, $async$completer);
            case 3:
              // returning from await.
              raw = $async$result;
              t1 = new X.APIResponseBase(null, null, "Y", null);
              ret = new X.ProposalGetResponse(t1, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
              X.APIDeserializer_deserialize(raw, ret, t1);
              F.Messages_showAPIError(ret.base);
              ret.options = H.setRuntimeTypeInfo([], [X.ProposalOptionItem]);
              for (t1 = J.get$iterator$ax(J.$index$asx(raw, "options")); t1.moveNext$0();) {
                c = new X.ProposalOptionItem(null, null, null);
                X.APIDeserializer_deserialize(t1.get$current(), c, null);
                J.add$1$ax(ret.options, c);
              }
              $async$returnValue = ret;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncHelper($async$returnValue, 0, $async$completer, null);
            case 2:
              // rethrow
              return P._asyncHelper($async$currentError, 1, $async$completer);
          }
      });
      return P._asyncHelper(null, $async$RpcLib_proposalGet, $async$completer, null);
    },
    RpcLib_convQuery: function(req) {
      var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, raw, t1, ret, m1, c, t2, p;
      var $async$RpcLib_convQuery = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncHelper(L.RpcLib_rpcAsMap("ConvQuery", req), $async$RpcLib_convQuery, $async$completer);
            case 3:
              // returning from await.
              raw = $async$result;
              t1 = new X.APIResponseBase(null, null, "Y", null);
              ret = new X.ConvQueryResponse(t1, null);
              X.APIDeserializer_deserialize(raw, ret, t1);
              F.Messages_showAPIError(ret.base);
              ret.convs = H.setRuntimeTypeInfo([], [X.ConvQueryConvItemResponse]);
              for (t1 = J.get$iterator$ax(J.$index$asx(raw, "convs")); t1.moveNext$0();) {
                m1 = t1.get$current();
                c = new X.ConvQueryConvItemResponse(null, null, null);
                X.APIDeserializer_deserialize(m1, c, null);
                J.add$1$ax(ret.convs, c);
                c.posts = H.setRuntimeTypeInfo([], [X.ConvQueryPostItemResponse]);
                t2 = J.getInterceptor$asx(m1);
                if (t2.$index(m1, "posts") != null)
                  for (t2 = J.get$iterator$ax(t2.$index(m1, "posts")); t2.moveNext$0();) {
                    p = new X.ConvQueryPostItemResponse(null, null);
                    X.APIDeserializer_deserialize(t2.get$current(), p, null);
                    J.add$1$ax(c.posts, p);
                  }
              }
              $async$returnValue = ret;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncHelper($async$returnValue, 0, $async$completer, null);
            case 2:
              // rethrow
              return P._asyncHelper($async$currentError, 1, $async$completer);
          }
      });
      return P._asyncHelper(null, $async$RpcLib_convQuery, $async$completer, null);
    },
    RpcLib_convGet: function(req) {
      var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, raw, t1, ret, c;
      var $async$RpcLib_convGet = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncHelper(L.RpcLib_rpcAsMap("ConvGet", req), $async$RpcLib_convGet, $async$completer);
            case 3:
              // returning from await.
              raw = $async$result;
              t1 = new X.APIResponseBase(null, null, "Y", null);
              ret = new X.ConvGetResponse(t1, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
              X.APIDeserializer_deserialize(raw, ret, t1);
              F.Messages_showAPIError(ret.base);
              ret.posts = H.setRuntimeTypeInfo([], [X.ConvGetPostItem]);
              for (t1 = J.get$iterator$ax(J.$index$asx(raw, "posts")); t1.moveNext$0();) {
                c = new X.ConvGetPostItem(null, null, null, null, null, null, null, null, null, null, null);
                X.APIDeserializer_deserialize(t1.get$current(), c, null);
                J.add$1$ax(ret.posts, c);
              }
              $async$returnValue = ret;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncHelper($async$returnValue, 0, $async$completer, null);
            case 2:
              // rethrow
              return P._asyncHelper($async$currentError, 1, $async$completer);
          }
      });
      return P._asyncHelper(null, $async$RpcLib_convGet, $async$completer, null);
    },
    RpcLib_convUserSave: function(req) {
      var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, t1, ret, $async$temp1;
      var $async$RpcLib_convUserSave = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = new X.APIResponseBase(null, null, "Y", null);
              ret = new X.ConvUserSaveResponse(t1, null);
              $async$temp1 = X;
              $async$goto = 3;
              return P._asyncHelper(L.RpcLib_rpcAsMap("ConvUserSave", req), $async$RpcLib_convUserSave, $async$completer);
            case 3:
              // returning from await.
              $async$temp1.APIDeserializer_deserialize($async$result, ret, t1);
              F.Messages_showAPIError(ret.base);
              $async$returnValue = ret;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncHelper($async$returnValue, 0, $async$completer, null);
            case 2:
              // rethrow
              return P._asyncHelper($async$currentError, 1, $async$completer);
          }
      });
      return P._asyncHelper(null, $async$RpcLib_convUserSave, $async$completer, null);
    },
    RpcLib_docQuery: function(req) {
      var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, raw, t1, ret, c;
      var $async$RpcLib_docQuery = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncHelper(L.RpcLib_rpcAsMap("DocQuery", req), $async$RpcLib_docQuery, $async$completer);
            case 3:
              // returning from await.
              raw = $async$result;
              t1 = new X.APIResponseBase(null, null, "Y", null);
              ret = new X.DocQueryResponse(t1, null);
              X.APIDeserializer_deserialize(raw, ret, t1);
              F.Messages_showAPIError(ret.base);
              ret.docs = H.setRuntimeTypeInfo([], [X.DocQueryItem]);
              for (t1 = J.get$iterator$ax(J.$index$asx(raw, "docs")); t1.moveNext$0();) {
                c = new X.DocQueryItem(null, null);
                X.APIDeserializer_deserialize(t1.get$current(), c, null);
                J.add$1$ax(ret.docs, c);
              }
              $async$returnValue = ret;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncHelper($async$returnValue, 0, $async$completer, null);
            case 2:
              // rethrow
              return P._asyncHelper($async$currentError, 1, $async$completer);
          }
      });
      return P._asyncHelper(null, $async$RpcLib_docQuery, $async$completer, null);
    },
    RpcLib_docGet: function(req) {
      var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, raw, t1, ret, c;
      var $async$RpcLib_docGet = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncHelper(L.RpcLib_rpcAsMap("DocGet", req), $async$RpcLib_docGet, $async$completer);
            case 3:
              // returning from await.
              raw = $async$result;
              t1 = new X.APIResponseBase(null, null, "Y", null);
              ret = new X.DocGetResponse(t1, null, null, null, null, null, null, null, null, null, null, null, null);
              X.APIDeserializer_deserialize(raw, ret, t1);
              F.Messages_showAPIError(ret.base);
              ret.verList = H.setRuntimeTypeInfo([], [X.DocGetVersionItem]);
              for (t1 = J.get$iterator$ax(J.$index$asx(raw, "verList")); t1.moveNext$0();) {
                c = new X.DocGetVersionItem(null, null);
                X.APIDeserializer_deserialize(t1.get$current(), c, null);
                J.add$1$ax(ret.verList, c);
              }
              $async$returnValue = ret;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncHelper($async$returnValue, 0, $async$completer, null);
            case 2:
              // rethrow
              return P._asyncHelper($async$currentError, 1, $async$completer);
          }
      });
      return P._asyncHelper(null, $async$RpcLib_docGet, $async$completer, null);
    },
    RpcLib_eventQuery: function(req) {
      var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, raw, t1, ret, c;
      var $async$RpcLib_eventQuery = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncHelper(L.RpcLib_rpcAsMap("EventQuery", req), $async$RpcLib_eventQuery, $async$completer);
            case 3:
              // returning from await.
              raw = $async$result;
              t1 = new X.APIResponseBase(null, null, "Y", null);
              ret = new X.EventQueryResponse(t1, null);
              X.APIDeserializer_deserialize(raw, ret, t1);
              F.Messages_showAPIError(ret.base);
              ret.events = H.setRuntimeTypeInfo([], [X.EventItemResponse]);
              for (t1 = J.get$iterator$ax(J.$index$asx(raw, "events")); t1.moveNext$0();) {
                c = new X.EventItemResponse(null, null, null, null, null);
                X.APIDeserializer_deserialize(t1.get$current(), c, null);
                J.add$1$ax(ret.events, c);
              }
              $async$returnValue = ret;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncHelper($async$returnValue, 0, $async$completer, null);
            case 2:
              // rethrow
              return P._asyncHelper($async$currentError, 1, $async$completer);
          }
      });
      return P._asyncHelper(null, $async$RpcLib_eventQuery, $async$completer, null);
    },
    RpcLib_eventGet: function(req) {
      var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, raw, t1, ret, t2, c;
      var $async$RpcLib_eventGet = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncHelper(L.RpcLib_rpcAsMap("EventGet", req), $async$RpcLib_eventGet, $async$completer);
            case 3:
              // returning from await.
              raw = $async$result;
              t1 = new X.APIResponseBase(null, null, "Y", null);
              ret = new X.EventGetResponse(t1, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
              X.APIDeserializer_deserialize(raw, ret, t1);
              F.Messages_showAPIError(ret.base);
              ret.users = H.setRuntimeTypeInfo([], [X.EventGetUserResponse]);
              for (t1 = J.getInterceptor$asx(raw), t2 = J.get$iterator$ax(t1.$index(raw, "users")); t2.moveNext$0();) {
                c = new X.EventGetUserResponse(null, null, null, null, null, null);
                X.APIDeserializer_deserialize(t2.get$current(), c, null);
                J.add$1$ax(ret.users, c);
              }
              ret.convs = H.setRuntimeTypeInfo([], [X.EventGetConvResponse]);
              for (t1 = J.get$iterator$ax(t1.$index(raw, "convs")); t1.moveNext$0();) {
                c = new X.EventGetConvResponse(null, null, null, null);
                X.APIDeserializer_deserialize(t1.get$current(), c, null);
                J.add$1$ax(ret.convs, c);
              }
              $async$returnValue = ret;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncHelper($async$returnValue, 0, $async$completer, null);
            case 2:
              // rethrow
              return P._asyncHelper($async$currentError, 1, $async$completer);
          }
      });
      return P._asyncHelper(null, $async$RpcLib_eventGet, $async$completer, null);
    },
    RpcLib_resourceQuery: function(req) {
      var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, raw, t1, ret, c;
      var $async$RpcLib_resourceQuery = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncHelper(L.RpcLib_rpcAsMap("ResourceQuery", req), $async$RpcLib_resourceQuery, $async$completer);
            case 3:
              // returning from await.
              raw = $async$result;
              t1 = new X.APIResponseBase(null, null, "Y", null);
              ret = new X.ResourceQueryResponse(t1, null);
              X.APIDeserializer_deserialize(raw, ret, t1);
              F.Messages_showAPIError(ret.base);
              ret.items = H.setRuntimeTypeInfo([], [X.ResourceItem]);
              for (t1 = J.get$iterator$ax(J.$index$asx(raw, "items")); t1.moveNext$0();) {
                c = new X.ResourceItem(null, null, null, null);
                X.APIDeserializer_deserialize(t1.get$current(), c, null);
                J.add$1$ax(ret.items, c);
              }
              $async$returnValue = ret;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncHelper($async$returnValue, 0, $async$completer, null);
            case 2:
              // rethrow
              return P._asyncHelper($async$currentError, 1, $async$completer);
          }
      });
      return P._asyncHelper(null, $async$RpcLib_resourceQuery, $async$completer, null);
    },
    RpcLib_resourceGet: function(req) {
      var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, t1, ret, $async$temp1;
      var $async$RpcLib_resourceGet = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = new X.APIResponseBase(null, null, "Y", null);
              ret = new X.ResourceGetResponse(t1, null, null, null, null, null, null, null, null, null, null, null, null, null);
              $async$temp1 = X;
              $async$goto = 3;
              return P._asyncHelper(L.RpcLib_rpcAsMap("ResourceGet", req), $async$RpcLib_resourceGet, $async$completer);
            case 3:
              // returning from await.
              $async$temp1.APIDeserializer_deserialize($async$result, ret, t1);
              F.Messages_showAPIError(ret.base);
              $async$returnValue = ret;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncHelper($async$returnValue, 0, $async$completer, null);
            case 2:
              // rethrow
              return P._asyncHelper($async$currentError, 1, $async$completer);
          }
      });
      return P._asyncHelper(null, $async$RpcLib_resourceGet, $async$completer, null);
    },
    RpcLib_userQuery: function(req) {
      var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, raw, t1, ret, c;
      var $async$RpcLib_userQuery = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncHelper(L.RpcLib_rpcAsMap("UserQuery", req), $async$RpcLib_userQuery, $async$completer);
            case 3:
              // returning from await.
              raw = $async$result;
              t1 = new X.APIResponseBase(null, null, "Y", null);
              ret = new X.UserQueryResponse(t1, null);
              X.APIDeserializer_deserialize(raw, ret, t1);
              F.Messages_showAPIError(ret.base);
              ret.users = H.setRuntimeTypeInfo([], [X.UserQueryItem]);
              for (t1 = J.get$iterator$ax(J.$index$asx(raw, "users")); t1.moveNext$0();) {
                c = new X.UserQueryItem(null, null, null, null, null);
                X.APIDeserializer_deserialize(t1.get$current(), c, null);
                J.add$1$ax(ret.users, c);
              }
              $async$returnValue = ret;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncHelper($async$returnValue, 0, $async$completer, null);
            case 2:
              // rethrow
              return P._asyncHelper($async$currentError, 1, $async$completer);
          }
      });
      return P._asyncHelper(null, $async$RpcLib_userQuery, $async$completer, null);
    }
  }], ["", "../client/dialog/select_multiple_dialog.dart",, F, {
    "^": "",
    SelectMultipleDialog: {
      "^": "DialogBox;_select_multiple_dialog$_options,_title,_showing,_continuation,_backdrop,frame",
      build$0: function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, t1, sel, option, bar;
        var $async$build$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                O.FormBuilder$($async$self.frame, $async$self._title);
                t1 = $async$self.frame;
                t1.toString;
                t1.appendChild(document.createTextNode("Select one or more options - use Ctrl/Command to select multiple"));
                t1 = document;
                sel = t1.createElement("select");
                J.set$multiple$x(sel, true);
                t1 = sel.style;
                t1.width = "80%";
                t1 = sel.style;
                t1.height = "200px";
                $async$self.frame.appendChild(sel);
                for (t1 = J.get$iterator$ax($async$self._select_multiple_dialog$_options); t1.moveNext$0();) {
                  option = t1.__interceptors$_current;
                  sel.appendChild(W.OptionElement_OptionElement$_(option, option, null, false));
                }
                bar = M.ButtonBarBuilder$($async$self.frame, null);
                bar.addButton$2("OK", new F.SelectMultipleDialog_build_closure($async$self, sel));
                bar.addButton$2("Cancel", new F.SelectMultipleDialog_build_closure0($async$self));
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$build$0, $async$completer, null);
      }
    },
    SelectMultipleDialog_build_closure: {
      "^": "Closure:6;$this,sel",
      call$1: function(e) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, selected, t1;
        var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                selected = H.setRuntimeTypeInfo([], [P.String]);
                t1 = H.setRuntimeTypeInfo(new W._FrozenElementList($async$self.sel.querySelectorAll("option")), [null]);
                t1.forEach$1(t1, new F.SelectMultipleDialog_build__closure(selected));
                $async$self.$this.hide$1(selected);
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$call$1, $async$completer, null);
      }
    },
    SelectMultipleDialog_build__closure: {
      "^": "Closure:63;selected",
      call$1: function(option) {
        var t1 = J.getInterceptor$x(option);
        if (t1.get$selected(option) === true)
          this.selected.push(t1.get$value(option));
      }
    },
    SelectMultipleDialog_build_closure0: {
      "^": "Closure:1;$this",
      call$1: function(e) {
        this.$this.hide$1(null);
      }
    }
  }], ["", "../client/lib/string_dialog.dart",, K, {
    "^": "",
    StringDialog: {
      "^": "DialogBox;_showing,_continuation,_backdrop,frame",
      dialogHeight$0: function() {
        return 150;
      },
      StringDialog$3: function(caption, priorValue, maxLength) {
        var inp, bar;
        inp = O.FormBuilder$(this.frame, caption).addInput$4("", 300, maxLength, priorValue);
        bar = M.ButtonBarBuilder$(this.frame, null);
        bar.addButton$2("OK", new K.StringDialog_closure(this, inp));
        bar.addButton$2("Cancel", new K.StringDialog_closure0(this));
      },
      static: {
        StringDialog$: function(caption, priorValue, maxLength) {
          var t1 = new K.StringDialog(false, null, null, null);
          t1.DialogBox$0();
          t1.StringDialog$3(caption, priorValue, maxLength);
          return t1;
        }
      }
    },
    StringDialog_closure: {
      "^": "Closure:1;$this,inp",
      call$1: function(e) {
        this.$this.hide$1(J.get$value$x(this.inp));
      }
    },
    StringDialog_closure0: {
      "^": "Closure:1;$this",
      call$1: function(e) {
        this.$this.hide$1(null);
      }
    }
  }], ["", "../client/lib/string_tuple.dart",, G, {
    "^": "",
    StringTuple: {
      "^": "Object;name*,value*"
    }
  }], ["", "../client/pane/sys_proposal_list_pane.dart",, F, {
    "^": "",
    SysProposalListPane: {
      "^": "ProposalListPane;_sys_proposal_list_pane$_year,paneClass,paneTitle,proposals,_isCollapsed,paneKey,borderId,borderElement,bodyId,bodyElement,paneMenuBar,onCollapse,onChanePaneKey",
      load$0: function(_) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, t1, req, $async$temp1;
        var $async$load$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.paneKey._keyParts;
                if (1 >= t1.length) {
                  $async$returnValue = H.ioore(t1, 1);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t1 = H.Primitives_parseInt(t1[1], null, null);
                $async$self._sys_proposal_list_pane$_year = t1;
                $async$self.paneClass = "proposals-sys";
                $async$self.paneTitle = "Archive of System Proposals " + H.S(t1);
                req = new X.ProposalQueryRequest(null, null, null, null);
                req.mode = "S";
                req.year = $async$self._sys_proposal_list_pane$_year;
                $async$temp1 = $async$self;
                $async$goto = 3;
                return P._asyncHelper(L.RpcLib_proposalQuery(req), $async$load$0, $async$completer);
              case 3:
                // returning from await.
                $async$temp1.proposals = $async$result;
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$load$0, $async$completer, null);
      },
      makeButtonBar$0: function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this;
        var $async$makeButtonBar$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$self.paneMenuBar.addButton$2("Previous Year", new F.SysProposalListPane_makeButtonBar_closure($async$self));
                $async$self.paneMenuBar.addButton$2("Propose a Change", new F.SysProposalListPane_makeButtonBar_closure0());
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$makeButtonBar$0, $async$completer, null);
      }
    },
    SysProposalListPane_makeButtonBar_closure: {
      "^": "Closure:1;$this",
      call$1: function(e) {
        A.PaneFactory_createFromString("proposals-sys/" + H.S(J.$sub$n(this.$this._sys_proposal_list_pane$_year, 1)));
      }
    },
    SysProposalListPane_makeButtonBar_closure0: {
      "^": "Closure:6;",
      call$1: function(e) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, conf, propDialog, $async$temp1;
        var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                conf = new L.ConfirmDialog("Use this feature with care! You are about to propose a change in the way the system operates, which can be voted on by all users. Please be specific and provide the resources necessary if you are proposing substantial changes. Continue?", $.$get$ConfirmDialog_YesNoOptions(), false, null, null, null);
                conf.DialogBox$0();
                $async$temp1 = J;
                $async$goto = 3;
                return P._asyncHelper(conf.show$0(0), $async$call$1, $async$completer);
              case 3:
                // returning from await.
                if (!$async$temp1.$eq$($async$result, 0)) {
                  // goto return
                  $async$goto = 1;
                  break;
                }
                propDialog = new B.ProposalDialog("SYS", null, null, false, null, null, null);
                propDialog.DialogBox$0();
                $async$goto = 4;
                return P._asyncHelper(propDialog.show$0(0), $async$call$1, $async$completer);
              case 4:
                // returning from await.
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$call$1, $async$completer, null);
      }
    }
  }], ["", "../client/dialog/title_desc_dialog.dart",, T, {
    "^": "",
    TitleDescDialog: {
      "^": "DialogBox;_prompt,_titleEditable,title*,description*,_showing,_continuation,_backdrop,frame",
      dialogHeight$0: function() {
        return 150;
      },
      build$0: function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, form, titleInput, descInput, bar;
        var $async$build$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                form = O.FormBuilder$($async$self.frame, $async$self._prompt);
                titleInput = form.addInput$4("Title", 400, 500, $async$self.title);
                J.set$readOnly$x(titleInput, true);
                descInput = form.addTextArea$5("Description", 400, 80, 10000, $async$self.description);
                bar = M.ButtonBarBuilder$($async$self.frame, null);
                bar.addButton$2("OK", new T.TitleDescDialog_build_closure($async$self, titleInput, descInput));
                bar.addButton$2("Cancel", new T.TitleDescDialog_build_closure0($async$self));
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$build$0, $async$completer, null);
      }
    },
    TitleDescDialog_build_closure: {
      "^": "Closure:1;$this,titleInput,descInput",
      call$1: function(e) {
        var t1 = this.$this;
        t1.title = J.get$value$x(this.titleInput);
        t1.description = J.get$value$x(this.descInput);
        t1.hide$1(true);
      }
    },
    TitleDescDialog_build_closure0: {
      "^": "Closure:1;$this",
      call$1: function(e) {
        this.$this.hide$1(false);
      }
    }
  }], ["", "../client/dialog/user_dialog.dart",, Z, {
    "^": "",
    UserDialog: {
      "^": "DialogBox;userId@,_showing,_continuation,_backdrop,frame",
      dialogHeight$0: function() {
        return 500;
      },
      build$0: function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, t1, isNewUser, userGetArgs, user, t2, userAgreement, form, nickInput, pw1Input, pw2Input, emailInput, t3, kindInput, publicSubform, prefEmailNotifyChk, timeZoneInput, publicLinkKinds, publicLinkValues, publicNameInput, t4, remainingKinds, i, remainingIdx, remainingIdx0, newUserSubform, docDiv, iAgreeChk, bar;
        var $async$build$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            $async$outer:
              switch ($async$goto) {
                case 0:
                  // Function start
                  t1 = {};
                  isNewUser = J.$eq$($async$self.userId, 0);
                  userGetArgs = new X.UserGetRequest(null, null, null, null);
                  userGetArgs.userId = $async$self.userId;
                  userGetArgs.includeEditing = "Y";
                  $async$goto = 3;
                  return P._asyncHelper(L.RpcLib_userGet(userGetArgs), $async$build$0, $async$completer);
                case 3:
                  // returning from await.
                  user = $async$result;
                  $async$goto = isNewUser ? 4 : 6;
                  break;
                case 4:
                  // then
                  t2 = new X.DocGetRequest(null, null, null, null, null);
                  t2.specialCode = "UA";
                  $async$goto = 7;
                  return P._asyncHelper(L.RpcLib_docGet(t2), $async$build$0, $async$completer);
                case 7:
                  // returning from await.
                  userAgreement = $async$result;
                  // goto join
                  $async$goto = 5;
                  break;
                case 6:
                  // else
                  userAgreement = null;
                case 5:
                  // join
                  form = O.FormBuilder$($async$self.frame, "User Account");
                  nickInput = form.addInput$4("Nickname", 200, 40, user.get$nick());
                  t2 = !isNewUser;
                  if (t2)
                    J.set$disabled$x(nickInput, true);
                  else
                    form.addExplanation$2(nickInput, "Your nickname (screen name) is shown to all users; use 5 or more characters.");
                  pw1Input = form.addPasswordInput$3(isNewUser ? "Password" : "Change password", 200, 40);
                  if (isNewUser)
                    form.addExplanation$2(pw1Input, "Passwords must be 5 or more characters");
                  pw2Input = form.addPasswordInput$3("Repeat password", 200, 40);
                  emailInput = form.addInput$4("Private email address", 200, 200, user.get$email());
                  form.addExplanation$2(emailInput, "Include your email address to allow the system to email you and to recover a password. (optional)");
                  t3 = document;
                  kindInput = t3.createElement("select");
                  $.$get$Globals_allUserKinds().forEach$1(0, new Z.UserDialog_build_closure(kindInput));
                  J.set$value$x(kindInput, J.get$kind$x(user));
                  form.addAny$2("User type", kindInput);
                  if (isNewUser)
                    form.addExplanation$2(kindInput, "Select your affiliation with the movement.");
                  publicSubform = form.addSubformFrame$1("About Me (optional public information shown to all users)");
                  prefEmailNotifyChk = W.InputElement_InputElement("checkbox");
                  J.set$checked$x(prefEmailNotifyChk, J.$eq$(user.get$prefEmailNotify(), "Y"));
                  form.addAny$2("Email me notifications", prefEmailNotifyChk);
                  t3 = document;
                  timeZoneInput = t3.createElement("select");
                  V.HtmlLib_addOptionElements(timeZoneInput, user.get$allTimeZones());
                  J.set$value$x(timeZoneInput, user.get$timeZone());
                  form.addAny$2("Time zone", timeZoneInput);
                  publicLinkKinds = H.setRuntimeTypeInfo([], [W.SelectElement]);
                  publicLinkValues = H.setRuntimeTypeInfo([], [W.TextInputElement]);
                  t3 = new Z.UserDialog_build_add1PublicLink(publicSubform, publicLinkKinds, publicLinkValues);
                  publicNameInput = publicSubform.addInput$4("Real name", 200, 100, user.get$publicName());
                  t1.nLinksCreated = 0;
                  if (user.get$publicLinks() != null)
                    J.forEach$1$ax(user.get$publicLinks(), new Z.UserDialog_build_closure0(t1, t3));
                  t4 = $.$get$Globals_allPublicLinkKinds();
                  remainingKinds = H.setRuntimeTypeInfo(t4.slice(), [H.getTypeArgumentByIndex(t4, 0)]);
                  if (user.get$publicLinks() != null)
                    J.forEach$1$ax(user.get$publicLinks(), new Z.UserDialog_build_closure1(remainingKinds));
                  for (i = t1.nLinksCreated, remainingIdx = 0; i < 5; ++i, remainingIdx = remainingIdx0) {
                    remainingIdx0 = remainingIdx + 1;
                    if (remainingIdx >= remainingKinds.length) {
                      $async$returnValue = H.ioore(remainingKinds, remainingIdx);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    t3.call$2(remainingKinds[remainingIdx], "");
                  }
                  t1.iAgreeChk = null;
                  if (isNewUser) {
                    newUserSubform = form.addSubformFrame$1("Agreement");
                    t3 = document;
                    docDiv = t3.createElement("div");
                    t3 = docDiv.style;
                    (t3 && C.CssStyleDeclaration_methods).set$overflowY(t3, "scroll");
                    t3 = docDiv.style;
                    t3.maxHeight = "350px";
                    newUserSubform._parent.appendChild(docDiv);
                    J.insertAdjacentHtml$4$treeSanitizer$validator$x(docDiv, "beforeend", J.makeHtml$1$x(self.Markdown.getSanitizingConverter(), J.get$body$x(userAgreement)), null, null);
                    iAgreeChk = W.InputElement_InputElement("checkbox");
                    t1.iAgreeChk = iAgreeChk;
                    newUserSubform.addAny$2("I agree to the terms of service", iAgreeChk);
                  }
                  t3 = new Z.UserDialog_build_getPublicLinksFromDom(publicLinkKinds, publicLinkValues);
                  bar = M.ButtonBarBuilder$($async$self.frame, null);
                  t4 = isNewUser ? "Create Account" : "Save";
                  bar.addButton$2(t4, new Z.UserDialog_build_closure2($async$self, isNewUser, nickInput, pw1Input, emailInput, kindInput, prefEmailNotifyChk, timeZoneInput, publicNameInput, t3, new Z.UserDialog_build_isValid(t1, $async$self, isNewUser, form, nickInput, pw1Input, pw2Input, t3)));
                  if (t2)
                    bar.addButton$2("Delete Account", new Z.UserDialog_build_closure3($async$self));
                  bar.addButton$2("Cancel", new Z.UserDialog_build_closure4($async$self));
                case 1:
                  // return
                  return P._asyncHelper($async$returnValue, 0, $async$completer, null);
                case 2:
                  // rethrow
                  return P._asyncHelper($async$currentError, 1, $async$completer);
              }
        });
        return P._asyncHelper(null, $async$build$0, $async$completer, null);
      },
      static: {
        UserDialog_hasDuplicates: function(list) {
          var s, i;
          s = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
          for (i = 0; i < list.length; ++i) {
            if (s.contains$1(0, list[i]))
              return true;
            if (i >= list.length)
              return H.ioore(list, i);
            s.add$1(0, list[i]);
          }
          return false;
        }
      }
    },
    UserDialog_build_closure: {
      "^": "Closure:9;kindInput",
      call$2: function(value, text) {
        var t1 = W.OptionElement_OptionElement$_("", "", null, false);
        t1.value = value;
        t1.textContent = text;
        this.kindInput.appendChild(t1);
      }
    },
    UserDialog_build_add1PublicLink: {
      "^": "Closure:18;publicSubform,publicLinkKinds,publicLinkValues",
      call$2: function(linkKind, linkValue) {
        var t1, kindEl, _i, k, t2, valEl, row;
        t1 = document;
        kindEl = t1.createElement("select");
        kindEl.appendChild(W.OptionElement_OptionElement$_("", "", null, false));
        for (t1 = $.$get$Globals_allPublicLinkKinds(), _i = 0; _i < 11; ++_i) {
          k = t1[_i];
          t2 = W.OptionElement_OptionElement$_("", k, null, false);
          t2.textContent = k;
          kindEl.appendChild(t2);
        }
        J.set$value$x(kindEl, linkKind);
        valEl = W.InputElement_InputElement("text");
        t1 = valEl.style;
        t1.width = "200px";
        t1 = J.getInterceptor$x(valEl);
        t1.set$maxLength(valEl, 1000);
        t1.set$value(valEl, linkValue);
        row = J.addRow$0$x(this.publicSubform._table);
        t1 = J.getInterceptor$x(row);
        t1.addCell$0(row).appendChild(kindEl);
        t1.addCell$0(row).appendChild(valEl);
        this.publicLinkKinds.push(kindEl);
        this.publicLinkValues.push(valEl);
      }
    },
    UserDialog_build_closure0: {
      "^": "Closure:9;_box_0,add1PublicLink",
      call$2: [function(kind, value) {
        this.add1PublicLink.call$2(kind, value);
        ++this._box_0.nLinksCreated;
      }, null, null, 4, 0, null, 13, [], 3, [], "call"]
    },
    UserDialog_build_closure1: {
      "^": "Closure:9;remainingKinds",
      call$2: [function(kind, value) {
        C.JSArray_methods.remove$1(this.remainingKinds, kind);
      }, null, null, 4, 0, null, 13, [], 3, [], "call"]
    },
    UserDialog_build_getPublicLinksFromDom: {
      "^": "Closure:64;publicLinkKinds,publicLinkValues",
      call$0: function() {
        var t1, n, ret, t2, i, kind, t3, value;
        t1 = this.publicLinkKinds;
        n = t1.length;
        ret = H.setRuntimeTypeInfo([], [G.StringTuple]);
        for (t2 = this.publicLinkValues, i = 0; i < n; ++i) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          kind = J.get$value$x(t1[i]);
          if (kind == null)
            kind = "";
          if (i >= t2.length)
            return H.ioore(t2, i);
          t3 = J.get$value$x(t2[i]);
          value = J.trim$0$s(t3 == null ? "" : t3);
          if (value.length > 0) {
            if (J.get$length$asx(kind) === 0)
              return;
            t3 = new G.StringTuple(null, null);
            t3.name = kind;
            t3.value = value;
            ret.push(t3);
          }
        }
        return ret;
      }
    },
    UserDialog_build_isValid: {
      "^": "Closure:19;_box_0,$this,isNewUser,form,nickInput,pw1Input,pw2Input,getPublicLinksFromDom",
      call$0: function() {
        var t1, err, pw1, pw2, links;
        t1 = this.isNewUser;
        if (t1) {
          err = M.WLib_nickValidationError(J.trim$0$s(J.get$value$x(this.nickInput)));
          if (err != null) {
            t1 = this.form._form_builder$_error;
            t1.textContent = err;
            J.scrollIntoView$0$x(t1);
            return false;
          }
        }
        pw1 = J.trim$0$s(J.get$value$x(this.pw1Input));
        pw2 = J.trim$0$s(J.get$value$x(this.pw2Input));
        if (t1 || pw1.length > 0) {
          err = M.WLib_passwordComplexityError(pw1);
          if (err != null) {
            t1 = this.form._form_builder$_error;
            t1.textContent = err;
            J.scrollIntoView$0$x(t1);
            return false;
          }
        }
        if (pw1 !== pw2) {
          t1 = this.form._form_builder$_error;
          t1.textContent = "Passwords do not match";
          J.scrollIntoView$0$x(t1);
          return false;
        }
        if (t1 && J.get$checked$x(this._box_0.iAgreeChk) !== true) {
          t1 = this.form._form_builder$_error;
          t1.textContent = "You must agree to the terms of service.";
          J.scrollIntoView$0$x(t1);
          return false;
        }
        links = this.getPublicLinksFromDom.call$0();
        if (links == null) {
          t1 = this.form._form_builder$_error;
          t1.textContent = "You must select a kind of link for each item in About Me.";
          J.scrollIntoView$0$x(t1);
          return false;
        }
        if (Z.UserDialog_hasDuplicates(H.setRuntimeTypeInfo(new H.MappedListIterable(links, new Z.UserDialog_build_isValid_closure()), [null, null]).toList$0(0))) {
          t1 = this.form._form_builder$_error;
          t1.textContent = "The items in About Me must not repeat.";
          J.scrollIntoView$0$x(t1);
          return false;
        }
        return true;
      }
    },
    UserDialog_build_isValid_closure: {
      "^": "Closure:1;",
      call$1: [function(v) {
        return J.get$name$x(v);
      }, null, null, 2, 0, null, 16, [], "call"]
    },
    UserDialog_build_closure2: {
      "^": "Closure:6;$this,isNewUser,nickInput,pw1Input,emailInput,kindInput,prefEmailNotifyChk,timeZoneInput,publicNameInput,getPublicLinksFromDom,isValid",
      call$1: function(e) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, links, linksMap, saveArgs, t1, t2;
        var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                if ($async$self.isValid.call$0() !== true) {
                  // goto return
                  $async$goto = 1;
                  break;
                }
                links = $async$self.getPublicLinksFromDom.call$0();
                linksMap = H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [P.String, P.String]);
                J.forEach$1$ax(links, new Z.UserDialog_build__closure(linksMap));
                saveArgs = new X.UserSaveRequest(null, null, null, null, null, null, null, null, null, null, null, null);
                t1 = $async$self.isNewUser;
                saveArgs.isNew = t1 ? "Y" : "N";
                saveArgs.saveNick = J.trim$0$s(J.get$value$x($async$self.nickInput));
                t2 = J.trim$0$s(J.get$value$x($async$self.pw1Input));
                saveArgs.savePW = t2;
                saveArgs.kind = J.get$value$x($async$self.kindInput);
                saveArgs.email = J.trim$0$s(J.get$value$x($async$self.emailInput));
                saveArgs.publicName = J.trim$0$s(J.get$value$x($async$self.publicNameInput));
                saveArgs.prefEmailNotify = J.get$checked$x($async$self.prefEmailNotifyChk) === true ? "Y" : "N";
                saveArgs.timeZone = J.get$value$x($async$self.timeZoneInput);
                saveArgs.publicLinks = linksMap;
                if (t2.length === 0)
                  saveArgs.savePW = null;
                $async$goto = 3;
                return P._asyncHelper(L.RpcLib_command("UserSave", saveArgs), $async$call$1, $async$completer);
              case 3:
                // returning from await.
                if ($async$result.get$isOK()) {
                  if (t1) {
                    $.UserDialog_onLogoutAccount.call$0();
                    F.Messages_criticalMessage('Account created! Click "Log in" in the upper right corner to log in to your new account.');
                  }
                  $async$self.$this.hide$1(true);
                  $.UserDialog_onChangeAccount.call$0();
                }
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$call$1, $async$completer, null);
      }
    },
    UserDialog_build__closure: {
      "^": "Closure:1;linksMap",
      call$1: function(st) {
        var t1 = J.getInterceptor$x(st);
        this.linksMap.$indexSet(0, t1.get$name(st), t1.get$value(st));
      }
    },
    UserDialog_build_closure3: {
      "^": "Closure:6;$this",
      call$1: function(e) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, word, deleteArgs;
        var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 2;
                return P._asyncHelper(K.StringDialog$('Type the word "delete" to delete your account', "", 6).show$0(0), $async$call$1, $async$completer);
              case 2:
                // returning from await.
                word = $async$result;
                if (word != null && J.toLowerCase$0$s(word) === "delete") {
                  $async$self.$this.hide$1(true);
                  deleteArgs = new X.UserSaveRequest(null, null, null, null, null, null, null, null, null, null, null, null);
                  deleteArgs.isDelete = "Y";
                  L.RpcLib_command("UserSave", deleteArgs);
                  $.UserDialog_onLogoutAccount.call$0();
                }
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$call$1, $async$completer, null);
      }
    },
    UserDialog_build_closure4: {
      "^": "Closure:1;$this",
      call$1: function(e) {
        this.$this.hide$1(false);
      }
    }
  }], ["", "../client/pane/user_pane.dart",, T, {
    "^": "",
    UserPane: {
      "^": "BasePane;_userId,_user_pane$_clickedInCode,_isCollapsed,paneKey,borderId,borderElement,bodyId,bodyElement,paneMenuBar,onCollapse,onChanePaneKey",
      init$1: function(pk) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, t1, loggedIn, t2, t3, user, card, avatarParent, followCheck, handleCheckbox, assocBox;
        var $async$init$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = {};
                $async$goto = 3;
                return P._asyncHelper($async$self.super$BasePane$init(pk), $async$init$1, $async$completer);
              case 3:
                // returning from await.
                loggedIn = !J.$eq$($.Globals_userId, 0);
                t2 = pk._keyParts;
                if (1 >= t2.length) {
                  $async$returnValue = H.ioore(t2, 1);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t2 = H.Primitives_parseInt(t2[1], null, null);
                $async$self._userId = t2;
                t3 = new X.UserGetRequest(null, null, null, null);
                t3.userId = t2;
                t3.includeDetail = "Y";
                $async$goto = 4;
                return P._asyncHelper(L.RpcLib_userGet(t3), $async$init$1, $async$completer);
              case 4:
                // returning from await.
                user = $async$result;
                $async$self.buildSkeletonHtml2$4$iconHoverText$iconName$paneClass$title("User", "paneuser", "user", user.get$nick());
                t3 = $async$self.bodyElement;
                t3.textContent = "";
                t2 = document;
                t2 = t2.createElement("table");
                t2.className = "cardtable";
                card = new Q.CardBuilder(null, t2);
                card._card_builder$_parent = t3;
                t3.appendChild(t2);
                avatarParent = card.addAny$1("Avatar");
                if (user.get$avatarUrl() != null)
                  avatarParent.appendChild(W.ImageElement_ImageElement(null, user.get$avatarUrl(), null));
                else {
                  avatarParent.toString;
                  avatarParent.appendChild(document.createTextNode("(none)"));
                }
                card.addText$2("Nickname", user.get$nick());
                card.addText$2("Name", user.get$publicName());
                if (user.get$publicLinks() != null)
                  J.forEach$1$ax(user.get$publicLinks(), new T.UserPane_init_closure(card));
                card.addText$2("Time zone", user.get$timeZone());
                t2 = J.getInterceptor$x(user);
                card.addText$2("Kind of user", $.$get$Globals_allUserKinds().$index(0, t2.get$kind(user)));
                if (J.$eq$(t2.get$status(user), "D"))
                  card.addText$2("Status", "User has been deleted");
                if (J.$eq$(user.get$isSiteAdmin(), "Y"))
                  card.addText$2("Admin status", "User is currently a site-wide administrator");
                t2 = new T.UserPane_init_add1Checkbox($async$self);
                t1.followCheck = null;
                t1.blockCheck = null;
                if (loggedIn && !J.$eq$($.Globals_nick, user.get$nick())) {
                  followCheck = t2.call$2(J.$eq$(user.get$userUserKind(), "F"), "Follow this user");
                  t1.followCheck = followCheck;
                  t1.blockCheck = t2.call$2(J.$eq$(user.get$userUserKind(), "B"), "Block this user");
                  handleCheckbox = new T.UserPane_init_closure0(t1, $async$self);
                  t2 = J.get$onChange$x(followCheck);
                  H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._html$_target, t2._eventType, W._wrapZone(handleCheckbox), false), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
                  t1 = J.get$onChange$x(t1.blockCheck);
                  H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(handleCheckbox), false), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
                }
                t1 = document;
                assocBox = t1.createElement("div");
                assocBox.className = "associations";
                $async$self.bodyElement.appendChild(assocBox);
                t1 = new T.UserPane_init_build1AssocSection(assocBox);
                t1.call$3("Events attending", user.get$events(), "paneevent");
                t1.call$3("Projects", user.get$projects(), "paneproject");
                t1.call$3("Resources submitted", user.get$resources(), "paneresource");
                if (loggedIn && J.$eq$($.Globals_nick, user.get$nick())) {
                  $async$self.paneMenuBar.addButton$2("Edit", new T.UserPane_init_closure1($async$self));
                  $async$self.paneMenuBar.addButton$2("Change Avatar", new T.UserPane_init_closure2($async$self));
                }
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$init$1, $async$completer, null);
      },
      _user_pane$_handleVote$2: function(follow, block) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, vote, req;
        var $async$_user_pane$_handleVote$2 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                if (follow === true)
                  vote = "F";
                else
                  vote = block === true ? "B" : null;
                if (!F.Messages_checkLoggedIn()) {
                  // goto return
                  $async$goto = 1;
                  break;
                }
                req = new X.UserUserSaveRequest(null, null, null);
                req.aboutId = $async$self._userId;
                req.kind = vote;
                $async$goto = 3;
                return P._asyncHelper(L.RpcLib_command("UserUserSave", req), $async$_user_pane$_handleVote$2, $async$completer);
              case 3:
                // returning from await.
              case 1:
                // return
                return P._asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$_user_pane$_handleVote$2, $async$completer, null);
      }
    },
    UserPane_init_closure: {
      "^": "Closure:9;card",
      call$2: [function(linkKind, linkValue) {
        this.card.addText$2(linkKind, linkValue);
      }, null, null, 4, 0, null, 50, [], 51, [], "call"]
    },
    UserPane_init_add1Checkbox: {
      "^": "Closure:22;$this",
      call$2: function(value, text) {
        var t1, div, chk;
        t1 = document;
        div = t1.createElement("div");
        chk = W.InputElement_InputElement("checkbox");
        J.set$checked$x(chk, value);
        div.appendChild(chk);
        t1 = " " + text;
        div.appendChild(document.createTextNode(t1));
        this.$this.bodyElement.appendChild(div);
        return chk;
      }
    },
    UserPane_init_closure0: {
      "^": "Closure:1;_box_0,$this",
      call$1: [function(e) {
        var t1, t2;
        t1 = this.$this;
        if (t1._user_pane$_clickedInCode)
          return;
        t1._user_pane$_clickedInCode = true;
        t2 = this._box_0;
        if (J.get$checked$x(t2.followCheck) === true)
          J.set$checked$x(t2.blockCheck, false);
        if (J.get$checked$x(t2.blockCheck) === true)
          J.set$checked$x(t2.followCheck, false);
        t1._user_pane$_clickedInCode = false;
        t1._user_pane$_handleVote$2(J.get$checked$x(t2.followCheck), J.get$checked$x(t2.blockCheck));
      }, null, null, 2, 0, null, 0, [], "call"]
    },
    UserPane_init_build1AssocSection: {
      "^": "Closure:65;assocBox",
      call$3: function(sectName, assocs, iconName) {
        var t1, t2, assoc, t3, t4, t5, e;
        if (assocs == null || J.$eq$(J.get$length$asx(assocs), 0))
          return;
        t1 = this.assocBox;
        J.insertAdjacentHtml$4$treeSanitizer$validator$x(t1, "beforeend", '<h3><img src="images/' + iconName + '.png" /> ' + sectName + "</h3>", null, null);
        for (t2 = J.get$iterator$ax(assocs); t2.moveNext$0();) {
          assoc = t2.get$current();
          t3 = assoc.get$linkText();
          t4 = assoc.get$linkPaneKey();
          t5 = document;
          e = t5.createElement("a");
          J.set$href$x(e, C.JSString_methods.$add("#", t4));
          e.textContent = t3;
          t3 = e.style;
          t3.display = "block";
          t1.appendChild(e);
        }
      }
    },
    UserPane_init_closure1: {
      "^": "Closure:6;$this",
      call$1: function(e) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, t1, editDialog;
        var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.$this;
                editDialog = new Z.UserDialog(t1._userId, false, null, null, null);
                editDialog.DialogBox$0();
                $async$goto = 2;
                return P._asyncHelper(editDialog.show$0(0), $async$call$1, $async$completer);
              case 2:
                // returning from await.
                if ($async$result === true)
                  A.PaneFactory_create(t1.paneKey, true);
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$call$1, $async$completer, null);
      }
    },
    UserPane_init_closure2: {
      "^": "Closure:6;$this",
      call$1: function(e) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, uploadDialog;
        var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                uploadDialog = new X.ImageUploadDialog("U", "The image will be resized and cropped to be square.", null, null, false, null, null, null);
                uploadDialog.DialogBox$0();
                $async$goto = 2;
                return P._asyncHelper(uploadDialog.show$0(0), $async$call$1, $async$completer);
              case 2:
                // returning from await.
                if ($async$result === true)
                  A.PaneFactory_create($async$self.$this.paneKey, true);
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$call$1, $async$completer, null);
      }
    }
  }], ["", "../client/pane/user_search_pane.dart",, G, {
    "^": "",
    UserSearchPane: {
      "^": "BasePane;_resultsDiv,_isCollapsed,paneKey,borderId,borderElement,bodyId,bodyElement,paneMenuBar,onCollapse,onChanePaneKey",
      init$1: function(pk) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, t1, t2, nickInp;
        var $async$init$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 2;
                return P._asyncHelper($async$self.super$BasePane$init(pk), $async$init$1, $async$completer);
              case 2:
                // returning from await.
                $async$self.buildSkeletonHtml2$3$iconName$paneClass$title("paneuser", "users", "User Search");
                t1 = $async$self.bodyElement;
                t1.textContent = "";
                t1 = V.HtmlLib_appendScrollingDiv(t1, 200);
                t2 = t1.style;
                t2.display = "none";
                $async$self._resultsDiv = t1;
                nickInp = O.FormBuilder$($async$self.bodyElement, "Criteria").addInput$3("Any part of nickname or name", 100, 20);
                $async$self.paneMenuBar.addButton$2("Search", new G.UserSearchPane_init_closure($async$self, nickInp));
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$init$1, $async$completer, null);
      },
      _doSearch$1: function(nick) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, t1, t2, response, u, d1, t3, t4, e;
        var $async$_doSearch$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self._resultsDiv;
                t2 = t1.style;
                t2.display = "block";
                J.set$innerHtml$x(t1, "Loading...");
                t1 = new X.UserQueryRequest(null, null);
                t1.name = nick;
                $async$goto = 2;
                return P._asyncHelper(L.RpcLib_userQuery(t1), $async$_doSearch$1, $async$completer);
              case 2:
                // returning from await.
                response = $async$result;
                J.set$innerHtml$x($async$self._resultsDiv, "");
                for (t1 = J.get$iterator$ax(response.get$users()); t1.moveNext$0();) {
                  u = t1.get$current();
                  t2 = document;
                  d1 = t2.createElement("div");
                  d1.className = "avatar";
                  $async$self._resultsDiv.appendChild(d1);
                  if (u.get$avatarUrl() != null)
                    d1.appendChild(W.ImageElement_ImageElement(null, u.get$avatarUrl(), null));
                  t2 = u.get$nick();
                  t3 = "user/" + H.S(J.get$id$x(u));
                  t4 = document;
                  e = t4.createElement("a");
                  J.set$href$x(e, "#" + t3);
                  e.textContent = t2;
                  d1.appendChild(e);
                  t2 = " (" + H.S(u.get$publicName()) + ")";
                  d1.appendChild(document.createTextNode(t2));
                }
                if (J.$eq$(J.get$length$asx(response.get$users()), 0))
                  J.set$innerHtml$x($async$self._resultsDiv, "(none)");
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$_doSearch$1, $async$completer, null);
      }
    },
    UserSearchPane_init_closure: {
      "^": "Closure:1;$this,nickInp",
      call$1: function(e) {
        return this.$this._doSearch$1(J.trim$0$s(J.get$value$x(this.nickInp)));
      }
    }
  }], ["", "../client/dialog/view_markdown_dialog.dart",, A, {
    "^": "",
    ViewMarkdownDialog: {
      "^": "DialogBox;_dtext,_showing,_continuation,_backdrop,frame",
      dialogHeight$0: function() {
        var t1 = window.innerHeight;
        if (typeof t1 !== "number")
          return t1.$sub();
        return t1 - 10;
      },
      build$0: function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer$sync(), $async$handler = 1, $async$currentError, $async$self = this, html;
        var $async$build$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                html = J.makeHtml$1$x(self.Markdown.getSanitizingConverter(), $async$self._dtext);
                J.insertAdjacentHtml$4$treeSanitizer$validator$x($async$self.frame, "beforeend", html, null, null);
                M.ButtonBarBuilder$($async$self.frame, null).addButton$2("Close", new A.ViewMarkdownDialog_build_closure($async$self));
                // implicit return
                return P._asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return P._asyncHelper($async$currentError, 1, $async$completer);
            }
        });
        return P._asyncHelper(null, $async$build$0, $async$completer, null);
      }
    },
    ViewMarkdownDialog_build_closure: {
      "^": "Closure:1;$this",
      call$1: function(e) {
        this.$this.hide$1(false);
      }
    }
  }], ["", "../client/twotier/wlib.dart",, M, {
    "^": "",
    WLib_passwordComplexityError: function(s) {
      if (s.length < 5)
        return "Password must be 5 or more characters.";
      return;
    },
    WLib_nickValidationError: function(s) {
      if (s.length < 5)
        return "Nickname must be at least 5 characters";
      if (!H.JSSyntaxRegExp_makeNative("^[0-9A-Za-z\\-]*$", false, true, false).test(H.checkString(s)))
        return "Nicknames can only include letters, digits, and hyphens";
      return;
    },
    WLib_utcNow: function() {
      return new P.DateTime(Date.now(), false).toUtc$0();
    },
    WLib_dateTimeToWire: function(d) {
      if (d == null)
        return;
      if (C.JSNumber_methods._tdivFast$1(d.get$timeZoneOffset()._duration, 1000) !== 0)
        throw H.wrapException(P.Exception_Exception("Only UTC times can be converted to wire format"));
      return d.toIso8601String$0();
    },
    WLib_wireToDateTime: function(s) {
      if (s == null)
        return;
      return P.DateTime_parse(s);
    },
    WLib_packDateEntry: function(year, month, day, hour, minute) {
      var t1, yearS, monthS, dayS, hourS, minuteS;
      t1 = new M.WLib_packDateEntry_pad2();
      yearS = C.JSString_methods.padLeft$2(C.JSInt_methods.toString$0(year), 4, "0");
      monthS = t1.call$1(month);
      dayS = t1.call$1(day);
      hourS = t1.call$1(hour);
      minuteS = t1.call$1(minute);
      return "LDT:" + yearS + H.S(monthS) + H.S(dayS) + H.S(hourS) + H.S(minuteS);
    },
    WLib_chop: function(s, maxlength, addEllipsis) {
      var t1 = J.getInterceptor$asx(s);
      if (J.$le$n(t1.get$length(s), maxlength))
        return s;
      s = t1.substring$2(s, 0, maxlength);
      return s + "...";
    },
    WLib_packDateEntry_pad2: {
      "^": "Closure:13;",
      call$1: function(i) {
        return C.JSString_methods.padLeft$2(C.JSInt_methods.toString$0(i), 2, "0");
      }
    }
  }], ["", "../client/twotier/wtypes.dart",, X, {
    "^": "",
    APISerializer_membersToMap: function(obj, map) {
      var im, cm, t1;
      im = H.reflect(obj);
      cm = im.get$type(im);
      for (; cm != null;) {
        t1 = cm.get$declarations()._map;
        t1 = t1.get$values(t1);
        H.setRuntimeTypeInfo(new H.WhereIterable(t1, new X.APISerializer_membersToMap_closure()), [H.getRuntimeTypeArgument(t1, "Iterable", 0)]).forEach$1(0, new X.APISerializer_membersToMap_closure0(map, im));
        cm = cm.get$superclass();
      }
    },
    APIDeserializer_deserialize: function(map, o, obase) {
      var im, cm, t1;
      im = H.reflect(o);
      cm = im.get$type(im);
      for (; cm != null;) {
        t1 = cm.get$declarations()._map;
        t1 = t1.get$values(t1);
        H.setRuntimeTypeInfo(new H.WhereIterable(t1, new X.APIDeserializer_deserialize_closure()), [H.getRuntimeTypeArgument(t1, "Iterable", 0)]).forEach$1(0, new X.APIDeserializer_deserialize_closure0(map, im));
        cm = cm.get$superclass();
      }
      if (obase != null)
        X.APIDeserializer_deserialize(J.$index$asx(map, "base"), obase, null);
    },
    APIRequestBase: {
      "^": "Object;nick@-0,password*-0",
      static: {
        APIRequestBase$: [function() {
          return new X.APIRequestBase(null, null);
        }, null, null, 0, 0, 72, "new APIRequestBase"]
      }
    },
    "+APIRequestBase": [3],
    APISerializer_membersToMap_closure: {
      "^": "Closure:1;",
      call$1: function(dm) {
        return !!J.getInterceptor(dm).$isVariableMirror;
      }
    },
    APISerializer_membersToMap_closure0: {
      "^": "Closure:1;map,im",
      call$1: function(dm) {
        var key, val;
        key = dm.get$simpleName().__internal$_name;
        val = this.im.getField$1(dm.get$simpleName()).reflectee;
        if (val != null)
          this.map.$indexSet(0, key, val);
      }
    },
    APIResponseBase: {
      "^": "Object;errorMessage@-0,errorCode*-0,ok@-0,newId@-2",
      get$isOK: [function() {
        return J.$eq$(this.ok, "Y");
      }, null, null, 1, 0, 19, "isOK"],
      deserialize$1: [function(map) {
        X.APIDeserializer_deserialize(map, this, null);
      }, "call$1", "get$deserialize", 2, 0, 66, 34, [], "deserialize"],
      static: {
        APIResponseBase$: [function() {
          return new X.APIResponseBase(null, null, "Y", null);
        }, null, null, 0, 0, 73, "new APIResponseBase"]
      }
    },
    "+APIResponseBase": [3],
    APIDeserializer_deserialize_closure: {
      "^": "Closure:1;",
      call$1: function(dm) {
        return !!J.getInterceptor(dm).$isVariableMirror;
      }
    },
    APIDeserializer_deserialize_closure0: {
      "^": "Closure:67;map,im",
      call$1: function(dm) {
        var value, t;
        value = J.$index$asx(this.map, dm.get$simpleName().__internal$_name);
        t = J.get$runtimeType$(value);
        if (t.$eq(0, C.Type_int_tHn) || t.$eq(0, C.Type_String_k8F)) {
          this.im._invoke$4(dm.get$simpleName(), 2, [value], C.Map_empty);
          H.reflect(value);
        }
      }
    },
    APIResponseAssociation: {
      "^": "Object;linkText@-0,linkPaneKey@-0",
      static: {
        APIResponseAssociation$: [function() {
          return new X.APIResponseAssociation(null, null);
        }, null, null, 0, 0, 74, "new APIResponseAssociation"]
      }
    },
    "+APIResponseAssociation": [3],
    AuthenticateResponse: {
      "^": "Object;base@-8,publicName@-0,nick@-0,userId@-2,isSiteAdmin@-0",
      static: {
        AuthenticateResponse$: [function() {
          return new X.AuthenticateResponse(new X.APIResponseBase(null, null, "Y", null), null, null, null, null);
        }, null, null, 0, 0, 75, "new AuthenticateResponse"]
      }
    },
    "+AuthenticateResponse": [3],
    CategoryQueryRequest: {
      "^": "Object;base@-5,kind*-0",
      static: {
        CategoryQueryRequest$: [function() {
          return new X.CategoryQueryRequest(null, null);
        }, null, null, 0, 0, 76, "new CategoryQueryRequest"]
      }
    },
    "+CategoryQueryRequest": [3],
    CategoryQueryResponse: {
      "^": "Object;base@-8,categories@-165",
      static: {
        CategoryQueryResponse$: [function() {
          return new X.CategoryQueryResponse(new X.APIResponseBase(null, null, "Y", null), null);
        }, null, null, 0, 0, 77, "new CategoryQueryResponse"]
      }
    },
    "+CategoryQueryResponse": [3],
    CategoryDeleteRequest: {
      "^": "Object;base@-5,catId@-2,kind*-0",
      static: {
        CategoryDeleteRequest$: [function() {
          return new X.CategoryDeleteRequest(null, null, null);
        }, null, null, 0, 0, 78, "new CategoryDeleteRequest"]
      }
    },
    "+CategoryDeleteRequest": [3],
    CategorySaveRequest: {
      "^": "Object;base@-5,catId@-2,kind*-0,referenceId@-2,referenceMode@-0,title*-0,description*-0",
      static: {
        CategorySaveRequest$: [function() {
          return new X.CategorySaveRequest(null, null, null, null, null, null, null);
        }, null, null, 0, 0, 79, "new CategorySaveRequest"]
      }
    },
    "+CategorySaveRequest": [3],
    CategoryMoveContentsRequest: {
      "^": "Object;base@-5,catId@-2,kind*-0,relatedIds@-15",
      static: {
        CategoryMoveContentsRequest$: [function() {
          return new X.CategoryMoveContentsRequest(null, null, null, null);
        }, null, null, 0, 0, 80, "new CategoryMoveContentsRequest"]
      }
    },
    "+CategoryMoveContentsRequest": [3],
    CategoryItemResponse: {
      "^": "Object;id*-2,parentId@-2,title*-0,description*-0",
      static: {
        CategoryItemResponse$: [function() {
          return new X.CategoryItemResponse(null, null, null, null);
        }, null, null, 0, 0, 81, "new CategoryItemResponse"]
      }
    },
    "+CategoryItemResponse": [3],
    ConvQueryRequest: {
      "^": "Object;base@-5,term@-0",
      static: {
        ConvQueryRequest$: [function() {
          return new X.ConvQueryRequest(null, null);
        }, null, null, 0, 0, 82, "new ConvQueryRequest"]
      }
    },
    "+ConvQueryRequest": [3],
    ConvQueryResponse: {
      "^": "Object;base@-8,convs@-167",
      static: {
        ConvQueryResponse$: [function() {
          return new X.ConvQueryResponse(new X.APIResponseBase(null, null, "Y", null), null);
        }, null, null, 0, 0, 83, "new ConvQueryResponse"]
      }
    },
    "+ConvQueryResponse": [3],
    ConvQueryConvItemResponse: {
      "^": "Object;convId@-2,hitText@-0,posts@-168",
      static: {
        ConvQueryConvItemResponse$: [function() {
          return new X.ConvQueryConvItemResponse(null, null, null);
        }, null, null, 0, 0, 84, "new ConvQueryConvItemResponse"]
      }
    },
    "+ConvQueryConvItemResponse": [3],
    ConvQueryPostItemResponse: {
      "^": "Object;postId@-0,hitText@-0",
      static: {
        ConvQueryPostItemResponse$: [function() {
          return new X.ConvQueryPostItemResponse(null, null);
        }, null, null, 0, 0, 85, "new ConvQueryPostItemResponse"]
      }
    },
    "+ConvQueryPostItemResponse": [3],
    ConvGetRequest: {
      "^": "Object;base@-5,convId@-2,mode*-0,rangeFromWDT@-0,rangeToWDT@-0",
      static: {
        ConvGetRequest$: [function() {
          return new X.ConvGetRequest(null, null, null, null, null);
        }, null, null, 0, 0, 86, "new ConvGetRequest"]
      }
    },
    "+ConvGetRequest": [3],
    ConvGetResponse: {
      "^": "Object;base@-8,isManager@-0,isJoined@-0,readPositionWDT@-0,title*-0,anySkipped@-0,posts@-169,replyAllowed@-0,replyAllowedDesc@-0,replyMaxLength@-2,deleteMessage@-0,like@-0,bookmarked@-0,parentTitle@-0,parentPaneKey@-0",
      static: {
        ConvGetResponse$: [function() {
          return new X.ConvGetResponse(new X.APIResponseBase(null, null, "Y", null), null, null, null, null, null, null, null, null, null, null, null, null, null, null);
        }, null, null, 0, 0, 87, "new ConvGetResponse"]
      }
    },
    "+ConvGetResponse": [3],
    ConvGetPostItem: {
      "^": "Object;id*-0,authorId@-2,authorNick@-0,avatarUrl@-0,createdAtReadable@-0,createdAtWDT@-0,ago@-0,ptext@-0,imageUrl@-0,collapseMode@-0,collapsePosition@-2",
      static: {
        ConvGetPostItem$: [function() {
          return new X.ConvGetPostItem(null, null, null, null, null, null, null, null, null, null, null);
        }, null, null, 0, 0, 88, "new ConvGetPostItem"]
      }
    },
    "+ConvGetPostItem": [3],
    ConvGetRulesRequest: {
      "^": "Object;base@-5,convId@-2",
      static: {
        ConvGetRulesRequest$: [function() {
          return new X.ConvGetRulesRequest(null, null);
        }, null, null, 0, 0, 89, "new ConvGetRulesRequest"]
      }
    },
    "+ConvGetRulesRequest": [3],
    ConvGetRulesResponse: {
      "^": "Object;base@-8,postMaxSize@-2,userDailyMax@-2,title*-0",
      static: {
        ConvGetRulesResponse$: [function() {
          return new X.ConvGetRulesResponse(new X.APIResponseBase(null, null, "Y", null), null, null, null);
        }, null, null, 0, 0, 90, "new ConvGetRulesResponse"]
      }
    },
    "+ConvGetRulesResponse": [3],
    ConvSaveRequest: {
      "^": "Object;base@-5,convId@-2,projectId@-2,eventId@-2,fromConvId@-2,openingPostId@-0,title*-0,postMaxSize@-2,userDailyMax@-2",
      static: {
        ConvSaveRequest$: [function() {
          return new X.ConvSaveRequest(null, null, null, null, null, null, null, null, null);
        }, null, null, 0, 0, 91, "new ConvSaveRequest"]
      }
    },
    "+ConvSaveRequest": [3],
    ConvPostGetRequest: {
      "^": "Object;base@-5,postId@-0",
      static: {
        ConvPostGetRequest$: [function() {
          return new X.ConvPostGetRequest(null, null);
        }, null, null, 0, 0, 92, "new ConvPostGetRequest"]
      }
    },
    "+ConvPostGetRequest": [3],
    ConvPostGetResponse: {
      "^": "Object;base@-8,avatarUrl@-0,reaction@-0,throttleDescription@-0,canCensor@-0,allReasons@-0",
      static: {
        ConvPostGetResponse$: [function() {
          return new X.ConvPostGetResponse(new X.APIResponseBase(null, null, "Y", null), null, null, null, null, null);
        }, null, null, 0, 0, 93, "new ConvPostGetResponse"]
      }
    },
    "+ConvPostGetResponse": [3],
    ConvPostSaveRequest: {
      "^": "Object;base@-5,convId@-2,postId@-0,triggerWarning@-0,ptext@-0,censored@-0,$delete*-0,lastKnownWDT@-0",
      static: {
        ConvPostSaveRequest$: [function() {
          return new X.ConvPostSaveRequest(null, null, null, null, null, null, null, null);
        }, null, null, 0, 0, 94, "new ConvPostSaveRequest"]
      }
    },
    "+ConvPostSaveRequest": [3],
    ConvPostImageSaveRequest: {
      "^": "Object;base@-5,convId@-2,ptext@-0,imageBytes@-15",
      static: {
        ConvPostImageSaveRequest$: [function() {
          return new X.ConvPostImageSaveRequest(null, null, null, null);
        }, null, null, 0, 0, 95, "new ConvPostImageSaveRequest"]
      }
    },
    "+ConvPostImageSaveRequest": [3],
    ConvPostUserSaveRequest: {
      "^": "Object;base@-5,postId@-0,reaction@-0,reason*-0",
      static: {
        ConvPostUserSaveRequest$: [function() {
          return new X.ConvPostUserSaveRequest(null, null, null, null);
        }, null, null, 0, 0, 96, "new ConvPostUserSaveRequest"]
      }
    },
    "+ConvPostUserSaveRequest": [3],
    ConvSetReadPositionRequest: {
      "^": "Object;base@-5,convId@-2,positionWDT@-0",
      static: {
        ConvSetReadPositionRequest$: [function() {
          return new X.ConvSetReadPositionRequest(null, null, null);
        }, null, null, 0, 0, 97, "new ConvSetReadPositionRequest"]
      }
    },
    "+ConvSetReadPositionRequest": [3],
    ConvUserSaveRequest: {
      "^": "Object;base@-5,convId@-2,status*-0,like@-0,bookmarked@-0",
      static: {
        ConvUserSaveRequest$: [function() {
          return new X.ConvUserSaveRequest(null, null, null, null, null);
        }, null, null, 0, 0, 98, "new ConvUserSaveRequest"]
      }
    },
    "+ConvUserSaveRequest": [3],
    ConvUserSaveResponse: {
      "^": "Object;base@,action>"
    },
    DocQueryRequest: {
      "^": "Object;base@-5,mode*-0",
      static: {
        DocQueryRequest$: [function() {
          return new X.DocQueryRequest(null, null);
        }, null, null, 0, 0, 99, "new DocQueryRequest"]
      }
    },
    "+DocQueryRequest": [3],
    DocQueryResponse: {
      "^": "Object;base@-8,docs@-170",
      static: {
        DocQueryResponse$: [function() {
          return new X.DocQueryResponse(new X.APIResponseBase(null, null, "Y", null), null);
        }, null, null, 0, 0, 100, "new DocQueryResponse"]
      }
    },
    "+DocQueryResponse": [3],
    DocQueryItem: {
      "^": "Object;id*-2,title*-0",
      static: {
        DocQueryItem$: [function() {
          return new X.DocQueryItem(null, null);
        }, null, null, 0, 0, 101, "new DocQueryItem"]
      }
    },
    "+DocQueryItem": [3],
    DocGetRequest: {
      "^": "Object;base@-5,docId@-2,specialCode@-0,revisionNo@-2,getVerList@-0",
      static: {
        DocGetRequest$: [function() {
          return new X.DocGetRequest(null, null, null, null, null);
        }, null, null, 0, 0, 102, "new DocGetRequest"]
      }
    },
    "+DocGetRequest": [3],
    DocGetResponse: {
      "^": "Object;base@-8,docId@-2,title*-0,body*-0,htmlDiff@-0,projectId@-2,projectTitle@-0,isProjectManager@-0,allowSave@-0,reasonNotEditable@-0,createdAt@-0,proposalId@-2,verList@-171",
      static: {
        DocGetResponse$: [function() {
          return new X.DocGetResponse(new X.APIResponseBase(null, null, "Y", null), null, null, null, null, null, null, null, null, null, null, null, null);
        }, null, null, 0, 0, 103, "new DocGetResponse"]
      }
    },
    "+DocGetResponse": [3],
    DocGetVersionItem: {
      "^": "Object;revisionNo@-2,createdAt@-0",
      static: {
        DocGetVersionItem$: [function() {
          return new X.DocGetVersionItem(null, null);
        }, null, null, 0, 0, 104, "new DocGetVersionItem"]
      }
    },
    "+DocGetVersionItem": [3],
    DocSaveRequest: {
      "^": "Object;base@-5,docId@-2,projectId@-2,title*-0,retitleMode@-0,body*-0,summary@-0",
      static: {
        DocSaveRequest$: [function() {
          return new X.DocSaveRequest(null, null, null, null, null, null, null);
        }, null, null, 0, 0, 105, "new DocSaveRequest"]
      }
    },
    "+DocSaveRequest": [3],
    DocRollbackRequest: {
      "^": "Object;base@-5,docId@-2,revisionNo@-2",
      static: {
        DocRollbackRequest$: [function() {
          return new X.DocRollbackRequest(null, null, null);
        }, null, null, 0, 0, 106, "new DocRollbackRequest"]
      }
    },
    "+DocRollbackRequest": [3],
    EventQueryRequest: {
      "^": "Object;base@-5,title*-0,dateFrom@-0,dateTo@-0,miles@-2,lat@-0,lon@-0",
      static: {
        EventQueryRequest$: [function() {
          return new X.EventQueryRequest(null, null, null, null, null, null, null);
        }, null, null, 0, 0, 107, "new EventQueryRequest"]
      }
    },
    "+EventQueryRequest": [3],
    EventQueryResponse: {
      "^": "Object;base@-8,events@-172",
      static: {
        EventQueryResponse$: [function() {
          return new X.EventQueryResponse(new X.APIResponseBase(null, null, "Y", null), null);
        }, null, null, 0, 0, 108, "new EventQueryResponse"]
      }
    },
    "+EventQueryResponse": [3],
    EventItemResponse: {
      "^": "Object;id*-2,title*-0,startTime*-0,creatorNick@-0,creatorId@-2",
      static: {
        EventItemResponse$: [function() {
          return new X.EventItemResponse(null, null, null, null, null);
        }, null, null, 0, 0, 109, "new EventItemResponse"]
      }
    },
    "+EventItemResponse": [3],
    EventRequest: {
      "^": "Object;base@-5,eventId@-2",
      static: {
        EventRequest$: [function() {
          return new X.EventRequest(null, null);
        }, null, null, 0, 0, 110, "new EventRequest"]
      }
    },
    "+EventRequest": [3],
    EventGetResponse: {
      "^": "Object;base@-8,title*-0,description*-0,duration*-0,location*-0,startTimeU@-0,startTimeR@-0,creatorNick@-0,creatorId@-2,creatorAvatarUrl@-0,createdAtR@-0,lat@-0,lon@-0,users@-173,convs@-174,isCreator@-0",
      static: {
        EventGetResponse$: [function() {
          return new X.EventGetResponse(new X.APIResponseBase(null, null, "Y", null), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
        }, null, null, 0, 0, 111, "new EventGetResponse"]
      }
    },
    "+EventGetResponse": [3],
    EventGetUserResponse: {
      "^": "Object;userId@-2,nick@-0,publicName@-0,avatarUrl@-0,status*-0,statusDesc@-0",
      static: {
        EventGetUserResponse$: [function() {
          return new X.EventGetUserResponse(null, null, null, null, null, null);
        }, null, null, 0, 0, 112, "new EventGetUserResponse"]
      }
    },
    "+EventGetUserResponse": [3],
    EventGetConvResponse: {
      "^": "Object;id*-2,open*-0,title*-0,lastActivity@-0",
      static: {
        EventGetConvResponse$: [function() {
          return new X.EventGetConvResponse(null, null, null, null);
        }, null, null, 0, 0, 113, "new EventGetConvResponse"]
      }
    },
    "+EventGetConvResponse": [3],
    EventSaveRequest: {
      "^": "Object;base@-5,eventId@-2,title*-0,description*-0,duration*-0,location*-0,startTime*-0,lat@-0,lon@-0",
      static: {
        EventSaveRequest$: [function() {
          return new X.EventSaveRequest(null, null, null, null, null, null, null, null, null);
        }, null, null, 0, 0, 114, "new EventSaveRequest"]
      }
    },
    "+EventSaveRequest": [3],
    EventUserSaveRequest: {
      "^": "Object;base@-5,eventId@-2,status*-0,statusDesc@-0",
      static: {
        EventUserSaveRequest$: [function() {
          return new X.EventUserSaveRequest(null, null, null, null);
        }, null, null, 0, 0, 115, "new EventUserSaveRequest"]
      }
    },
    "+EventUserSaveRequest": [3],
    ProjectQueryRequest: {
      "^": "Object;base@-5,catId@-2,title*-0",
      static: {
        ProjectQueryRequest$: [function() {
          return new X.ProjectQueryRequest(null, null, null);
        }, null, null, 0, 0, 116, "new ProjectQueryRequest"]
      }
    },
    "+ProjectQueryRequest": [3],
    ProjectQueryResponse: {
      "^": "Object;base@-8,projects@-175",
      static: {
        ProjectQueryResponse$: [function() {
          return new X.ProjectQueryResponse(new X.APIResponseBase(null, null, "Y", null), null);
        }, null, null, 0, 0, 117, "new ProjectQueryResponse"]
      }
    },
    "+ProjectQueryResponse": [3],
    ProjectQueryItem: {
      "^": "Object;projectId@-2,title*-0,description*-0,leadership@-0,privacy@-0",
      static: {
        ProjectQueryItem$: [function() {
          return new X.ProjectQueryItem(null, null, null, null, null);
        }, null, null, 0, 0, 118, "new ProjectQueryItem"]
      }
    },
    "+ProjectQueryItem": [3],
    ProjectGetRequest: {
      "^": "Object;base@-5,projectId@-2",
      static: {
        ProjectGetRequest$: [function() {
          return new X.ProjectGetRequest(null, null);
        }, null, null, 0, 0, 119, "new ProjectGetRequest"]
      }
    },
    "+ProjectGetRequest": [3],
    ProjectGetResponse: {
      "^": "Object;base@-8,active*-0,leadership@-0,privacy@-0,title*-0,description*-0,categoryId@-2,userKind@-0,proposals@-176,convs@-177,docs@-178",
      static: {
        ProjectGetResponse$: [function() {
          return new X.ProjectGetResponse(new X.APIResponseBase(null, null, "Y", null), null, null, null, null, null, null, null, null, null, null);
        }, null, null, 0, 0, 120, "new ProjectGetResponse"]
      }
    },
    "+ProjectGetResponse": [3],
    ProjectProposalItem: {
      "^": "Object;id*-2,active*-0,title*-0,createdAt@-0",
      static: {
        ProjectProposalItem$: [function() {
          return new X.ProjectProposalItem(null, null, null, null);
        }, null, null, 0, 0, 121, "new ProjectProposalItem"]
      }
    },
    "+ProjectProposalItem": [3],
    ProjectConvItem: {
      "^": "Object;id*-2,open*-0,title*-0,lastActivity@-0",
      static: {
        ProjectConvItem$: [function() {
          return new X.ProjectConvItem(null, null, null, null);
        }, null, null, 0, 0, 122, "new ProjectConvItem"]
      }
    },
    "+ProjectConvItem": [3],
    ProjectDocItem: {
      "^": "Object;id*-2,title*-0",
      static: {
        ProjectDocItem$: [function() {
          return new X.ProjectDocItem(null, null);
        }, null, null, 0, 0, 123, "new ProjectDocItem"]
      }
    },
    "+ProjectDocItem": [3],
    ProjectSaveRequest: {
      "^": "Object;base@-5,projectId@-2,leadership@-0,privacy@-0,title*-0,description*-0,categoryId@-2",
      static: {
        ProjectSaveRequest$: [function() {
          return new X.ProjectSaveRequest(null, null, null, null, null, null, null);
        }, null, null, 0, 0, 187, "new ProjectSaveRequest"]
      }
    },
    "+ProjectSaveRequest": [3],
    ProjectUserQueryRequest: {
      "^": "Object;base@-5,projectId@-2,name*-0,resultPage@-2",
      static: {
        ProjectUserQueryRequest$: [function() {
          return new X.ProjectUserQueryRequest(null, null, null, 0);
        }, null, null, 0, 0, 125, "new ProjectUserQueryRequest"]
      }
    },
    "+ProjectUserQueryRequest": [3],
    ProjectUserQueryResponse: {
      "^": "Object;base@-8,projectTitle@-0,completeLoad@-0,editable@-0,users@-179",
      static: {
        ProjectUserQueryResponse$: [function() {
          return new X.ProjectUserQueryResponse(new X.APIResponseBase(null, null, "Y", null), null, null, null, null);
        }, null, null, 0, 0, 126, "new ProjectUserQueryResponse"]
      }
    },
    "+ProjectUserQueryResponse": [3],
    ProjectUserItem: {
      "^": "Object;userId@-2,kind*-0,throttle@-0,nick@-0,publicName@-0,avatarUrl@-0,voteKind@-0",
      static: {
        ProjectUserItem$: [function() {
          return new X.ProjectUserItem(null, null, null, null, null, null, null);
        }, null, null, 0, 0, 127, "new ProjectUserItem"]
      }
    },
    "+ProjectUserItem": [3],
    ProjectUserSaveRequest: {
      "^": "Object;base@-5,projectId@-2,userId@-2,kind*-0",
      static: {
        ProjectUserSaveRequest$: [function() {
          return new X.ProjectUserSaveRequest(null, null, null, null);
        }, null, null, 0, 0, 128, "new ProjectUserSaveRequest"]
      }
    },
    "+ProjectUserSaveRequest": [3],
    ProjectUserUserSaveRequest: {
      "^": "Object;base@-5,projectId@-2,aboutId@-2,kind*-0",
      static: {
        ProjectUserUserSaveRequest$: [function() {
          return new X.ProjectUserUserSaveRequest(null, null, null, null);
        }, null, null, 0, 0, 129, "new ProjectUserUserSaveRequest"]
      }
    },
    "+ProjectUserUserSaveRequest": [3],
    ProposalQueryRequest: {
      "^": "Object;base@-5,mode*-0,year@-2,projectId@-2",
      static: {
        ProposalQueryRequest$: [function() {
          return new X.ProposalQueryRequest(null, null, null, null);
        }, null, null, 0, 0, 130, "new ProposalQueryRequest"]
      }
    },
    "+ProposalQueryRequest": [3],
    ProposalQueryResponse: {
      "^": "Object;base@-8,items*-180",
      static: {
        ProposalQueryResponse$: [function() {
          return new X.ProposalQueryResponse(new X.APIResponseBase(null, null, "Y", null), null);
        }, null, null, 0, 0, 131, "new ProposalQueryResponse"]
      }
    },
    "+ProposalQueryResponse": [3],
    ProposalQueryItem: {
      "^": "Object;id*-2,title*-0,kind*-0",
      static: {
        ProposalQueryItem$: [function() {
          return new X.ProposalQueryItem(null, null, null);
        }, null, null, 0, 0, 132, "new ProposalQueryItem"]
      }
    },
    "+ProposalQueryItem": [3],
    ProposalGetRequest: {
      "^": "Object;base@-5,proposalId@-2",
      static: {
        ProposalGetRequest$: [function() {
          return new X.ProposalGetRequest(null, null);
        }, null, null, 0, 0, 133, "new ProposalGetRequest"]
      }
    },
    "+ProposalGetRequest": [3],
    ProposalGetResponse: {
      "^": "Object;base@-8,active*-0,kind*-0,eligible@-0,title*-0,summary@-0,summaryHtml@-0,dtext@-0,timeout*-0,deleteTime@-0,winningOption@-2,createdBy@-2,projectId@-2,docId@-2,createdByNick@-0,createdByAvatarUrl@-0,options*-181,myVote@-2,statusDescription@-0,myEligible@-0",
      static: {
        ProposalGetResponse$: [function() {
          return new X.ProposalGetResponse(new X.APIResponseBase(null, null, "Y", null), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
        }, null, null, 0, 0, 134, "new ProposalGetResponse"]
      }
    },
    "+ProposalGetResponse": [3],
    ProposalOptionItem: {
      "^": "Object;optionNo@-2,voteCount@-2,optionDesc@-0",
      static: {
        ProposalOptionItem$: [function() {
          return new X.ProposalOptionItem(null, null, null);
        }, null, null, 0, 0, 135, "new ProposalOptionItem"]
      }
    },
    "+ProposalOptionItem": [3],
    ProposalSaveRequest: {
      "^": "Object;base@-5,kind*-0,projectId@-2,eligible@-0,title*-0,summary@-0,days@-2,options*-32",
      static: {
        ProposalSaveRequest$: [function() {
          return new X.ProposalSaveRequest(null, null, null, null, null, null, null, null);
        }, null, null, 0, 0, 136, "new ProposalSaveRequest"]
      }
    },
    "+ProposalSaveRequest": [3],
    ProposalUserSaveRequest: {
      "^": "Object;base@-5,proposalId@-2,vote@-2",
      static: {
        ProposalUserSaveRequest$: [function() {
          return new X.ProposalUserSaveRequest(null, null, null);
        }, null, null, 0, 0, 137, "new ProposalUserSaveRequest"]
      }
    },
    "+ProposalUserSaveRequest": [3],
    PushQueueGetRequest: {
      "^": "Object;base@-5,depth@-0",
      static: {
        PushQueueGetRequest$: [function() {
          return new X.PushQueueGetRequest(null, null);
        }, null, null, 0, 0, 138, "new PushQueueGetRequest"]
      }
    },
    "+PushQueueGetRequest": [3],
    PushQueueGetResponse: {
      "^": "Object;base@-8,items*-183,fullModeStatus@-0",
      static: {
        PushQueueGetResponse$: [function() {
          return new X.PushQueueGetResponse(new X.APIResponseBase(null, null, "Y", null), null, null);
        }, null, null, 0, 0, 139, "new PushQueueGetResponse"]
      }
    },
    "+PushQueueGetResponse": [3],
    PushQueueItem: {
      "^": "Object;kind*-0,why@-0,iid@-2,sid@-0,text*-0,linkText@-0,linkPaneKey@-0",
      static: {
        PushQueueItem$: [function() {
          return new X.PushQueueItem(null, null, null, null, null, null, null);
        }, null, null, 0, 0, 140, "new PushQueueItem"]
      }
    },
    "+PushQueueItem": [3],
    ResourceQueryRequest: {
      "^": "Object;base@-5,categoryId@-2,title*-0,kind*-0",
      static: {
        ResourceQueryRequest$: [function() {
          return new X.ResourceQueryRequest(null, null, null, null);
        }, null, null, 0, 0, 141, "new ResourceQueryRequest"]
      }
    },
    "+ResourceQueryRequest": [3],
    ResourceQueryResponse: {
      "^": "Object;base@-8,items*-184",
      static: {
        ResourceQueryResponse$: [function() {
          return new X.ResourceQueryResponse(new X.APIResponseBase(null, null, "Y", null), null);
        }, null, null, 0, 0, 142, "new ResourceQueryResponse"]
      }
    },
    "+ResourceQueryResponse": [3],
    ResourceItem: {
      "^": "Object;id*-2,title*-0,url*-0,description*-0",
      static: {
        ResourceItem$: [function() {
          return new X.ResourceItem(null, null, null, null);
        }, null, null, 0, 0, 143, "new ResourceItem"]
      }
    },
    "+ResourceItem": [3],
    ResourceGetRequest: {
      "^": "Object;base@-5,id*-2",
      static: {
        ResourceGetRequest$: [function() {
          return new X.ResourceGetRequest(null, null);
        }, null, null, 0, 0, 144, "new ResourceGetRequest"]
      }
    },
    "+ResourceGetRequest": [3],
    ResourceGetResponse: {
      "^": "Object;base@-8,categoryId@-2,userId@-2,importantCount@-2,title*-0,description*-0,createdAt@-0,visible*-0,kind*-0,url*-0,userKind@-0,isSiteAdmin@-0,isCreator@-0,nick@-0",
      static: {
        ResourceGetResponse$: [function() {
          return new X.ResourceGetResponse(new X.APIResponseBase(null, null, "Y", null), null, null, null, null, null, null, null, null, null, null, null, null, null);
        }, null, null, 0, 0, 145, "new ResourceGetResponse"]
      }
    },
    "+ResourceGetResponse": [3],
    ResourceSaveRequest: {
      "^": "Object;base@-5,id*-2,categoryId@-2,title*-0,description*-0,kind*-0,url*-0",
      static: {
        ResourceSaveRequest$: [function() {
          return new X.ResourceSaveRequest(null, null, null, null, null, null, null);
        }, null, null, 0, 0, 146, "new ResourceSaveRequest"]
      }
    },
    "+ResourceSaveRequest": [3],
    ResourceTriageRequest: {
      "^": "Object;base@-5,id*-2,mode*-0",
      static: {
        ResourceTriageRequest$: [function() {
          return new X.ResourceTriageRequest(null, null, null);
        }, null, null, 0, 0, 147, "new ResourceTriageRequest"]
      }
    },
    "+ResourceTriageRequest": [3],
    ResourceUserSaveRequest: {
      "^": "Object;base@-5,id*-2,kind*-0",
      static: {
        ResourceUserSaveRequest$: [function() {
          return new X.ResourceUserSaveRequest(null, null, null);
        }, null, null, 0, 0, 148, "new ResourceUserSaveRequest"]
      }
    },
    "+ResourceUserSaveRequest": [3],
    UserQueryRequest: {
      "^": "Object;base@-5,name*-0",
      static: {
        UserQueryRequest$: [function() {
          return new X.UserQueryRequest(null, null);
        }, null, null, 0, 0, 149, "new UserQueryRequest"]
      }
    },
    "+UserQueryRequest": [3],
    UserQueryResponse: {
      "^": "Object;base@-8,users@-185",
      static: {
        UserQueryResponse$: [function() {
          return new X.UserQueryResponse(new X.APIResponseBase(null, null, "Y", null), null);
        }, null, null, 0, 0, 150, "new UserQueryResponse"]
      }
    },
    "+UserQueryResponse": [3],
    UserQueryItem: {
      "^": "Object;id*-2,nick@-0,kind*-0,publicName@-0,avatarUrl@-0",
      static: {
        UserQueryItem$: [function() {
          return new X.UserQueryItem(null, null, null, null, null);
        }, null, null, 0, 0, 151, "new UserQueryItem"]
      }
    },
    "+UserQueryItem": [3],
    UserGetRequest: {
      "^": "Object;base@-5,userId@-2,includeDetail@-0,includeEditing@-0",
      static: {
        UserGetRequest$: [function() {
          return new X.UserGetRequest(null, null, null, null);
        }, null, null, 0, 0, 152, "new UserGetRequest"]
      }
    },
    "+UserGetRequest": [3],
    UserGetResponse: {
      "^": "Object;base@-8,status*-0,nick@-0,email@-0,kind*-0,isSiteAdmin@-0,publicName@-0,prefEmailNotify@-0,publicLinks@-31,timeZone@-0,allTimeZones@-32,avatarUrl@-0,userUserKind@-0,events@-21,projects@-21,resources@-21",
      static: {
        UserGetResponse$: [function() {
          return new X.UserGetResponse(new X.APIResponseBase(null, null, "Y", null), null, null, null, null, null, null, "N", null, null, null, null, null, null, null, null);
        }, null, null, 0, 0, 153, "new UserGetResponse"]
      }
    },
    "+UserGetResponse": [3],
    UserSaveRequest: {
      "^": "Object;base@-5,isNew@-0,isDelete@-0,saveNick@-0,savePW@-0,kind*-0,email@-0,isSiteAdmin@-0,publicName@-0,prefEmailNotify@-0,publicLinks@-31,timeZone@-0",
      static: {
        UserSaveRequest$: [function() {
          return new X.UserSaveRequest(null, null, null, null, null, null, null, null, null, null, null, null);
        }, null, null, 0, 0, 154, "new UserSaveRequest"]
      }
    },
    "+UserSaveRequest": [3],
    UserAvatarSaveRequest: {
      "^": "Object;base@-5,imageBytes@-15",
      static: {
        UserAvatarSaveRequest$: [function() {
          return new X.UserAvatarSaveRequest(null, null);
        }, null, null, 0, 0, 155, "new UserAvatarSaveRequest"]
      }
    },
    "+UserAvatarSaveRequest": [3],
    UserNotifySaveRequest: {
      "^": "Object;base@-5,notifyId@-0",
      static: {
        UserNotifySaveRequest$: [function() {
          return new X.UserNotifySaveRequest(null, null);
        }, null, null, 0, 0, 156, "new UserNotifySaveRequest"]
      }
    },
    "+UserNotifySaveRequest": [3],
    UserRecoverPasswordRequest: {
      "^": "Object;base@-5,recoveryNick@-0,mode*-0,recoveryPassword@-0,code*-0",
      static: {
        UserRecoverPasswordRequest$: [function() {
          return new X.UserRecoverPasswordRequest(null, null, null, null, null);
        }, null, null, 0, 0, 157, "new UserRecoverPasswordRequest"]
      }
    },
    "+UserRecoverPasswordRequest": [3],
    UserUserSaveRequest: {
      "^": "Object;base@-5,aboutId@-2,kind*-0",
      static: {
        UserUserSaveRequest$: [function() {
          return new X.UserUserSaveRequest(null, null, null);
        }, null, null, 0, 0, 158, "new UserUserSaveRequest"]
      }
    },
    "+UserUserSaveRequest": [3]
  }]];
  setupProgram(dart, 0);
  // getInterceptor methods
  J.getInterceptor = function(receiver) {
    if (typeof receiver == "number") {
      if (Math.floor(receiver) == receiver)
        return J.JSInt.prototype;
      return J.JSDouble.prototype;
    }
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return J.JSNull.prototype;
    if (typeof receiver == "boolean")
      return J.JSBool.prototype;
    if (receiver.constructor == Array)
      return J.JSArray.prototype;
    if (typeof receiver != "object") {
      if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
      return receiver;
    }
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.getInterceptor$asx = function(receiver) {
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return receiver;
    if (receiver.constructor == Array)
      return J.JSArray.prototype;
    if (typeof receiver != "object") {
      if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
      return receiver;
    }
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.getInterceptor$ax = function(receiver) {
    if (receiver == null)
      return receiver;
    if (receiver.constructor == Array)
      return J.JSArray.prototype;
    if (typeof receiver != "object") {
      if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
      return receiver;
    }
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.getInterceptor$n = function(receiver) {
    if (typeof receiver == "number")
      return J.JSNumber.prototype;
    if (receiver == null)
      return receiver;
    if (!(receiver instanceof P.Object))
      return J.UnknownJavaScriptObject.prototype;
    return receiver;
  };
  J.getInterceptor$ns = function(receiver) {
    if (typeof receiver == "number")
      return J.JSNumber.prototype;
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return receiver;
    if (!(receiver instanceof P.Object))
      return J.UnknownJavaScriptObject.prototype;
    return receiver;
  };
  J.getInterceptor$s = function(receiver) {
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return receiver;
    if (!(receiver instanceof P.Object))
      return J.UnknownJavaScriptObject.prototype;
    return receiver;
  };
  J.getInterceptor$x = function(receiver) {
    if (receiver == null)
      return receiver;
    if (typeof receiver != "object") {
      if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
      return receiver;
    }
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.set$_html$_selector$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$_html$_selector(receiver, value);
  };
  J.set$accept$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$accept(receiver, value);
  };
  J.set$borderTopWidth$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$borderTopWidth(receiver, value);
  };
  J.set$bottom$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$bottom(receiver, value);
  };
  J.set$checked$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$checked(receiver, value);
  };
  J.set$className$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$className(receiver, value);
  };
  J.set$colSpan$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$colSpan(receiver, value);
  };
  J.set$disabled$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$disabled(receiver, value);
  };
  J.set$display$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$display(receiver, value);
  };
  J.set$href$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$href(receiver, value);
  };
  J.set$innerHtml$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$innerHtml(receiver, value);
  };
  J.set$kind$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$kind(receiver, value);
  };
  J.set$length$asx = function(receiver, value) {
    return J.getInterceptor$asx(receiver).set$length(receiver, value);
  };
  J.set$maxHeight$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$maxHeight(receiver, value);
  };
  J.set$maxLength$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$maxLength(receiver, value);
  };
  J.set$multiple$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$multiple(receiver, value);
  };
  J.set$name$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$name(receiver, value);
  };
  J.set$next$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$next(receiver, value);
  };
  J.set$readOnly$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$readOnly(receiver, value);
  };
  J.set$selectedIndex$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$selectedIndex(receiver, value);
  };
  J.set$src$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$src(receiver, value);
  };
  J.set$text$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$text(receiver, value);
  };
  J.set$title$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$title(receiver, value);
  };
  J.set$type$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$type(receiver, value);
  };
  J.set$value$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$value(receiver, value);
  };
  J.get$attributes$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$attributes(receiver);
  };
  J.get$body$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$body(receiver);
  };
  J.get$checked$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$checked(receiver);
  };
  J.get$children$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$children(receiver);
  };
  J.get$classes$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$classes(receiver);
  };
  J.get$currentTarget$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$currentTarget(receiver);
  };
  J.get$description$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$description(receiver);
  };
  J.get$display$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$display(receiver);
  };
  J.get$duration$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$duration(receiver);
  };
  J.get$error$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$error(receiver);
  };
  J.get$errorCode$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$errorCode(receiver);
  };
  J.get$id$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$id(receiver);
  };
  J.get$isCollapsed$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$isCollapsed(receiver);
  };
  J.get$isEmpty$asx = function(receiver) {
    return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
  };
  J.get$isNotEmpty$asx = function(receiver) {
    return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
  };
  J.get$items$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$items(receiver);
  };
  J.get$iterator$ax = function(receiver) {
    return J.getInterceptor$ax(receiver).get$iterator(receiver);
  };
  J.get$kind$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$kind(receiver);
  };
  J.get$last$ax = function(receiver) {
    return J.getInterceptor$ax(receiver).get$last(receiver);
  };
  J.get$lastChild$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$lastChild(receiver);
  };
  J.get$length$asx = function(receiver) {
    return J.getInterceptor$asx(receiver).get$length(receiver);
  };
  J.get$location$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$location(receiver);
  };
  J.get$name$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$name(receiver);
  };
  J.get$newValue$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$newValue(receiver);
  };
  J.get$next$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$next(receiver);
  };
  J.get$nodeType$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$nodeType(receiver);
  };
  J.get$nodes$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$nodes(receiver);
  };
  J.get$offsetHeight$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$offsetHeight(receiver);
  };
  J.get$onBlocked$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$onBlocked(receiver);
  };
  J.get$onChange$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$onChange(receiver);
  };
  J.get$onClick$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$onClick(receiver);
  };
  J.get$onUpgradeNeeded$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$onUpgradeNeeded(receiver);
  };
  J.get$parent$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$parent(receiver);
  };
  J.get$previousNode$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$previousNode(receiver);
  };
  J.get$responseText$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$responseText(receiver);
  };
  J.get$result$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$result(receiver);
  };
  J.get$selectedIndex$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$selectedIndex(receiver);
  };
  J.get$status$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$status(receiver);
  };
  J.get$style$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$style(receiver);
  };
  J.get$tagName$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$tagName(receiver);
  };
  J.get$target$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$target(receiver);
  };
  J.get$text$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$text(receiver);
  };
  J.get$title$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$title(receiver);
  };
  J.get$top$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$top(receiver);
  };
  J.get$value$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$value(receiver);
  };
  J.get$valueAsNumber$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$valueAsNumber(receiver);
  };
  J.$add$ns = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver + a0;
    return J.getInterceptor$ns(receiver).$add(receiver, a0);
  };
  J.$div$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver / a0;
    return J.getInterceptor$n(receiver).$div(receiver, a0);
  };
  J.$ge$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver >= a0;
    return J.getInterceptor$n(receiver).$ge(receiver, a0);
  };
  J.$gt$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver > a0;
    return J.getInterceptor$n(receiver).$gt(receiver, a0);
  };
  J.$index$asx = function(receiver, a0) {
    if (typeof a0 === "number")
      if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
        if (a0 >>> 0 === a0 && a0 < receiver.length)
          return receiver[a0];
    return J.getInterceptor$asx(receiver).$index(receiver, a0);
  };
  J.$indexSet$ax = function(receiver, a0, a1) {
    if (typeof a0 === "number")
      if ((receiver.constructor == Array || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])) && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
        return receiver[a0] = a1;
    return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
  };
  J.$le$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver <= a0;
    return J.getInterceptor$n(receiver).$le(receiver, a0);
  };
  J.$lt$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver < a0;
    return J.getInterceptor$n(receiver).$lt(receiver, a0);
  };
  J.$mul$ns = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver * a0;
    return J.getInterceptor$ns(receiver).$mul(receiver, a0);
  };
  J.$negate$n = function(receiver) {
    if (typeof receiver == "number")
      return -receiver;
    return J.getInterceptor$n(receiver).$negate(receiver);
  };
  J.$shl$n = function(receiver, a0) {
    return J.getInterceptor$n(receiver).$shl(receiver, a0);
  };
  J.$sub$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver - a0;
    return J.getInterceptor$n(receiver).$sub(receiver, a0);
  };
  J.$xor$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return (receiver ^ a0) >>> 0;
    return J.getInterceptor$n(receiver).$xor(receiver, a0);
  };
  J.__isolate_helper$_add$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).__isolate_helper$_add$1(receiver, a0);
  };
  J._async$_add$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver)._async$_add$1(receiver, a0);
  };
  J._clearChildren$0$x = function(receiver) {
    return J.getInterceptor$x(receiver)._clearChildren$0(receiver);
  };
  J._removeChild$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver)._removeChild$1(receiver, a0);
  };
  J._replaceChild$2$x = function(receiver, a0, a1) {
    return J.getInterceptor$x(receiver)._replaceChild$2(receiver, a0, a1);
  };
  J.add$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).add$1(receiver, a0);
  };
  J.addCell$0$x = function(receiver) {
    return J.getInterceptor$x(receiver).addCell$0(receiver);
  };
  J.addEventListener$3$x = function(receiver, a0, a1, a2) {
    return J.getInterceptor$x(receiver).addEventListener$3(receiver, a0, a1, a2);
  };
  J.addRow$0$x = function(receiver) {
    return J.getInterceptor$x(receiver).addRow$0(receiver);
  };
  J.allMatches$1$s = function(receiver, a0) {
    return J.getInterceptor$s(receiver).allMatches$1(receiver, a0);
  };
  J.append$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).append$1(receiver, a0);
  };
  J.appendHtml$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).appendHtml$1(receiver, a0);
  };
  J.cancel$0$x = function(receiver) {
    return J.getInterceptor$x(receiver).cancel$0(receiver);
  };
  J.clear$0$ax = function(receiver) {
    return J.getInterceptor$ax(receiver).clear$0(receiver);
  };
  J.clone$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).clone$1(receiver, a0);
  };
  J.codeUnitAt$1$s = function(receiver, a0) {
    return J.getInterceptor$s(receiver).codeUnitAt$1(receiver, a0);
  };
  J.collapse$0$x = function(receiver) {
    return J.getInterceptor$x(receiver).collapse$0(receiver);
  };
  J.complete$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).complete$1(receiver, a0);
  };
  J.contains$1$asx = function(receiver, a0) {
    return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
  };
  J.contains$2$asx = function(receiver, a0, a1) {
    return J.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
  };
  J.createFragment$3$treeSanitizer$validator$x = function(receiver, a0, a1, a2) {
    return J.getInterceptor$x(receiver).createFragment$3$treeSanitizer$validator(receiver, a0, a1, a2);
  };
  J.elementAt$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
  };
  J.endsWith$1$s = function(receiver, a0) {
    return J.getInterceptor$s(receiver).endsWith$1(receiver, a0);
  };
  J.fillRange$3$ax = function(receiver, a0, a1, a2) {
    return J.getInterceptor$ax(receiver).fillRange$3(receiver, a0, a1, a2);
  };
  J.firstWhere$2$orElse$ax = function(receiver, a0, a1) {
    return J.getInterceptor$ax(receiver).firstWhere$2$orElse(receiver, a0, a1);
  };
  J.forEach$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
  };
  J.getBoundingClientRect$0$x = function(receiver) {
    return J.getInterceptor$x(receiver).getBoundingClientRect$0(receiver);
  };
  J.getComputedStyle$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).getComputedStyle$1(receiver, a0);
  };
  J.getPropertyValue$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).getPropertyValue$1(receiver, a0);
  };
  J.insertAdjacentElement$2$x = function(receiver, a0, a1) {
    return J.getInterceptor$x(receiver).insertAdjacentElement$2(receiver, a0, a1);
  };
  J.insertAdjacentHtml$4$treeSanitizer$validator$x = function(receiver, a0, a1, a2, a3) {
    return J.getInterceptor$x(receiver).insertAdjacentHtml$4$treeSanitizer$validator(receiver, a0, a1, a2, a3);
  };
  J.makeHtml$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).makeHtml$1(receiver, a0);
  };
  J.map$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).map$1(receiver, a0);
  };
  J.matchAsPrefix$2$s = function(receiver, a0, a1) {
    return J.getInterceptor$s(receiver).matchAsPrefix$2(receiver, a0, a1);
  };
  J.matches$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).matches$1(receiver, a0);
  };
  J.modify$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).modify$1(receiver, a0);
  };
  J.querySelector$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).querySelector$1(receiver, a0);
  };
  J.querySelectorAll$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).querySelectorAll$1(receiver, a0);
  };
  J.remove$0$ax = function(receiver) {
    return J.getInterceptor$ax(receiver).remove$0(receiver);
  };
  J.remove$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).remove$1(receiver, a0);
  };
  J.removeEventListener$3$x = function(receiver, a0, a1, a2) {
    return J.getInterceptor$x(receiver).removeEventListener$3(receiver, a0, a1, a2);
  };
  J.removeWhere$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).removeWhere$1(receiver, a0);
  };
  J.replaceAll$2$s = function(receiver, a0, a1) {
    return J.getInterceptor$s(receiver).replaceAll$2(receiver, a0, a1);
  };
  J.replaceWith$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
  };
  J.round$0$n = function(receiver) {
    return J.getInterceptor$n(receiver).round$0(receiver);
  };
  J.run$0$x = function(receiver) {
    return J.getInterceptor$x(receiver).run$0(receiver);
  };
  J.scrollIntoView$0$x = function(receiver) {
    return J.getInterceptor$x(receiver).scrollIntoView$0(receiver);
  };
  J.send$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).send$1(receiver, a0);
  };
  J.setInnerHtml$2$treeSanitizer$x = function(receiver, a0, a1) {
    return J.getInterceptor$x(receiver).setInnerHtml$2$treeSanitizer(receiver, a0, a1);
  };
  J.setInnerHtml$3$treeSanitizer$validator$x = function(receiver, a0, a1, a2) {
    return J.getInterceptor$x(receiver).setInnerHtml$3$treeSanitizer$validator(receiver, a0, a1, a2);
  };
  J.setProperty$3$x = function(receiver, a0, a1, a2) {
    return J.getInterceptor$x(receiver).setProperty$3(receiver, a0, a1, a2);
  };
  J.singleWhere$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).singleWhere$1(receiver, a0);
  };
  J.skip$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).skip$1(receiver, a0);
  };
  J.split$1$s = function(receiver, a0) {
    return J.getInterceptor$s(receiver).split$1(receiver, a0);
  };
  J.startsWith$1$s = function(receiver, a0) {
    return J.getInterceptor$s(receiver).startsWith$1(receiver, a0);
  };
  J.startsWith$2$s = function(receiver, a0, a1) {
    return J.getInterceptor$s(receiver).startsWith$2(receiver, a0, a1);
  };
  J.substring$1$s = function(receiver, a0) {
    return J.getInterceptor$s(receiver).substring$1(receiver, a0);
  };
  J.substring$2$s = function(receiver, a0, a1) {
    return J.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
  };
  J.toList$0$ax = function(receiver) {
    return J.getInterceptor$ax(receiver).toList$0(receiver);
  };
  J.toLowerCase$0$s = function(receiver) {
    return J.getInterceptor$s(receiver).toLowerCase$0(receiver);
  };
  J.toUpperCase$0$s = function(receiver) {
    return J.getInterceptor$s(receiver).toUpperCase$0(receiver);
  };
  J.trim$0$s = function(receiver) {
    return J.getInterceptor$s(receiver).trim$0(receiver);
  };
  J.where$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).where$1(receiver, a0);
  };
  J.get$hashCode$ = function(receiver) {
    return J.getInterceptor(receiver).get$hashCode(receiver);
  };
  J.get$runtimeType$ = function(receiver) {
    return J.getInterceptor(receiver).get$runtimeType(receiver);
  };
  J.$eq$ = function(receiver, a0) {
    if (receiver == null)
      return a0 == null;
    if (typeof receiver != "object")
      return a0 != null && receiver === a0;
    return J.getInterceptor(receiver).$eq(receiver, a0);
  };
  J.noSuchMethod$1$ = function(receiver, a0) {
    return J.getInterceptor(receiver).noSuchMethod$1(receiver, a0);
  };
  J.toString$0$ = function(receiver) {
    return J.getInterceptor(receiver).toString$0(receiver);
  };
  Isolate.makeConstantList = function(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
  };
  var $ = Isolate.$isolateProperties;
  C.BodyElement_methods = W.BodyElement.prototype;
  C.CssStyleDeclaration_methods = W.CssStyleDeclaration.prototype;
  C.FileReader_methods = W.FileReader.prototype;
  C.HttpRequest_methods = W.HttpRequest.prototype;
  C.Interceptor_methods = J.Interceptor.prototype;
  C.JSArray_methods = J.JSArray.prototype;
  C.JSDouble_methods = J.JSDouble.prototype;
  C.JSInt_methods = J.JSInt.prototype;
  C.JSNull_methods = J.JSNull.prototype;
  C.JSNumber_methods = J.JSNumber.prototype;
  C.JSString_methods = J.JSString.prototype;
  C.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
  C.NativeUint8List_methods = H.NativeUint8List.prototype;
  C.NodeList_methods = W.NodeList.prototype;
  C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
  C.Storage_methods = W.Storage.prototype;
  C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
  C.Window_methods = W.Window.prototype;
  C.C_DynamicRuntimeType = new H.DynamicRuntimeType();
  C.C_OutOfMemoryError = new P.OutOfMemoryError();
  C.C_Utf8Encoder = new P.Utf8Encoder();
  C.C__DelayedDone = new P._DelayedDone();
  C.C__RootZone = new P._RootZone();
  C.C__TrustedHtmlTreeSanitizer = new W._TrustedHtmlTreeSanitizer();
  C.Duration_0 = new P.Duration(0);
  C.Easing_0 = new L.Easing(0);
  C.Easing_1 = new L.Easing(1);
  C.Easing_10 = new L.Easing(10);
  C.Easing_11 = new L.Easing(11);
  C.Easing_12 = new L.Easing(12);
  C.Easing_13 = new L.Easing(13);
  C.Easing_14 = new L.Easing(14);
  C.Easing_15 = new L.Easing(15);
  C.Easing_16 = new L.Easing(16);
  C.Easing_17 = new L.Easing(17);
  C.Easing_18 = new L.Easing(18);
  C.Easing_19 = new L.Easing(19);
  C.Easing_2 = new L.Easing(2);
  C.Easing_20 = new L.Easing(20);
  C.Easing_21 = new L.Easing(21);
  C.Easing_3 = new L.Easing(3);
  C.Easing_4 = new L.Easing(4);
  C.Easing_5 = new L.Easing(5);
  C.Easing_6 = new L.Easing(6);
  C.Easing_7 = new L.Easing(7);
  C.Easing_8 = new L.Easing(8);
  C.Easing_9 = new L.Easing(9);
  C.EventStreamProvider_blocked = H.setRuntimeTypeInfo(new W.EventStreamProvider("blocked"), [W.Event]);
  C.EventStreamProvider_change = H.setRuntimeTypeInfo(new W.EventStreamProvider("change"), [W.Event]);
  C.EventStreamProvider_click = H.setRuntimeTypeInfo(new W.EventStreamProvider("click"), [W.MouseEvent]);
  C.EventStreamProvider_error = H.setRuntimeTypeInfo(new W.EventStreamProvider("error"), [W.Event]);
  C.EventStreamProvider_error0 = H.setRuntimeTypeInfo(new W.EventStreamProvider("error"), [W.ProgressEvent]);
  C.EventStreamProvider_hashchange = H.setRuntimeTypeInfo(new W.EventStreamProvider("hashchange"), [W.Event]);
  C.EventStreamProvider_keydown = H.setRuntimeTypeInfo(new W.EventStreamProvider("keydown"), [W.KeyboardEvent]);
  C.EventStreamProvider_load = H.setRuntimeTypeInfo(new W.EventStreamProvider("load"), [W.ProgressEvent]);
  C.EventStreamProvider_resize = H.setRuntimeTypeInfo(new W.EventStreamProvider("resize"), [W.Event]);
  C.EventStreamProvider_storage = H.setRuntimeTypeInfo(new W.EventStreamProvider("storage"), [W.StorageEvent]);
  C.EventStreamProvider_success = H.setRuntimeTypeInfo(new W.EventStreamProvider("success"), [W.Event]);
  C.EventStreamProvider_upgradeneeded = H.setRuntimeTypeInfo(new W.EventStreamProvider("upgradeneeded"), [P.VersionChangeEvent]);
  C.HtmlEscapeMode_p2v = new P.HtmlEscapeMode("unknown", true, true, true, true);
  C.HtmlEscape_gsm = new P.HtmlEscape(C.HtmlEscapeMode_p2v);
  C.JS_CONST_0 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
  C.JS_CONST_4hp = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
  C.JS_CONST_8ZY = function getTagFallback(o) {
  var constructor = o.constructor;
  if (typeof constructor == "function") {
    var name = constructor.name;
    if (typeof name == "string" &&
        name.length > 2 &&
        name !== "Object" &&
        name !== "Function.prototype") {
      return name;
    }
  }
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
  C.JS_CONST_Fs4 = function(hooks) { return hooks; }
;
  C.JS_CONST_QJm = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
  C.JS_CONST_gkc0 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
  C.JS_CONST_gkc = function() {
  function typeNameInChrome(o) {
    var constructor = o.constructor;
    if (constructor) {
      var name = constructor.name;
      if (name) return name;
    }
    var s = Object.prototype.toString.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = Object.prototype.toString.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: typeNameInChrome,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
  C.JS_CONST_rr7 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
  C.JS_CONST_s8I = function(_, letter) { return letter.toUpperCase(); };
  C.JsonCodec_null_null = new P.JsonCodec(null, null);
  C.JsonDecoder_null = new P.JsonDecoder(null);
  C.JsonEncoder_null_null = new P.JsonEncoder(null, null);
  C.List_2Vk = Isolate.makeConstantList([0, 0, 32776, 33792, 1, 10240, 0, 0]);
  C.List_2Zi = H.setRuntimeTypeInfo(Isolate.makeConstantList(["*::class", "*::dir", "*::draggable", "*::hidden", "*::id", "*::inert", "*::itemprop", "*::itemref", "*::itemscope", "*::lang", "*::spellcheck", "*::title", "*::translate", "A::accesskey", "A::coords", "A::hreflang", "A::name", "A::shape", "A::tabindex", "A::target", "A::type", "AREA::accesskey", "AREA::alt", "AREA::coords", "AREA::nohref", "AREA::shape", "AREA::tabindex", "AREA::target", "AUDIO::controls", "AUDIO::loop", "AUDIO::mediagroup", "AUDIO::muted", "AUDIO::preload", "BDO::dir", "BODY::alink", "BODY::bgcolor", "BODY::link", "BODY::text", "BODY::vlink", "BR::clear", "BUTTON::accesskey", "BUTTON::disabled", "BUTTON::name", "BUTTON::tabindex", "BUTTON::type", "BUTTON::value", "CANVAS::height", "CANVAS::width", "CAPTION::align", "COL::align", "COL::char", "COL::charoff", "COL::span", "COL::valign", "COL::width", "COLGROUP::align", "COLGROUP::char", "COLGROUP::charoff", "COLGROUP::span", "COLGROUP::valign", "COLGROUP::width", "COMMAND::checked", "COMMAND::command", "COMMAND::disabled", "COMMAND::label", "COMMAND::radiogroup", "COMMAND::type", "DATA::value", "DEL::datetime", "DETAILS::open", "DIR::compact", "DIV::align", "DL::compact", "FIELDSET::disabled", "FONT::color", "FONT::face", "FONT::size", "FORM::accept", "FORM::autocomplete", "FORM::enctype", "FORM::method", "FORM::name", "FORM::novalidate", "FORM::target", "FRAME::name", "H1::align", "H2::align", "H3::align", "H4::align", "H5::align", "H6::align", "HR::align", "HR::noshade", "HR::size", "HR::width", "HTML::version", "IFRAME::align", "IFRAME::frameborder", "IFRAME::height", "IFRAME::marginheight", "IFRAME::marginwidth", "IFRAME::width", "IMG::align", "IMG::alt", "IMG::border", "IMG::height", "IMG::hspace", "IMG::ismap", "IMG::name", "IMG::usemap", "IMG::vspace", "IMG::width", "INPUT::accept", "INPUT::accesskey", "INPUT::align", "INPUT::alt", "INPUT::autocomplete", "INPUT::autofocus", "INPUT::checked", "INPUT::disabled", "INPUT::inputmode", "INPUT::ismap", "INPUT::list", "INPUT::max", "INPUT::maxlength", "INPUT::min", "INPUT::multiple", "INPUT::name", "INPUT::placeholder", "INPUT::readonly", "INPUT::required", "INPUT::size", "INPUT::step", "INPUT::tabindex", "INPUT::type", "INPUT::usemap", "INPUT::value", "INS::datetime", "KEYGEN::disabled", "KEYGEN::keytype", "KEYGEN::name", "LABEL::accesskey", "LABEL::for", "LEGEND::accesskey", "LEGEND::align", "LI::type", "LI::value", "LINK::sizes", "MAP::name", "MENU::compact", "MENU::label", "MENU::type", "METER::high", "METER::low", "METER::max", "METER::min", "METER::value", "OBJECT::typemustmatch", "OL::compact", "OL::reversed", "OL::start", "OL::type", "OPTGROUP::disabled", "OPTGROUP::label", "OPTION::disabled", "OPTION::label", "OPTION::selected", "OPTION::value", "OUTPUT::for", "OUTPUT::name", "P::align", "PRE::width", "PROGRESS::max", "PROGRESS::min", "PROGRESS::value", "SELECT::autocomplete", "SELECT::disabled", "SELECT::multiple", "SELECT::name", "SELECT::required", "SELECT::size", "SELECT::tabindex", "SOURCE::type", "TABLE::align", "TABLE::bgcolor", "TABLE::border", "TABLE::cellpadding", "TABLE::cellspacing", "TABLE::frame", "TABLE::rules", "TABLE::summary", "TABLE::width", "TBODY::align", "TBODY::char", "TBODY::charoff", "TBODY::valign", "TD::abbr", "TD::align", "TD::axis", "TD::bgcolor", "TD::char", "TD::charoff", "TD::colspan", "TD::headers", "TD::height", "TD::nowrap", "TD::rowspan", "TD::scope", "TD::valign", "TD::width", "TEXTAREA::accesskey", "TEXTAREA::autocomplete", "TEXTAREA::cols", "TEXTAREA::disabled", "TEXTAREA::inputmode", "TEXTAREA::name", "TEXTAREA::placeholder", "TEXTAREA::readonly", "TEXTAREA::required", "TEXTAREA::rows", "TEXTAREA::tabindex", "TEXTAREA::wrap", "TFOOT::align", "TFOOT::char", "TFOOT::charoff", "TFOOT::valign", "TH::abbr", "TH::align", "TH::axis", "TH::bgcolor", "TH::char", "TH::charoff", "TH::colspan", "TH::headers", "TH::height", "TH::nowrap", "TH::rowspan", "TH::scope", "TH::valign", "TH::width", "THEAD::align", "THEAD::char", "THEAD::charoff", "THEAD::valign", "TR::align", "TR::bgcolor", "TR::char", "TR::charoff", "TR::valign", "TRACK::default", "TRACK::kind", "TRACK::label", "TRACK::srclang", "UL::compact", "UL::type", "VIDEO::controls", "VIDEO::height", "VIDEO::loop", "VIDEO::mediagroup", "VIDEO::muted", "VIDEO::preload", "VIDEO::width"]), [P.String]);
  C.List_CVk = Isolate.makeConstantList([0, 0, 65490, 45055, 65535, 34815, 65534, 18431]);
  C.List_JYB = Isolate.makeConstantList([0, 0, 26624, 1023, 65534, 2047, 65534, 2047]);
  C.List_ego = Isolate.makeConstantList(["HEAD", "AREA", "BASE", "BASEFONT", "BR", "COL", "COLGROUP", "EMBED", "FRAME", "FRAMESET", "HR", "IMAGE", "IMG", "INPUT", "ISINDEX", "LINK", "META", "PARAM", "SOURCE", "STYLE", "TITLE", "WBR"]);
  C.List_empty0 = H.setRuntimeTypeInfo(Isolate.makeConstantList([]), [P.TypeMirror]);
  C.List_empty1 = H.setRuntimeTypeInfo(Isolate.makeConstantList([]), [P.TypeVariableMirror]);
  C.List_empty = Isolate.makeConstantList([]);
  C.List_gRj = Isolate.makeConstantList([0, 0, 32722, 12287, 65534, 34815, 65534, 18431]);
  C.List_nxB = Isolate.makeConstantList([0, 0, 24576, 1023, 65534, 34815, 65534, 18431]);
  C.List_qNA = Isolate.makeConstantList([0, 0, 32754, 11263, 65534, 34815, 65534, 18431]);
  C.List_qg40 = Isolate.makeConstantList([0, 0, 32722, 12287, 65535, 34815, 65534, 18431]);
  C.List_qg4 = Isolate.makeConstantList([0, 0, 65490, 12287, 65535, 34815, 65534, 18431]);
  C.List_scrollTop_scrollLeft = Isolate.makeConstantList(["scrollTop", "scrollLeft"]);
  C.List_wSV = H.setRuntimeTypeInfo(Isolate.makeConstantList(["bind", "if", "ref", "repeat", "syntax"]), [P.String]);
  C.List_yrN = H.setRuntimeTypeInfo(Isolate.makeConstantList(["A::href", "AREA::href", "BLOCKQUOTE::cite", "BODY::background", "COMMAND::icon", "DEL::cite", "FORM::action", "IMG::src", "INPUT::src", "INS::cite", "Q::cite", "VIDEO::poster"]), [P.String]);
  C.List_empty2 = H.setRuntimeTypeInfo(Isolate.makeConstantList([]), [P.Symbol]);
  C.Map_empty0 = H.setRuntimeTypeInfo(new H.ConstantStringMap(0, {}, C.List_empty2), [P.Symbol, null]);
  C.Map_empty = new H.ConstantStringMap(0, {}, C.List_empty);
  C.Symbol_call = new H.Symbol0("call");
  C.Symbol_dynamic = new H.Symbol0("dynamic");
  C.Symbol_void = new H.Symbol0("void");
  C.Type_ByteBuffer_RkP = H.createRuntimeType("ByteBuffer");
  C.Type_ByteData_zNC = H.createRuntimeType("ByteData");
  C.Type_Float32List_LB7 = H.createRuntimeType("Float32List");
  C.Type_Float64List_LB7 = H.createRuntimeType("Float64List");
  C.Type_Function_3bx = H.createRuntimeType("Function");
  C.Type_Int16List_uXf = H.createRuntimeType("Int16List");
  C.Type_Int32List_O50 = H.createRuntimeType("Int32List");
  C.Type_Int8List_ekJ = H.createRuntimeType("Int8List");
  C.Type_JSObject_8k0 = H.createRuntimeType("JSObject");
  C.Type_JsTypeVariableMirror_gT2 = H.createRuntimeType("JsTypeVariableMirror");
  C.Type_Null_Yyn = H.createRuntimeType("Null");
  C.Type_String_k8F = H.createRuntimeType("String");
  C.Type_Uint16List_2bx = H.createRuntimeType("Uint16List");
  C.Type_Uint32List_2bx = H.createRuntimeType("Uint32List");
  C.Type_Uint8ClampedList_Jik = H.createRuntimeType("Uint8ClampedList");
  C.Type_Uint8List_WLA = H.createRuntimeType("Uint8List");
  C.Type_bool_lhE = H.createRuntimeType("bool");
  C.Type_double_K1J = H.createRuntimeType("$double");
  C.Type_dynamic_0Rz = H.createRuntimeType("dynamic");
  C.Type_int_tHn = H.createRuntimeType("$int");
  C.Type_num_cv7 = H.createRuntimeType("num");
  C.Utf8Codec_false = new P.Utf8Codec(false);
  $.Primitives_mirrorFunctionCacheName = "$cachedFunction";
  $.Primitives_mirrorInvokeCacheName = "$cachedInvocation";
  $.Closure_functionCounter = 0;
  $.BoundClosure_selfFieldNameCache = null;
  $.BoundClosure_receiverFieldNameCache = null;
  $.deferredLoadHook = null;
  $.getTagFunction = null;
  $.alternateTagFunction = null;
  $.prototypeForTagFunction = null;
  $.dispatchRecordsForInstanceTags = null;
  $.interceptorsForUncacheableTags = null;
  $.initNativeDispatchFlag = null;
  $.JsMirrorSystem__librariesByName = null;
  $.JsMirrorSystem__hasInstalledDeferredLoadHook = false;
  $.classMirrors = null;
  $._nextCallback = null;
  $._lastCallback = null;
  $._lastPriorityCallback = null;
  $._isInCallbackLoop = false;
  $.Zone__current = C.C__RootZone;
  $.Expando__keyCount = 0;
  $.Element__parseDocument = null;
  $.Element__parseRange = null;
  $.Element__defaultValidator = null;
  $.Element__defaultSanitizer = null;
  $.Device__isOpera = null;
  $.Device__isIE = null;
  $.Device__isFirefox = null;
  $.Device__isWebKit = null;
  $.Device__cachedCssPrefix = null;
  $.ButtonBarBuilder_systemButtonHandler = null;
  $.Globals_isLargeScreen = null;
  $.Globals_userId = 0;
  $.Globals_nick = null;
  $.Globals_password = null;
  $.Globals_publicName = null;
  $.Globals_isSiteAdmin = null;
  $.Globals_pollExplicitlyRequested = false;
  $.Globals_urlChangedInCode = false;
  $.Globals_menuShowing = false;
  $.Globals_myStuffShowing = false;
  $.HtmlLib__maxid = 0;
  $.LocationDialog__googleMaps = null;
  $.LocationDialog__map = null;
  $.LocationDialog__geocoder = null;
  $.LocationDialog__mapCubbyhole = null;
  $.LocationDialog__mapDiv = null;
  $.MainMenuHandler__panel = null;
  $.MainMenuHandler__loggedInOnlyItems = null;
  $.MainMenuHandler__loggedOutOnlyItems = null;
  $.PushQueueHandler__suppressQuickRefreshTimer = null;
  $.RpcLib_serverBaseUrl = null;
  $.UserDialog_onLogoutAccount = null;
  $.UserDialog_onChangeAccount = null;
  $ = null;
  init.isHunkLoaded = function(hunkHash) {
    return !!$dart_deferred_initializers$[hunkHash];
  };
  init.deferredInitialized = new Object(null);
  init.isHunkInitialized = function(hunkHash) {
    return init.deferredInitialized[hunkHash];
  };
  init.initializeLoadedHunk = function(hunkHash) {
    $dart_deferred_initializers$[hunkHash]($globals$, $);
    init.deferredInitialized[hunkHash] = true;
  };
  init.deferredLibraryUris = {};
  init.deferredLibraryHashes = {};
  // Empty type-to-interceptor map.
  (function(lazies) {
    for (var i = 0; i < lazies.length;) {
      var fieldName = lazies[i++];
      var getterName = lazies[i++];
      var lazyValue = lazies[i++];
      var staticName = lazies[i++];
      Isolate.$lazy(fieldName, getterName, lazyValue, staticName);
    }
  })(["DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", function() {
    return H.getIsolateAffinityTag("_$dart_dartClosure");
  }, "DART_CLOSURE_PROPERTY_NAME", "IsolateNatives_thisScript", "$get$IsolateNatives_thisScript", function() {
    return H.IsolateNatives_computeThisScript();
  }, "IsolateNatives_thisScript", "IsolateNatives_workerIds", "$get$IsolateNatives_workerIds", function() {
    return P.Expando$(null, P.$int);
  }, "IsolateNatives_workerIds", "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({
      toString: function() {
        return "$receiver$";
      }
    }));
  }, "TypeErrorDecoder_noSuchMethodPattern", "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({$method$: null,
      toString: function() {
        return "$receiver$";
      }
    }));
  }, "TypeErrorDecoder_notClosurePattern", "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
  }, "TypeErrorDecoder_nullCallPattern", "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = '$arguments$';
      try {
        null.$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }());
  }, "TypeErrorDecoder_nullLiteralCallPattern", "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
  }, "TypeErrorDecoder_undefinedCallPattern", "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = '$arguments$';
      try {
        (void 0).$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }());
  }, "TypeErrorDecoder_undefinedLiteralCallPattern", "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
  }, "TypeErrorDecoder_nullPropertyPattern", "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      try {
        null.$method$;
      } catch (e) {
        return e.message;
      }
    }());
  }, "TypeErrorDecoder_nullLiteralPropertyPattern", "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
  }, "TypeErrorDecoder_undefinedPropertyPattern", "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      try {
        (void 0).$method$;
      } catch (e) {
        return e.message;
      }
    }());
  }, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "JsMirrorSystem__dynamicType", "$get$JsMirrorSystem__dynamicType", function() {
    return H.JsTypeMirror$(C.Symbol_dynamic);
  }, "JsMirrorSystem__dynamicType", "JsMirrorSystem__voidType", "$get$JsMirrorSystem__voidType", function() {
    return H.JsTypeMirror$(C.Symbol_void);
  }, "JsMirrorSystem__voidType", "currentJsMirrorSystem", "$get$currentJsMirrorSystem", function() {
    return new H.JsMirrorSystem(null, new H.JsIsolateMirror(H._globalState().currentContext));
  }, "currentJsMirrorSystem", "mangledNames", "$get$mangledNames", function() {
    return new H._LazyMangledInstanceNamesMap(init.mangledNames);
  }, "mangledNames", "reflectiveNames", "$get$reflectiveNames", function() {
    return new H._LazyReflectiveNamesMap(init.mangledNames, true, 0, null);
  }, "reflectiveNames", "mangledGlobalNames", "$get$mangledGlobalNames", function() {
    return new H._LazyMangledNamesMap(init.mangledGlobalNames);
  }, "mangledGlobalNames", "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", function() {
    return P._AsyncRun__initializeScheduleImmediate();
  }, "_AsyncRun__scheduleImmediateClosure", "Future__nullFuture", "$get$Future__nullFuture", function() {
    return P._Future$immediate(null, null);
  }, "Future__nullFuture", "_toStringVisiting", "$get$_toStringVisiting", function() {
    return [];
  }, "_toStringVisiting", "_Uri__needsNoEncoding", "$get$_Uri__needsNoEncoding", function() {
    return P.RegExp_RegExp("^[\\-\\.0-9A-Z_a-z~]*$", true, false);
  }, "_Uri__needsNoEncoding", "_scannerTables", "$get$_scannerTables", function() {
    return P._createTables();
  }, "_scannerTables", "CssStyleDeclaration__propertyCache", "$get$CssStyleDeclaration__propertyCache", function() {
    return {};
  }, "CssStyleDeclaration__propertyCache", "_Html5NodeValidator__allowedElements", "$get$_Html5NodeValidator__allowedElements", function() {
    return P.LinkedHashSet_LinkedHashSet$from(["A", "ABBR", "ACRONYM", "ADDRESS", "AREA", "ARTICLE", "ASIDE", "AUDIO", "B", "BDI", "BDO", "BIG", "BLOCKQUOTE", "BR", "BUTTON", "CANVAS", "CAPTION", "CENTER", "CITE", "CODE", "COL", "COLGROUP", "COMMAND", "DATA", "DATALIST", "DD", "DEL", "DETAILS", "DFN", "DIR", "DIV", "DL", "DT", "EM", "FIELDSET", "FIGCAPTION", "FIGURE", "FONT", "FOOTER", "FORM", "H1", "H2", "H3", "H4", "H5", "H6", "HEADER", "HGROUP", "HR", "I", "IFRAME", "IMG", "INPUT", "INS", "KBD", "LABEL", "LEGEND", "LI", "MAP", "MARK", "MENU", "METER", "NAV", "NOBR", "OL", "OPTGROUP", "OPTION", "OUTPUT", "P", "PRE", "PROGRESS", "Q", "S", "SAMP", "SECTION", "SELECT", "SMALL", "SOURCE", "SPAN", "STRIKE", "STRONG", "SUB", "SUMMARY", "SUP", "TABLE", "TBODY", "TD", "TEXTAREA", "TFOOT", "TH", "THEAD", "TIME", "TR", "TRACK", "TT", "U", "UL", "VAR", "VIDEO", "WBR"], null);
  }, "_Html5NodeValidator__allowedElements", "_Html5NodeValidator__attributeValidators", "$get$_Html5NodeValidator__attributeValidators", function() {
    return P.LinkedHashMap__makeEmpty();
  }, "_Html5NodeValidator__attributeValidators", "CssClassSetImpl__validTokenRE", "$get$CssClassSetImpl__validTokenRE", function() {
    return P.RegExp_RegExp("^\\S+$", true, false);
  }, "CssClassSetImpl__validTokenRE", "context", "$get$context", function() {
    return P._wrapToDart(self);
  }, "context", "_DART_OBJECT_PROPERTY_NAME", "$get$_DART_OBJECT_PROPERTY_NAME", function() {
    return H.getIsolateAffinityTag("_$dart_dartObject");
  }, "_DART_OBJECT_PROPERTY_NAME", "_dartProxyCtor", "$get$_dartProxyCtor", function() {
    return function DartObject(o) {
      this.o = o;
    };
  }, "_dartProxyCtor", "ElementAnimation_valueUnitRegex", "$get$ElementAnimation_valueUnitRegex", function() {
    return P.RegExp_RegExp("^(-?[0-9\\.]+)([a-zA-Z%]+)$", true, false);
  }, "ElementAnimation_valueUnitRegex", "_elemDisplay", "$get$_elemDisplay", function() {
    return P.LinkedHashMap__makeLiteral(["body", "block"]);
  }, "_elemDisplay", "_dataPriv", "$get$_dataPriv", function() {
    return Q._Storage$("dquery-data-priv");
  }, "_dataPriv", "_rootDQuery", "$get$_rootDQuery", function() {
    return Q.$document(null);
  }, "_rootDQuery", "ClientStore__store", "$get$ClientStore__store", function() {
    return W.window().localStorage;
  }, "ClientStore__store", "ConfirmDialog_YesNoOptions", "$get$ConfirmDialog_YesNoOptions", function() {
    return ["Yes", "No"];
  }, "ConfirmDialog_YesNoOptions", "Globals_allResourceKinds", "$get$Globals_allResourceKinds", function() {
    return ["On-line reading", "On-line multimedia", "Book", "Product", "Organization", "Service", "Location"];
  }, "Globals_allResourceKinds", "Globals_allPublicLinkKinds", "$get$Globals_allPublicLinkKinds", function() {
    return ["Email", "Blog", "Facebook", "Twitter", "Linked-in", "Google+", "Tumblr", "Instagram", "Other(1)", "Other(2)", "Other(3)"];
  }, "Globals_allPublicLinkKinds", "Globals_allUserKinds", "$get$Globals_allUserKinds", function() {
    return P.LinkedHashMap__makeLiteral(["V", "Visitor", "M", "Member", "A", "Ally"]);
  }, "Globals_allUserKinds", "Globals_allProjectUserKinds", "$get$Globals_allProjectUserKinds", function() {
    return P.LinkedHashMap__makeLiteral(["O", "Observer", "V", "Visitor", "A", "Active member", "M", "Project manager"]);
  }, "Globals_allProjectUserKinds", "Globals_allProjectPrivacy", "$get$Globals_allProjectPrivacy", function() {
    return P.LinkedHashMap__makeLiteral(["P", "Public", "A", "Announcement - private for posting, public for reading", "R", "Private - join by request or invite", "I", "Extra-private - by invite only"]);
  }, "Globals_allProjectPrivacy", "Globals_panes", "$get$Globals_panes", function() {
    return H.setRuntimeTypeInfo([], [S.BasePane]);
  }, "Globals_panes", "Globals_lastActivityUtc", "$get$Globals_lastActivityUtc", function() {
    return M.WLib_utcNow();
  }, "Globals_lastActivityUtc", "Globals_pushQueue", "$get$Globals_pushQueue", function() {
    return H.setRuntimeTypeInfo([], [X.PushQueueItem]);
  }, "Globals_pushQueue", "Globals_doOnUserAction", "$get$Globals_doOnUserAction", function() {
    return H.JsLinkedHashMap_JsLinkedHashMap$es6(P.String, {func: 1, ret: P.Future});
  }, "Globals_doOnUserAction", "Globals_lastPollUtc", "$get$Globals_lastPollUtc", function() {
    return P.DateTime$(1970, 1, 1, 0, 0, 0, 0, 0);
  }, "Globals_lastPollUtc", "Globals_lastFullPollUtc", "$get$Globals_lastFullPollUtc", function() {
    return P.DateTime$(1970, 1, 1, 0, 0, 0, 0, 0);
  }, "Globals_lastFullPollUtc", "MainController_fontThemes", "$get$MainController_fontThemes", function() {
    return ["", "theme-small", "theme-large", "theme-fancy"];
  }, "MainController_fontThemes", "MainController_fontThemeNames", "$get$MainController_fontThemeNames", function() {
    return ["Default", "Small", "Large", "Fancy"];
  }, "MainController_fontThemeNames", "MainController_colorThemes", "$get$MainController_colorThemes", function() {
    return ["", "theme-dark", "theme-muted", "theme-princess", "theme-forest"];
  }, "MainController_colorThemes", "MainController_colorThemeNames", "$get$MainController_colorThemeNames", function() {
    return ["Default", "Dark", "Muted", "Princess", "Forest"];
  }, "MainController_colorThemeNames"]);
  Isolate = Isolate.$finishIsolateConstructor(Isolate);
  $ = new Isolate();
  init.metadata = ["e", null, "error", "value", "stackTrace", "_", "result", "data", "s", "element", "o", "i", "invocation", "kind", "object", "x", "v", "attributeName", "context", "n", "elem", "numberOfArguments", "arg3", "arg4", "each", "reflectee", "event", "arg", 0, "other", "index", "closure", "attr", "isolate", "map", "captureThis", "self", "arguments", "sender", "highResTime", "selector", "errorCode", "c", "results", "status", "nick", "pw", "savePW", "arg1", "arg2", "linkKind", "linkValue", "callback"];
  init.types = [P.String, {func: 1, args: [,]}, P.$int, P.Object, {func: 1}, X.APIRequestBase, {func: 1, ret: P.Future, args: [,]}, {func: 1, v: true}, X.APIResponseBase, {func: 1, args: [,,]}, {func: 1, args: [W.Element]}, {func: 1, ret: P.Future}, {func: 1, ret: P.Future, args: [W.MouseEvent]}, {func: 1, ret: P.String, args: [P.$int]}, {func: 1, ret: W.Node}, [P.List, P.$int], {func: 1, args: [P.Symbol, P.Mirror]}, {func: 1, v: true, args: [P.Object], opt: [P.StackTrace]}, {func: 1, v: true, args: [P.String, P.String]}, {func: 1, ret: P.bool}, {func: 1, v: true, args: [{func: 1, v: true}]}, [P.List, X.APIResponseAssociation], {func: 1, ret: W.CheckboxInputElement, args: [P.bool, P.String]}, {func: 1, ret: P.String}, {func: 1, v: true, args: [P.Uint8List, P.String, P.$int]}, {func: 1, ret: P.Future, args: [P.String]}, {func: 1, args: [P.String, P.String]}, {func: 1, args: [P.Symbol,,]}, {func: 1, v: true, args: [, P.StackTrace]}, {func: 1, args: [P.bool]}, {func: 1, args: [P.String,,]}, [P.Map, P.String, P.String], [P.List, P.String], {func: 1, ret: P.bool, args: [W.Element, P.String, P.String, W._Html5NodeValidator]}, {func: 1, args: [P.String]}, {func: 1, v: true, args: [,]}, {func: 1, v: true, args: [W.Element, L.CategoryNode, P.$int]}, {func: 1, ret: Q.ElementQuery, opt: [P.String]}, {func: 1, args: [, P.StackTrace]}, {func: 1, args: [P.CssClassSetImpl]}, {func: 1, ret: P.$int, args: [P.String]}, {func: 1, args: [{func: 1, v: true}]}, {func: 1, ret: W.WindowBase, args: [P.String, P.String], opt: [P.String]}, {func: 1, args: [P.bool, P.CssClassSetImpl]}, {func: 1, v: true, args: [W.Node, W.Node]}, {func: 1, v: true, opt: [P.Object]}, {func: 1, ret: [P.Future, P.Database], args: [P.String], named: {onBlocked: {func: 1, v: true, args: [,]}, onUpgradeNeeded: {func: 1, v: true, args: [,]}, version: P.$int}}, {func: 1, ret: [P.List, W.RtcStatsReport]}, {func: 1, args: [P.num]}, {func: 1, args: [, P.String]}, {func: 1, ret: P.Future, args: [W.Element]}, {func: 1, args: [P.$int,,]}, {func: 1, ret: [P.List, L.CategoryNode], args: [P.$int]}, {func: 1, v: true, args: [L.CategoryNode]}, {func: 1, v: true, args: [P.String, P.String], named: {async: P.bool, password: P.String, user: P.String}}, {func: 1, v: true, args: [P.String]}, {func: 1, ret: [P.Future, P.String], args: [P.String, P.String, P.bool]}, {func: 1, v: true, args: [W.Element, P.bool]}, {func: 1, args: [W.Event]}, {func: 1, ret: W.CheckboxInputElement, args: [P.bool, P.String, P.$int]}, {func: 1, ret: P.String, args: [X.PushQueueItem]}, {func: 1, ret: P.bool, args: [W.FontFace]}, {func: 1, v: true, args: [,], opt: [P.StackTrace]}, {func: 1, args: [W.OptionElement]}, {func: 1, ret: [P.List, G.StringTuple]}, {func: 1, v: true, args: [P.String, [P.List, X.APIResponseAssociation], P.String]}, {func: 1, v: true, args: [P.Map]}, {func: 1, args: [P.VariableMirror]}, {func: 1, args: [,], opt: [,]}, {func: 1, ret: P.Object, opt: [P.Object]}, {func: 1, ret: P.Object, args: [,]}, {func: 1, v: true, args: [W.Element, Q.ElementQuery]}, {func: 1, ret: X.APIRequestBase}, {func: 1, ret: X.APIResponseBase}, {func: 1, ret: X.APIResponseAssociation}, {func: 1, ret: X.AuthenticateResponse}, {func: 1, ret: X.CategoryQueryRequest}, {func: 1, ret: X.CategoryQueryResponse}, {func: 1, ret: X.CategoryDeleteRequest}, {func: 1, ret: X.CategorySaveRequest}, {func: 1, ret: X.CategoryMoveContentsRequest}, {func: 1, ret: X.CategoryItemResponse}, {func: 1, ret: X.ConvQueryRequest}, {func: 1, ret: X.ConvQueryResponse}, {func: 1, ret: X.ConvQueryConvItemResponse}, {func: 1, ret: X.ConvQueryPostItemResponse}, {func: 1, ret: X.ConvGetRequest}, {func: 1, ret: X.ConvGetResponse}, {func: 1, ret: X.ConvGetPostItem}, {func: 1, ret: X.ConvGetRulesRequest}, {func: 1, ret: X.ConvGetRulesResponse}, {func: 1, ret: X.ConvSaveRequest}, {func: 1, ret: X.ConvPostGetRequest}, {func: 1, ret: X.ConvPostGetResponse}, {func: 1, ret: X.ConvPostSaveRequest}, {func: 1, ret: X.ConvPostImageSaveRequest}, {func: 1, ret: X.ConvPostUserSaveRequest}, {func: 1, ret: X.ConvSetReadPositionRequest}, {func: 1, ret: X.ConvUserSaveRequest}, {func: 1, ret: X.DocQueryRequest}, {func: 1, ret: X.DocQueryResponse}, {func: 1, ret: X.DocQueryItem}, {func: 1, ret: X.DocGetRequest}, {func: 1, ret: X.DocGetResponse}, {func: 1, ret: X.DocGetVersionItem}, {func: 1, ret: X.DocSaveRequest}, {func: 1, ret: X.DocRollbackRequest}, {func: 1, ret: X.EventQueryRequest}, {func: 1, ret: X.EventQueryResponse}, {func: 1, ret: X.EventItemResponse}, {func: 1, ret: X.EventRequest}, {func: 1, ret: X.EventGetResponse}, {func: 1, ret: X.EventGetUserResponse}, {func: 1, ret: X.EventGetConvResponse}, {func: 1, ret: X.EventSaveRequest}, {func: 1, ret: X.EventUserSaveRequest}, {func: 1, ret: X.ProjectQueryRequest}, {func: 1, ret: X.ProjectQueryResponse}, {func: 1, ret: X.ProjectQueryItem}, {func: 1, ret: X.ProjectGetRequest}, {func: 1, ret: X.ProjectGetResponse}, {func: 1, ret: X.ProjectProposalItem}, {func: 1, ret: X.ProjectConvItem}, {func: 1, ret: X.ProjectDocItem}, {func: 1, ret: P.Uint8List, args: [,,]}, {func: 1, ret: X.ProjectUserQueryRequest}, {func: 1, ret: X.ProjectUserQueryResponse}, {func: 1, ret: X.ProjectUserItem}, {func: 1, ret: X.ProjectUserSaveRequest}, {func: 1, ret: X.ProjectUserUserSaveRequest}, {func: 1, ret: X.ProposalQueryRequest}, {func: 1, ret: X.ProposalQueryResponse}, {func: 1, ret: X.ProposalQueryItem}, {func: 1, ret: X.ProposalGetRequest}, {func: 1, ret: X.ProposalGetResponse}, {func: 1, ret: X.ProposalOptionItem}, {func: 1, ret: X.ProposalSaveRequest}, {func: 1, ret: X.ProposalUserSaveRequest}, {func: 1, ret: X.PushQueueGetRequest}, {func: 1, ret: X.PushQueueGetResponse}, {func: 1, ret: X.PushQueueItem}, {func: 1, ret: X.ResourceQueryRequest}, {func: 1, ret: X.ResourceQueryResponse}, {func: 1, ret: X.ResourceItem}, {func: 1, ret: X.ResourceGetRequest}, {func: 1, ret: X.ResourceGetResponse}, {func: 1, ret: X.ResourceSaveRequest}, {func: 1, ret: X.ResourceTriageRequest}, {func: 1, ret: X.ResourceUserSaveRequest}, {func: 1, ret: X.UserQueryRequest}, {func: 1, ret: X.UserQueryResponse}, {func: 1, ret: X.UserQueryItem}, {func: 1, ret: X.UserGetRequest}, {func: 1, ret: X.UserGetResponse}, {func: 1, ret: X.UserSaveRequest}, {func: 1, ret: X.UserAvatarSaveRequest}, {func: 1, ret: X.UserNotifySaveRequest}, {func: 1, ret: X.UserRecoverPasswordRequest}, {func: 1, ret: X.UserUserSaveRequest}, H.TearOffClosure, {func: 1, ret: P.TypeMirror, args: [P.$int]}, {func: 1, ret: P.$int, args: [P.$int, P.$int]}, {func: 1, v: true, args: [P.String], opt: [,]}, {func: 1, v: true, args: [P.String, P.$int]}, {func: 1, ret: P.bool, args: [,]}, [P.List, X.CategoryItemResponse], {func: 1, ret: P.$int}, [P.List, X.ConvQueryConvItemResponse], [P.List, X.ConvQueryPostItemResponse], [P.List, X.ConvGetPostItem], [P.List, X.DocQueryItem], [P.List, X.DocGetVersionItem], [P.List, X.EventItemResponse], [P.List, X.EventGetUserResponse], [P.List, X.EventGetConvResponse], [P.List, X.ProjectQueryItem], [P.List, X.ProjectProposalItem], [P.List, X.ProjectConvItem], [P.List, X.ProjectDocItem], [P.List, X.ProjectUserItem], [P.List, X.ProposalQueryItem], [P.List, X.ProposalOptionItem], {func: 1, ret: P.Type}, [P.List, X.PushQueueItem], [P.List, X.ResourceItem], [P.List, X.UserQueryItem], {func: 1, args: [P.Invocation]}, {func: 1, ret: X.ProjectSaveRequest}];
  function convertToFastObject(properties) {
    function MyClass() {
    }
    MyClass.prototype = properties;
    new MyClass();
    return properties;
  }
  function convertToSlowObject(properties) {
    properties.__MAGIC_SLOW_PROPERTY = 1;
    delete properties.__MAGIC_SLOW_PROPERTY;
    return properties;
  }
  A = convertToFastObject(A);
  B = convertToFastObject(B);
  C = convertToFastObject(C);
  D = convertToFastObject(D);
  E = convertToFastObject(E);
  F = convertToFastObject(F);
  G = convertToFastObject(G);
  H = convertToFastObject(H);
  J = convertToFastObject(J);
  K = convertToFastObject(K);
  L = convertToFastObject(L);
  M = convertToFastObject(M);
  N = convertToFastObject(N);
  O = convertToFastObject(O);
  P = convertToFastObject(P);
  Q = convertToFastObject(Q);
  R = convertToFastObject(R);
  S = convertToFastObject(S);
  T = convertToFastObject(T);
  U = convertToFastObject(U);
  V = convertToFastObject(V);
  W = convertToFastObject(W);
  X = convertToFastObject(X);
  Y = convertToFastObject(Y);
  Z = convertToFastObject(Z);
  function init() {
    Isolate.$isolateProperties = Object.create(null);
    init.allClasses = map();
    init.getTypeFromName = function(name) {
      return init.allClasses[name];
    };
    init.interceptorsByTag = map();
    init.leafTags = map();
    init.finishedClasses = map();
    Isolate.$lazy = function(fieldName, getterName, lazyValue, staticName, prototype) {
      if (!init.lazies)
        init.lazies = Object.create(null);
      init.lazies[fieldName] = getterName;
      prototype = prototype || Isolate.$isolateProperties;
      var sentinelUndefined = {};
      var sentinelInProgress = {};
      prototype[fieldName] = sentinelUndefined;
      prototype[getterName] = function() {
        var result = this[fieldName];
        try {
          if (result === sentinelUndefined) {
            this[fieldName] = sentinelInProgress;
            try {
              result = this[fieldName] = lazyValue();
            } finally {
              if (result === sentinelUndefined)
                this[fieldName] = null;
            }
          } else
            if (result === sentinelInProgress)
              H.throwCyclicInit(staticName || fieldName);
          return result;
        } finally {
          this[getterName] = function() {
            return this[fieldName];
          };
        }
      };
    };
    Isolate.$finishIsolateConstructor = function(oldIsolate) {
      var isolateProperties = oldIsolate.$isolateProperties;
      function Isolate() {
        var staticNames = Object.keys(isolateProperties);
        for (var i = 0; i < staticNames.length; i++) {
          var staticName = staticNames[i];
          this[staticName] = isolateProperties[staticName];
        }
        var lazies = init.lazies;
        var lazyInitializers = lazies ? Object.keys(lazies) : [];
        for (var i = 0; i < lazyInitializers.length; i++)
          this[lazies[lazyInitializers[i]]] = null;
        function ForceEfficientMap() {
        }
        ForceEfficientMap.prototype = this;
        new ForceEfficientMap();
        for (var i = 0; i < lazyInitializers.length; i++) {
          var lazyInitName = lazies[lazyInitializers[i]];
          this[lazyInitName] = isolateProperties[lazyInitName];
        }
      }
      Isolate.prototype = oldIsolate.prototype;
      Isolate.prototype.constructor = Isolate;
      Isolate.$isolateProperties = isolateProperties;
      Isolate.makeConstantList = oldIsolate.makeConstantList;
      Isolate.functionThatReturnsNull = oldIsolate.functionThatReturnsNull;
      return Isolate;
    };
  }
  !function() {
    var intern = function(s) {
      var o = {};
      o[s] = 1;
      return Object.keys(convertToFastObject(o))[0];
    };
    init.getIsolateTag = function(name) {
      return intern("___dart_" + name + init.isolateTag);
    };
    var tableProperty = "___dart_isolate_tags_";
    var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
    var rootProperty = "_ZxYxX";
    for (var i = 0;; i++) {
      var property = intern(rootProperty + "_" + i + "_");
      if (!(property in usedProperties)) {
        usedProperties[property] = 1;
        init.isolateTag = property;
        break;
      }
    }
    init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
  }();
  // BEGIN invoke [main].
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != 'undefined') {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener("load", onLoad, false);
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].addEventListener("load", onLoad, false);
  })(function(currentScript) {
    init.currentScript = currentScript;
    if (typeof dartMainRunner === "function")
      dartMainRunner(function(a) {
        H.startRootIsolate(F.main__main$closure(), a);
      }, []);
    else
      (function(a) {
        H.startRootIsolate(F.main__main$closure(), a);
      })([]);
  });
  // END invoke [main].
})();

//# sourceMappingURL=main.dart.js.map
